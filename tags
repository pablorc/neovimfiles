!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/pablorc/.config/nvim/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$GOPATH	plugged/vim-go/scripts/runtest.vim	/^  let $GOPATH = s:gopath$/;"	v
$RUNBENCH_SETTINGS	plugged/vim-go/scripts/runbench.vim	/^  let $RUNBENCH_SETTINGS = join(['array_whitespace_error', 'build_constraints',$/;"	v
*Backward incompatible changes*	plugged/fzf/CHANGELOG.md	/^### *Backward incompatible changes*$/;"	S	section:CHANGELOG""0.9.4
0.0 (Mar 24, 2014)	plugged/vim-go/CHANGELOG.md	/^## 0.0 (Mar 24, 2014)$/;"	s
0.1.0	plugged/nord-vim/CHANGELOG.md	/^# 0.1.0$/;"	c
0.1.1	plugged/nord-vim/CHANGELOG.md	/^# 0.1.1$/;"	c
0.1.2	plugged/nord-vim/CHANGELOG.md	/^# 0.1.2$/;"	c
0.10.0	plugged/fzf/CHANGELOG.md	/^0.10.0$/;"	s	chapter:CHANGELOG
0.10.0	plugged/nord-vim/CHANGELOG.md	/^# 0.10.0$/;"	c
0.10.1	plugged/fzf/CHANGELOG.md	/^0.10.1$/;"	s	chapter:CHANGELOG
0.10.2	plugged/fzf/CHANGELOG.md	/^0.10.2$/;"	s	chapter:CHANGELOG
0.10.3	plugged/fzf/CHANGELOG.md	/^0.10.3$/;"	s	chapter:CHANGELOG
0.10.4	plugged/fzf/CHANGELOG.md	/^0.10.4$/;"	s	chapter:CHANGELOG
0.10.5	plugged/fzf/CHANGELOG.md	/^0.10.5$/;"	s	chapter:CHANGELOG
0.10.6	plugged/fzf/CHANGELOG.md	/^0.10.6$/;"	s	chapter:CHANGELOG
0.10.7	plugged/fzf/CHANGELOG.md	/^0.10.7$/;"	s	chapter:CHANGELOG
0.10.8	plugged/fzf/CHANGELOG.md	/^0.10.8$/;"	s	chapter:CHANGELOG
0.10.9	plugged/fzf/CHANGELOG.md	/^0.10.9$/;"	s	chapter:CHANGELOG
0.11.0	plugged/fzf/CHANGELOG.md	/^0.11.0$/;"	s	chapter:CHANGELOG
0.11.0	plugged/nord-vim/CHANGELOG.md	/^# 0.11.0$/;"	c
0.11.1	plugged/fzf/CHANGELOG.md	/^0.11.1$/;"	s	chapter:CHANGELOG
0.11.2	plugged/fzf/CHANGELOG.md	/^0.11.2$/;"	s	chapter:CHANGELOG
0.11.3	plugged/fzf/CHANGELOG.md	/^0.11.3$/;"	s	chapter:CHANGELOG
0.11.4	plugged/fzf/CHANGELOG.md	/^0.11.4$/;"	s	chapter:CHANGELOG
0.12.0	plugged/fzf/CHANGELOG.md	/^0.12.0$/;"	s	chapter:CHANGELOG
0.12.0	plugged/nord-vim/CHANGELOG.md	/^# 0.12.0$/;"	c
0.12.1	plugged/fzf/CHANGELOG.md	/^0.12.1$/;"	s	chapter:CHANGELOG
0.12.2	plugged/fzf/CHANGELOG.md	/^0.12.2$/;"	s	chapter:CHANGELOG
0.13.0	plugged/fzf/CHANGELOG.md	/^0.13.0$/;"	s	chapter:CHANGELOG
0.13.0	plugged/nord-vim/CHANGELOG.md	/^# 0.13.0$/;"	c
0.13.1	plugged/fzf/CHANGELOG.md	/^0.13.1$/;"	s	chapter:CHANGELOG
0.13.2	plugged/fzf/CHANGELOG.md	/^0.13.2$/;"	s	chapter:CHANGELOG
0.13.3	plugged/fzf/CHANGELOG.md	/^0.13.3$/;"	s	chapter:CHANGELOG
0.13.4	plugged/fzf/CHANGELOG.md	/^0.13.4$/;"	s	chapter:CHANGELOG
0.13.5	plugged/fzf/CHANGELOG.md	/^0.13.5$/;"	s	chapter:CHANGELOG
0.14.0	plugged/nord-vim/CHANGELOG.md	/^# 0.14.0$/;"	c
0.15.0	plugged/fzf/CHANGELOG.md	/^0.15.0$/;"	s	chapter:CHANGELOG
0.15.0	plugged/nord-vim/CHANGELOG.md	/^# 0.15.0$/;"	c
0.15.1	plugged/fzf/CHANGELOG.md	/^0.15.1$/;"	s	chapter:CHANGELOG
0.15.2	plugged/fzf/CHANGELOG.md	/^0.15.2$/;"	s	chapter:CHANGELOG
0.15.3	plugged/fzf/CHANGELOG.md	/^0.15.3$/;"	s	chapter:CHANGELOG
0.15.4	plugged/fzf/CHANGELOG.md	/^0.15.4$/;"	s	chapter:CHANGELOG
0.15.5	plugged/fzf/CHANGELOG.md	/^0.15.5$/;"	s	chapter:CHANGELOG
0.15.6	plugged/fzf/CHANGELOG.md	/^0.15.6$/;"	s	chapter:CHANGELOG
0.15.7	plugged/fzf/CHANGELOG.md	/^0.15.7$/;"	s	chapter:CHANGELOG
0.15.8	plugged/fzf/CHANGELOG.md	/^0.15.8$/;"	s	chapter:CHANGELOG
0.15.9	plugged/fzf/CHANGELOG.md	/^0.15.9$/;"	s	chapter:CHANGELOG
0.16.0	plugged/fzf/CHANGELOG.md	/^0.16.0$/;"	s	chapter:CHANGELOG
0.16.0	plugged/nord-vim/CHANGELOG.md	/^# 0.16.0$/;"	c
0.16.1	plugged/fzf/CHANGELOG.md	/^0.16.1$/;"	s	chapter:CHANGELOG
0.16.10	plugged/fzf/CHANGELOG.md	/^0.16.10$/;"	s	chapter:CHANGELOG
0.16.11	plugged/fzf/CHANGELOG.md	/^0.16.11$/;"	s	chapter:CHANGELOG
0.16.2	plugged/fzf/CHANGELOG.md	/^0.16.2$/;"	s	chapter:CHANGELOG
0.16.3	plugged/fzf/CHANGELOG.md	/^0.16.3$/;"	s	chapter:CHANGELOG
0.16.4	plugged/fzf/CHANGELOG.md	/^0.16.4$/;"	s	chapter:CHANGELOG
0.16.5	plugged/fzf/CHANGELOG.md	/^0.16.5$/;"	s	chapter:CHANGELOG
0.16.6	plugged/fzf/CHANGELOG.md	/^0.16.6$/;"	s	chapter:CHANGELOG
0.16.7	plugged/fzf/CHANGELOG.md	/^0.16.7$/;"	s	chapter:CHANGELOG
0.16.8	plugged/fzf/CHANGELOG.md	/^0.16.8$/;"	s	chapter:CHANGELOG
0.16.9	plugged/fzf/CHANGELOG.md	/^0.16.9$/;"	s	chapter:CHANGELOG
0.17.0	plugged/fzf/CHANGELOG.md	/^0.17.0$/;"	s	chapter:CHANGELOG
0.17.0	plugged/nord-vim/CHANGELOG.md	/^# 0.17.0$/;"	c
0.17.0-2	plugged/fzf/CHANGELOG.md	/^0.17.0-2$/;"	s	chapter:CHANGELOG
0.17.1	plugged/fzf/CHANGELOG.md	/^0.17.1$/;"	s	chapter:CHANGELOG
0.17.3	plugged/fzf/CHANGELOG.md	/^0.17.3$/;"	s	chapter:CHANGELOG
0.17.4	plugged/fzf/CHANGELOG.md	/^0.17.4$/;"	s	chapter:CHANGELOG
0.17.5	plugged/fzf/CHANGELOG.md	/^0.17.5$/;"	s	chapter:CHANGELOG
0.18.0	plugged/fzf/CHANGELOG.md	/^0.18.0$/;"	s	chapter:CHANGELOG
0.18.0	plugged/nord-vim/CHANGELOG.md	/^# 0.18.0$/;"	c
0.19.0	plugged/fzf/CHANGELOG.md	/^0.19.0$/;"	s	chapter:CHANGELOG
0.2.0	plugged/nord-vim/CHANGELOG.md	/^# 0.2.0$/;"	c
0.20.0	plugged/fzf/CHANGELOG.md	/^0.20.0$/;"	s	chapter:CHANGELOG
0.21.1	plugged/fzf/CHANGELOG.md	/^0.21.1$/;"	s	chapter:CHANGELOG
0.22.0	plugged/fzf/CHANGELOG.md	/^0.22.0$/;"	s	chapter:CHANGELOG
0.23.0	plugged/fzf/CHANGELOG.md	/^0.23.0$/;"	s	chapter:CHANGELOG
0.23.1	plugged/fzf/CHANGELOG.md	/^0.23.1$/;"	s	chapter:CHANGELOG
0.24.0	plugged/fzf/CHANGELOG.md	/^0.24.0$/;"	s	chapter:CHANGELOG
0.24.1	plugged/fzf/CHANGELOG.md	/^0.24.1$/;"	s	chapter:CHANGELOG
0.24.2	plugged/fzf/CHANGELOG.md	/^0.24.2$/;"	s	chapter:CHANGELOG
0.24.3	plugged/fzf/CHANGELOG.md	/^0.24.3$/;"	s	chapter:CHANGELOG
0.24.4	plugged/fzf/CHANGELOG.md	/^0.24.4$/;"	s	chapter:CHANGELOG
0.25.0	plugged/fzf/CHANGELOG.md	/^0.25.0$/;"	s	chapter:CHANGELOG
0.25.1	plugged/fzf/CHANGELOG.md	/^0.25.1$/;"	s	chapter:CHANGELOG
0.26.0	plugged/fzf/CHANGELOG.md	/^0.26.0$/;"	s	chapter:CHANGELOG
0.27.0	plugged/fzf/CHANGELOG.md	/^0.27.0$/;"	s	chapter:CHANGELOG
0.27.1	plugged/fzf/CHANGELOG.md	/^0.27.1$/;"	s	chapter:CHANGELOG
0.27.2	plugged/fzf/CHANGELOG.md	/^0.27.2$/;"	s	chapter:CHANGELOG
0.27.3	plugged/fzf/CHANGELOG.md	/^0.27.3$/;"	s	chapter:CHANGELOG
0.28.0	plugged/fzf/CHANGELOG.md	/^0.28.0$/;"	s	chapter:CHANGELOG
0.3.0	plugged/nord-vim/CHANGELOG.md	/^# 0.3.0$/;"	c
0.4.0	plugged/nord-vim/CHANGELOG.md	/^# 0.4.0$/;"	c
0.5.0	plugged/nord-vim/CHANGELOG.md	/^# 0.5.0$/;"	c
0.6.0	plugged/nord-vim/CHANGELOG.md	/^# 0.6.0$/;"	c
0.7.0	plugged/nord-vim/CHANGELOG.md	/^# 0.7.0$/;"	c
0.8.0	plugged/nord-vim/CHANGELOG.md	/^# 0.8.0$/;"	c
0.9.0	plugged/nord-vim/CHANGELOG.md	/^# 0.9.0$/;"	c
0.9.10	plugged/fzf/CHANGELOG.md	/^0.9.10$/;"	s	chapter:CHANGELOG
0.9.11	plugged/fzf/CHANGELOG.md	/^0.9.11$/;"	s	chapter:CHANGELOG
0.9.12	plugged/fzf/CHANGELOG.md	/^0.9.12$/;"	s	chapter:CHANGELOG
0.9.13	plugged/fzf/CHANGELOG.md	/^0.9.13$/;"	s	chapter:CHANGELOG
0.9.3	plugged/fzf/CHANGELOG.md	/^0.9.3$/;"	s	chapter:CHANGELOG
0.9.4	plugged/fzf/CHANGELOG.md	/^0.9.4$/;"	s	chapter:CHANGELOG
0.9.5	plugged/fzf/CHANGELOG.md	/^0.9.5$/;"	s	chapter:CHANGELOG
0.9.6	plugged/fzf/CHANGELOG.md	/^0.9.6$/;"	s	chapter:CHANGELOG
0.9.7	plugged/fzf/CHANGELOG.md	/^0.9.7$/;"	s	chapter:CHANGELOG
0.9.8	plugged/fzf/CHANGELOG.md	/^0.9.8$/;"	s	chapter:CHANGELOG
0.9.9	plugged/fzf/CHANGELOG.md	/^0.9.9$/;"	s	chapter:CHANGELOG
1. Update the list of processes by pressing CTRL-R	plugged/fzf/README.md	/^#### 1. Update the list of processes by pressing CTRL-R$/;"	t	subsection:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics""Reloading the candidate list
1.0 (Dec 24, 2014)	plugged/vim-go/CHANGELOG.md	/^## 1.0 (Dec 24, 2014)$/;"	s
1.0.1 (Feb 9, 2015)	plugged/vim-go/CHANGELOG.md	/^## 1.0.1 (Feb 9, 2015)$/;"	s
1.0.2 (Feb 17, 2015)	plugged/vim-go/CHANGELOG.md	/^## 1.0.2 (Feb 17, 2015)$/;"	s
1.0.3 (Mar 7, 2015)	plugged/vim-go/CHANGELOG.md	/^## 1.0.3 (Mar 7, 2015)$/;"	s
1.0.4 (Apr 28, 2015)	plugged/vim-go/CHANGELOG.md	/^## 1.0.4 (Apr 28, 2015)$/;"	s
1.0.5 (May 26, 2015)	plugged/vim-go/CHANGELOG.md	/^## 1.0.5 (May 26, 2015)$/;"	s
1.1 (Jul 25, 2015)	plugged/vim-go/CHANGELOG.md	/^## 1.1 (Jul 25, 2015)$/;"	s
1.10 (November 24, 2016)	plugged/vim-go/CHANGELOG.md	/^## 1.10 (November 24, 2016)$/;"	s
1.11 - (January 9, 2017)	plugged/vim-go/CHANGELOG.md	/^## 1.11 - (January 9, 2017)$/;"	s
1.12 - (March 29, 2017)	plugged/vim-go/CHANGELOG.md	/^## 1.12 - (March 29, 2017)$/;"	s
1.13 - (June 6, 2017)	plugged/vim-go/CHANGELOG.md	/^## 1.13 - (June 6, 2017)$/;"	s
1.14 - (August 6, 2017)	plugged/vim-go/CHANGELOG.md	/^## 1.14 - (August 6, 2017)$/;"	s
1.15 - (October 3, 2017)	plugged/vim-go/CHANGELOG.md	/^## 1.15 - (October 3, 2017)$/;"	s
1.16 - (December 29, 2017)	plugged/vim-go/CHANGELOG.md	/^## 1.16 - (December 29, 2017)$/;"	s
1.17 - (March 27, 2018)	plugged/vim-go/CHANGELOG.md	/^## 1.17 - (March 27, 2018)$/;"	s
1.18 - (July 18, 2018)	plugged/vim-go/CHANGELOG.md	/^## 1.18 - (July 18, 2018)$/;"	s
1.19 - (November 4, 2018)	plugged/vim-go/CHANGELOG.md	/^## 1.19 - (November 4, 2018)$/;"	s
1.2 (Oct 2, 2015)	plugged/vim-go/CHANGELOG.md	/^## 1.2 (Oct 2, 2015)$/;"	s
1.20 - (April 22, 2019)	plugged/vim-go/CHANGELOG.md	/^## 1.20 - (April 22, 2019)$/;"	s
1.3 (Nov 22, 2015)	plugged/vim-go/CHANGELOG.md	/^## 1.3 (Nov 22, 2015)$/;"	s
1.4 (Jan 18, 2016)	plugged/vim-go/CHANGELOG.md	/^## 1.4 (Jan 18, 2016)$/;"	s
1.5 (Mar 16, 2016)	plugged/vim-go/CHANGELOG.md	/^## 1.5 (Mar 16, 2016)$/;"	s
1.6 (April 25, 2016)	plugged/vim-go/CHANGELOG.md	/^## 1.6 (April 25, 2016)$/;"	s
1.7 (June 7, 2016)	plugged/vim-go/CHANGELOG.md	/^## 1.7 (June 7, 2016)$/;"	s
1.7.1 (June 7, 2016)	plugged/vim-go/CHANGELOG.md	/^## 1.7.1 (June 7, 2016)$/;"	s
1.8 (July 31, 2016)	plugged/vim-go/CHANGELOG.md	/^## 1.8 (July 31, 2016)$/;"	s
1.9 (September 13, 2016)	plugged/vim-go/CHANGELOG.md	/^## 1.9 (September 13, 2016)$/;"	s
2. Switch between sources by pressing CTRL-D or CTRL-F	plugged/fzf/README.md	/^#### 2. Switch between sources by pressing CTRL-D or CTRL-F$/;"	t	subsection:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics""Reloading the candidate list
3. Interactive ripgrep integration	plugged/fzf/README.md	/^#### 3. Interactive ripgrep integration$/;"	t	subsection:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics""Reloading the candidate list
<C-LeftMouse>	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> <C-LeftMouse> <LeftMouse>:GoDef<cr>$/;"	m
<C-]>	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> <C-]> :GoDef<cr>$/;"	m
<C-t>	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> <C-t> :<C-U>call go#def#StackPop(v:count1)<cr>$/;"	m
<C-w><C-]>	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> <C-w><C-]> :<C-u>call go#def#Jump("split", 0)<CR>$/;"	m
<C-w>]	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> <C-w>] :<C-u>call go#def#Jump("split", 0)<CR>$/;"	m
<CR>	plugged/vim-go/autoload/go/def.vim	/^  noremap <buffer> <silent> <CR>  :<C-U>call go#def#SelectStackEntry()<CR>$/;"	m
<CR>	plugged/vim-go/autoload/go/doc.vim	/^      noremap <buffer> <silent> <CR> :<C-U>close<CR>$/;"	m
<CR>	plugged/vim-go/autoload/go/doc.vim	/^  noremap <buffer> <silent> <CR> :<C-U>close<CR>$/;"	m
<Esc>	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^        nnoremap <buffer> <silent> <Esc> :<C-U>call gitgutter#hunk#close_hunk_preview_window()<C/;"	m
<Esc>	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^    nnoremap <buffer> <silent> <Esc> :<C-U>wincmd p<Bar>pclose<CR>$/;"	m
<Esc>	plugged/vim-go/autoload/go/def.vim	/^  noremap <buffer> <silent> <Esc> :<C-U>call go#ui#CloseWindow()<CR>$/;"	m
<Esc>	plugged/vim-go/autoload/go/doc.vim	/^      noremap <buffer> <silent> <Esc> :<C-U>close<CR>$/;"	m
<Esc>	plugged/vim-go/autoload/go/doc.vim	/^  noremap <buffer> <silent> <Esc> :<C-U>close<CR>$/;"	m
<Esc>[	plugged/vim-go/autoload/go/doc.vim	/^  nnoremap <buffer> <silent> <Esc>[ <Esc>[$/;"	m
<Leader>hp	plugged/vim-gitgutter/autoload/gitgutter.vim	/^    nmap <buffer> <Leader>hp <Plug>(GitGutterPreviewHunk)$/;"	m
<Leader>hs	plugged/vim-gitgutter/autoload/gitgutter.vim	/^    nmap <buffer> <Leader>hs <Plug>(GitGutterStageHunk)$/;"	m
<Leader>hs	plugged/vim-gitgutter/autoload/gitgutter.vim	/^    xmap <buffer> <Leader>hs <Plug>(GitGutterStageHunk)$/;"	m
<Leader>hu	plugged/vim-gitgutter/autoload/gitgutter.vim	/^    nmap <buffer> <Leader>hu <Plug>(GitGutterUndoHunk)$/;"	m
<Leader>r	init.vim	/^noremap <Leader>r :%s:::g<Left><Left><Left>$/;"	m
<Plug>(-fzf-complete-finish)	plugged/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-finish) <c-o>l$/;"	m
<Plug>(-fzf-complete-finish)	plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <silent> <Plug>(-fzf-complete-finish) a$/;"	m
<Plug>(-fzf-complete-trigger)	plugged/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-trigger) <c-o>:call <sid>complete_trigger()<cr>$/;"	m
<Plug>(GitGutterNextHunk)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>(GitGutterNextHunk) &diff ? ']c' : ":\\<C-U>execute v:count1 . 'G/;"	m
<Plug>(GitGutterPrevHunk)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>(GitGutterPrevHunk) &diff ? '[c' : ":\\<C-U>execute v:count1 . 'G/;"	m
<Plug>(GitGutterPreviewHunk)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>(GitGutterPreviewHunk) :GitGutterPreviewHunk<CR>$/;"	m
<Plug>(GitGutterStageHunk)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>(GitGutterStageHunk)   :GitGutterStageHunk<CR>$/;"	m
<Plug>(GitGutterStageHunk)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^xnoremap <silent> <Plug>(GitGutterStageHunk)   :GitGutterStageHunk<CR>$/;"	m
<Plug>(GitGutterTextObjectInnerPending)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^onoremap <silent> <Plug>(GitGutterTextObjectInnerPending) :<C-U>call gitgutter#hunk#text_object(/;"	m
<Plug>(GitGutterTextObjectInnerVisual)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^xnoremap <silent> <Plug>(GitGutterTextObjectInnerVisual)  :<C-U>call gitgutter#hunk#text_object(/;"	m
<Plug>(GitGutterTextObjectOuterPending)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^onoremap <silent> <Plug>(GitGutterTextObjectOuterPending) :<C-U>call gitgutter#hunk#text_object(/;"	m
<Plug>(GitGutterTextObjectOuterVisual)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^xnoremap <silent> <Plug>(GitGutterTextObjectOuterVisual)  :<C-U>call gitgutter#hunk#text_object(/;"	m
<Plug>(GitGutterUndoHunk)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>(GitGutterUndoHunk)    :GitGutterUndoHunk<CR>$/;"	m
<Plug>(fzf-insert)	plugged/fzf/plugin/fzf.vim	/^nnoremap <silent> <Plug>(fzf-insert) i$/;"	m
<Plug>(fzf-normal)	plugged/fzf/plugin/fzf.vim	/^nnoremap <silent> <Plug>(fzf-normal) <Nop>$/;"	m
<Plug>(go-alternate-edit)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-alternate-edit) :<C-u>call go#alternate#Switch(0, "edit")<CR>$/;"	m
<Plug>(go-alternate-split)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-alternate-split) :<C-u>call go#alternate#Switch(0, "split")<CR>$/;"	m
<Plug>(go-alternate-vertical)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-alternate-vertical) :<C-u>call go#alternate#Switch(0, "vsplit")<CR>$/;"	m
<Plug>(go-build)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-build) :<C-u>call go#cmd#Build(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-callees)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-callees) :<C-u>call go#guru#Callees(-1)<CR>$/;"	m
<Plug>(go-callers)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-callers) :<C-u>call go#calls#Callers()<CR>$/;"	m
<Plug>(go-callstack)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-callstack) :<C-u>call go#guru#Callstack(-1)<CR>$/;"	m
<Plug>(go-channelpeers)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-channelpeers) :<C-u>call go#guru#ChannelPeers(-1)<CR>$/;"	m
<Plug>(go-coverage)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-coverage) :<C-u>call go#coverage#Buffer(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-coverage-browser)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-coverage-browser) :<C-u>call go#coverage#Browser(!g:go_jump_to_error/;"	m
<Plug>(go-coverage-clear)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-coverage-clear) :<C-u>call go#coverage#Clear()<CR>$/;"	m
<Plug>(go-coverage-toggle)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-coverage-toggle) :<C-u>call go#coverage#BufferToggle(!g:go_jump_to_e/;"	m
<Plug>(go-debug-breakpoint)	plugged/vim-go/autoload/go/debug.vim	/^  nnoremap <silent> <Plug>(go-debug-breakpoint) :<C-u>call go#debug#Breakpoint()<CR>$/;"	m
<Plug>(go-debug-continue)	plugged/vim-go/autoload/go/debug.vim	/^  nnoremap <silent> <Plug>(go-debug-continue)   :<C-u>call go#debug#Stack('continue')<CR>$/;"	m
<Plug>(go-debug-halt)	plugged/vim-go/autoload/go/debug.vim	/^  nnoremap <silent> <Plug>(go-debug-halt)       :<C-u>call go#debug#Stack('halt')<CR>$/;"	m
<Plug>(go-debug-next)	plugged/vim-go/autoload/go/debug.vim	/^  nnoremap <silent> <Plug>(go-debug-next)       :<C-u>call go#debug#Stack('next')<CR>$/;"	m
<Plug>(go-debug-print)	plugged/vim-go/autoload/go/debug.vim	/^  nnoremap <silent> <Plug>(go-debug-print)      :<C-u>call go#debug#Print(expand('<cword>'))<CR>$/;"	m
<Plug>(go-debug-step)	plugged/vim-go/autoload/go/debug.vim	/^  nnoremap <silent> <Plug>(go-debug-step)       :<C-u>call go#debug#Stack('step')<CR>$/;"	m
<Plug>(go-debug-stepout)	plugged/vim-go/autoload/go/debug.vim	/^  nnoremap <silent> <Plug>(go-debug-stepout)    :<C-u>call go#debug#Stack('stepOut')<CR>$/;"	m
<Plug>(go-debug-stop)	plugged/vim-go/autoload/go/debug.vim	/^  nnoremap <silent> <Plug>(go-debug-stop)       :<C-u>call go#debug#Stop()<CR>$/;"	m
<Plug>(go-decls)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-decls) :<C-u>call go#decls#Decls(0, '')<CR>$/;"	m
<Plug>(go-decls-dir)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-decls-dir) :<C-u>call go#decls#Decls(1, '')<CR>$/;"	m
<Plug>(go-def)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def) :<C-u>call go#def#Jump('', 0)<CR>$/;"	m
<Plug>(go-def-pop)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-pop) :<C-u>call go#def#StackPop()<CR>$/;"	m
<Plug>(go-def-split)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-split) :<C-u>call go#def#Jump("split", 0)<CR>$/;"	m
<Plug>(go-def-stack)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-stack) :<C-u>call go#def#Stack()<CR>$/;"	m
<Plug>(go-def-stack-clear)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-stack-clear) :<C-u>call go#def#StackClear()<CR>$/;"	m
<Plug>(go-def-tab)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-tab) :<C-u>call go#def#Jump("tab", 0)<CR>$/;"	m
<Plug>(go-def-type)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-type) :<C-u>call go#def#Jump('', 1)<CR>$/;"	m
<Plug>(go-def-type-split)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-type-split) :<C-u>call go#def#Jump("split", 1)<CR>$/;"	m
<Plug>(go-def-type-tab)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-type-tab) :<C-u>call go#def#Jump("tab", 1)<CR>$/;"	m
<Plug>(go-def-type-vertical)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-type-vertical) :<C-u>call go#def#Jump("vsplit", 1)<CR>$/;"	m
<Plug>(go-def-vertical)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-vertical) :<C-u>call go#def#Jump("vsplit", 0)<CR>$/;"	m
<Plug>(go-deps)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-deps) :<C-u>call go#tool#Deps()<CR>$/;"	m
<Plug>(go-describe)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-describe) :<C-u>call go#guru#Describe(-1)<CR>$/;"	m
<Plug>(go-diagnostics)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-diagnostics) :<C-u>call go#lint#Diagnostics(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-doc)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-doc) :<C-u>call go#doc#Open("new", "split")<CR>$/;"	m
<Plug>(go-doc-browser)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-doc-browser) :<C-u>call go#doc#OpenBrowser()<CR>$/;"	m
<Plug>(go-doc-split)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-doc-split) :<C-u>call go#doc#Open("new", "split")<CR>$/;"	m
<Plug>(go-doc-tab)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-doc-tab) :<C-u>call go#doc#Open("tabnew", "tabe")<CR>$/;"	m
<Plug>(go-doc-vertical)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-doc-vertical) :<C-u>call go#doc#Open("vnew", "vsplit")<CR>$/;"	m
<Plug>(go-files)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-files) :<C-u>call go#tool#Files()<CR>$/;"	m
<Plug>(go-fmt)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-fmt) :<C-u>call go#fmt#Format(0)<CR>$/;"	m
<Plug>(go-freevars)	plugged/vim-go/ftplugin/go/mappings.vim	/^xnoremap <silent> <Plug>(go-freevars) :<C-u>call go#guru#Freevars(0)<CR>$/;"	m
<Plug>(go-generate)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-generate) :<C-u>call go#cmd#Generate(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-iferr)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-iferr) :<C-u>call go#iferr#Generate()<CR>$/;"	m
<Plug>(go-implements)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-implements) :<C-u>call go#implements#Implements(-1)<CR>$/;"	m
<Plug>(go-import)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-import) :<C-u>call go#import#SwitchImport(1, '', expand('<cword>'), /;"	m
<Plug>(go-imports)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-imports) :<C-u>call go#fmt#Format(1)<CR>$/;"	m
<Plug>(go-info)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-info) :<C-u>call go#tool#Info(1)<CR>$/;"	m
<Plug>(go-install)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-install) :<C-u>call go#cmd#Install(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-lint)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-lint) :<C-u>call go#lint#Golint(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-metalinter)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-metalinter) :<C-u>call go#lint#Gometa(!g:go_jump_to_error, 0)<CR>$/;"	m
<Plug>(go-mod-fmt)	plugged/vim-go/ftplugin/gomod/mappings.vim	/^nnoremap <silent> <Plug>(go-mod-fmt) :<C-u>call go#mod#Format()<CR>$/;"	m
<Plug>(go-pointsto)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-pointsto) :<C-u>call go#guru#PointsTo(-1)<CR>$/;"	m
<Plug>(go-referrers)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-referrers) :<C-u>call go#referrers#Referrers(-1)<CR>$/;"	m
<Plug>(go-rename)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-rename) :<C-u>call go#rename#Rename(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-run)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-run) :<C-u>call go#cmd#Run(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-run-split)	plugged/vim-go/ftplugin/go/mappings.vim	/^  nnoremap <silent> <Plug>(go-run-split) :<C-u>call go#cmd#RunTerm(!g:go_jump_to_error, 'split',/;"	m
<Plug>(go-run-tab)	plugged/vim-go/ftplugin/go/mappings.vim	/^  nnoremap <silent> <Plug>(go-run-tab) :<C-u>call go#cmd#RunTerm(!g:go_jump_to_error, 'tabe', []/;"	m
<Plug>(go-run-vertical)	plugged/vim-go/ftplugin/go/mappings.vim	/^  nnoremap <silent> <Plug>(go-run-vertical) :<C-u>call go#cmd#RunTerm(!g:go_jump_to_error, 'vspl/;"	m
<Plug>(go-sameids)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-sameids) :<C-u>call go#guru#SameIds(1)<CR>$/;"	m
<Plug>(go-sameids-toggle)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-sameids-toggle) :<C-u>call go#guru#ToggleSameIds()<CR>$/;"	m
<Plug>(go-test)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-test) :<C-u>call go#test#Test(!g:go_jump_to_error, 0)<CR>$/;"	m
<Plug>(go-test-compile)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-test-compile) :<C-u>call go#test#Test(!g:go_jump_to_error, 1)<CR>$/;"	m
<Plug>(go-test-func)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-test-func) :<C-u>call go#test#Func(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-vet)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-vet) :<C-u>call go#lint#Vet(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-whicherrs)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-whicherrs) :<C-u>call go#guru#Whicherrs(-1)<CR>$/;"	m
<Plug>GitGutterNextHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>GitGutterNextHunk   &diff ? ']c' : ":\\<C-U>call gitgutter#utilit/;"	m
<Plug>GitGutterPrevHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>GitGutterPrevHunk   &diff ? '[c' : ":\\<C-U>call gitgutter#utilit/;"	m
<Plug>GitGutterPreviewHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterPreviewHunk   :call gitgutter#utility#warn('Please change your /;"	m
<Plug>GitGutterStageHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterStageHunk     :call gitgutter#utility#warn('Please change your /;"	m
<Plug>GitGutterStageHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^xnoremap <silent> <Plug>GitGutterStageHunk     :call gitgutter#utility#warn('Please change your /;"	m
<Plug>GitGutterUndoHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterUndoHunk      :call gitgutter#utility#warn('Please change your /;"	m
<SID>:	plugged/vim-fugitive/autoload/fugitive.vim	/^nnoremap <SID>: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<cr>	autoload/plug.vim	/^    nnoremap <silent> <buffer> <cr> :silent! call <SID>preview_commit()<cr>$/;"	m
<cr>	plugged/vim-go/autoload/go/debug.vim	/^    nmap <buffer> <cr> :<c-u>call <SID>goto_file()<cr>$/;"	m
<cr>	plugged/vim-go/autoload/go/debug.vim	/^    nmap <buffer> <silent> <cr> :<c-u>call <SID>expand_var()<cr>$/;"	m
<cr>	plugged/vim-go/autoload/go/debug.vim	/^    nmap <buffer> <silent> <cr> :<c-u>call go#debug#Goroutine()<cr>$/;"	m
<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)	plugged/fzf/README.md	/^<img src="https:\/\/raw.githubusercontent.com\/junegunn\/i\/master\/fzf.png" height="170" alt="f/;"	c
<leader>c	init.vim	/^nnoremap <leader>c :tabnew % \\| te docker-compose run web bash<cr>$/;"	m
<leader>f	init.vim	/^nnoremap <leader>f :FZF<CR>$/;"	m
<plug>(-fzf-/)	plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-\/) \/$/;"	m
<plug>(-fzf-:)	plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-:) :$/;"	m
<plug>(-fzf-vim-do)	plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-vim-do) :execute g:__fzf_command<cr>$/;"	m
<plug>(fzf-complete-buffer-line)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()$/;"	m
<plug>(fzf-complete-file)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path("find . -path '*\/\\.*' -/;"	m
<plug>(fzf-complete-file)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path('dir \/s\/b\/a:-d')$/;"	m
<plug>(fzf-complete-file-ag)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-file-ag)     fzf#vim#complete#path('ag -l -g ""')$/;"	m
<plug>(fzf-complete-line)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-line)        fzf#vim#complete#line()$/;"	m
<plug>(fzf-complete-path)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path("find . -path '*\/\\.*' -/;"	m
<plug>(fzf-complete-path)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path('dir \/s\/b')$/;"	m
<plug>(fzf-complete-word)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-word)        fzf#vim#complete#word()$/;"	m
<plug>(fzf-maps-i)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <silent> <plug>(fzf-maps-i) <c-o>:call fzf#vim#maps('i', 0)<cr>$/;"	m
<plug>(fzf-maps-n)	plugged/fzf.vim/plugin/fzf.vim	/^nnoremap <silent> <plug>(fzf-maps-n) :<c-u>call fzf#vim#maps('n', 0)<cr>$/;"	m
<plug>(fzf-maps-o)	plugged/fzf.vim/plugin/fzf.vim	/^onoremap <silent> <plug>(fzf-maps-o) <c-c>:<c-u>call fzf#vim#maps('o', 0)<cr>$/;"	m
<plug>(fzf-maps-x)	plugged/fzf.vim/plugin/fzf.vim	/^xnoremap <silent> <plug>(fzf-maps-x) :<c-u>call fzf#vim#maps('x', 0)<cr>$/;"	m
API	plugged/nord-vim/CHANGELOG.md	/^### API$/;"	S	section:0.16.0""Features
AUTHOR	plugged/fzf/man/man1/fzf.1	/^.SH AUTHOR$/;"	s	title:fzf
Add	plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Add(chunk *Chunk, key string, list []Result) {$/;"	f	struct:fzf.ChunkCache
Added `--ansi` option (#150)	plugged/fzf/CHANGELOG.md	/^#### Added `--ansi` option (#150)$/;"	t	subsection:CHANGELOG""0.9.5""New features
Added `--expect` option (#163)	plugged/fzf/CHANGELOG.md	/^#### Added `--expect` option (#163)$/;"	t	subsection:CHANGELOG""0.9.6""New features
Added `--tac` option to reverse the order of the input.	plugged/fzf/CHANGELOG.md	/^#### Added `--tac` option to reverse the order of the input.$/;"	t	subsection:CHANGELOG""0.9.4""New features
Advanced customization	plugged/fzf.vim/README.md	/^### Advanced customization$/;"	S	section:fzf :heart: vim""Customization
Advanced fzf examples	plugged/fzf/ADVANCED.md	/^Advanced fzf examples$/;"	c
Advanced topics	plugged/fzf/README.md	/^Advanced topics$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Algo	plugged/fzf/src/algo/algo.go	/^type Algo func(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []ru/;"	t	package:algo	typeref:typename:func(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int)
Align	plugged/vim-gitgutter/test/runner.vim	/^function Align(left, right)$/;"	f
AlsoMissingDoc	plugged/vim-go/autoload/go/test-fixtures/lint/src/lint/quux.go	/^func AlsoMissingDoc() {$/;"	f	package:lint
Alt	plugged/fzf/src/tui/tui.go	/^	Alt$/;"	c	package:tui
AltBS	plugged/fzf/src/tui/tui.go	/^	AltBS$/;"	c	package:tui
AltDown	plugged/fzf/src/tui/tui.go	/^	AltDown$/;"	c	package:tui
AltKey	plugged/fzf/src/tui/tui.go	/^func AltKey(r rune) Event {$/;"	f	package:tui	typeref:typename:Event
AltLeft	plugged/fzf/src/tui/tui.go	/^	AltLeft$/;"	c	package:tui
AltRight	plugged/fzf/src/tui/tui.go	/^	AltRight$/;"	c	package:tui
AltSDown	plugged/fzf/src/tui/tui.go	/^	AltSDown$/;"	c	package:tui
AltSLeft	plugged/fzf/src/tui/tui.go	/^	AltSLeft$/;"	c	package:tui
AltSRight	plugged/fzf/src/tui/tui.go	/^	AltSRight$/;"	c	package:tui
AltSUp	plugged/fzf/src/tui/tui.go	/^	AltSUp$/;"	c	package:tui
AltUp	plugged/fzf/src/tui/tui.go	/^	AltUp$/;"	c	package:tui
Ansi	plugged/fzf/src/options.go	/^	Ansi        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Answer	plugged/vim-gitgutter/test/test_gitgutter.vim	/^  func Answer(char)$/;"	f
Appearance	plugged/vim-two-firewatch/README.md	/^## Appearance$/;"	s	chapter:Vim-Two-Firewatch Colorscheme
As Vim plugin	plugged/fzf/README.md	/^### As Vim plugin$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
AsEvent	plugged/fzf/src/tui/tui.go	/^func (t EventType) AsEvent() Event {$/;"	f	type:tui.EventType	typeref:typename:Event
AsString	plugged/fzf/src/item.go	/^func (item *Item) AsString(stripAnsi bool) string {$/;"	f	struct:fzf.Item	typeref:typename:string
AsString	plugged/fzf/src/pattern.go	/^func (p *Pattern) AsString() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
AsUint16	plugged/fzf/src/util/util.go	/^func AsUint16(val int) uint16 {$/;"	f	package:util	typeref:typename:uint16
AsmFmt	plugged/vim-go/ftplugin/asm.vim	/^command! -nargs=0 AsmFmt call go#asmfmt#Format()$/;"	c
AtomicBool	plugged/fzf/src/util/atomicbool.go	/^type AtomicBool struct {$/;"	s	package:util
Attr	plugged/fzf/src/tui/dummy.go	/^type Attr int32$/;"	t	package:tui	typeref:typename:int32
Attr	plugged/fzf/src/tui/tcell.go	/^type Attr tcell.Style$/;"	t	package:tui	typeref:typename:tcell.Style
Attr	plugged/fzf/src/tui/tui.go	/^	Attr  Attr$/;"	m	struct:tui.ColorAttr	typeref:typename:Attr
Attr	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Attr() Attr {$/;"	f	struct:tui.ColorPair	typeref:typename:Attr
AttrClear	plugged/fzf/src/tui/dummy.go	/^	AttrClear     = Attr(1 << 8)$/;"	c	package:tui
AttrClear	plugged/fzf/src/tui/tcell.go	/^	AttrClear     = Attr(1 << 8)$/;"	c	package:tui
AttrRegular	plugged/fzf/src/tui/dummy.go	/^	AttrRegular   = Attr(1 << 7)$/;"	c	package:tui
AttrRegular	plugged/fzf/src/tui/tcell.go	/^	AttrRegular   = Attr(1 << 7)$/;"	c	package:tui
AttrUndefined	plugged/fzf/src/tui/dummy.go	/^	AttrUndefined = Attr(0)$/;"	c	package:tui
AttrUndefined	plugged/fzf/src/tui/tcell.go	/^	AttrUndefined = Attr(0)$/;"	c	package:tui
BASE	plugged/fzf/test/test_go.rb	/^BASE = File.expand_path('..', __dir__)$/;"	C
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARY32)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARY64)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARYARM5)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARYARM6)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARYARM7)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARYARM8)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARYPPC64LE)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARYRISCV64)$/;"	m
BINARY32	plugged/fzf/Makefile	/^BINARY32       := fzf-$(GOOS)_386$/;"	m
BINARY64	plugged/fzf/Makefile	/^BINARY64       := fzf-$(GOOS)_amd64$/;"	m
BINARYARM5	plugged/fzf/Makefile	/^BINARYARM5     := fzf-$(GOOS)_arm5$/;"	m
BINARYARM6	plugged/fzf/Makefile	/^BINARYARM6     := fzf-$(GOOS)_arm6$/;"	m
BINARYARM7	plugged/fzf/Makefile	/^BINARYARM7     := fzf-$(GOOS)_arm7$/;"	m
BINARYARM8	plugged/fzf/Makefile	/^BINARYARM8     := fzf-$(GOOS)_arm8$/;"	m
BINARYPPC64LE	plugged/fzf/Makefile	/^BINARYPPC64LE  := fzf-$(GOOS)_ppc64le$/;"	m
BINARYRISCV64	plugged/fzf/Makefile	/^BINARYRISCV64  := fzf-$(GOOS)_riscv64$/;"	m
BSpace	plugged/fzf/src/tui/tui.go	/^	BSpace$/;"	c	package:tui
BTab	plugged/fzf/src/tui/tui.go	/^	BTab$/;"	c	package:tui
BUILD_FLAGS	plugged/fzf/Makefile	/^BUILD_FLAGS    := -a -ldflags "-s -w -X main.version=$(VERSION) -X main.revision=$(REVISION)" -t/;"	m
BUILD_INVERTED_INDEX	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set BUILD_INVERTED_INDEX=1$/;"	v
BUILD_INVERTED_INDEX	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set BUILD_INVERTED_INDEX=0$/;"	v
BackwardEOF	plugged/fzf/src/tui/tui.go	/^	BackwardEOF$/;"	c	package:tui
Bar	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden.go	/^	Bar           struct {$/;"	m	struct:main.Server	typeref:typename:struct { Four string `json:"four"`; Five string `json:"five"`; }
Bar	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden_options.go	/^	Bar           struct {$/;"	m	struct:main.Server	typeref:typename:struct { Four string `json:"four,omitempty"`; Five string `json:"five,omitempty"`; }
Bar	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_input.go	/^	Bar           struct {$/;"	m	struct:main.Server	typeref:typename:struct { Four string; Five string; }
Bar	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_golden.go	/^	Bar           struct {$/;"	m	struct:main.Server	typeref:typename:struct { Four string ; Five string ; }
Bar	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_input.go	/^	Bar           struct {$/;"	m	struct:main.Server	typeref:typename:struct { Four string `json:"four"`; Five string `json:"five"`; }
Before submitting	plugged/fzf.vim/.github/ISSUE_TEMPLATE.md	/^Before submitting$/;"	c
BenchmarkExtractColor	plugged/fzf/src/ansi_test.go	/^func BenchmarkExtractColor(b *testing.B) {$/;"	f	package:fzf
BenchmarkNextAnsiEscapeSequence	plugged/fzf/src/ansi_test.go	/^func BenchmarkNextAnsiEscapeSequence(b *testing.B) {$/;"	f	package:fzf
BenchmarkNextAnsiEscapeSequence_Regex	plugged/fzf/src/ansi_test.go	/^func BenchmarkNextAnsiEscapeSequence_Regex(b *testing.B) {$/;"	f	package:fzf
Bg	plugged/fzf/src/tui/tui.go	/^	Bg           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Bg	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Bg() Color {$/;"	f	struct:tui.ColorPair	typeref:typename:Color
Black	plugged/fzf/src/options.go	/^	Black       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Blink	plugged/fzf/src/tui/dummy.go	/^	Blink     = Attr(1 << 4)$/;"	c	package:tui
Blink	plugged/fzf/src/tui/tcell.go	/^	Blink          = Attr(tcell.AttrBlink)$/;"	c	package:tui
Blink2	plugged/fzf/src/tui/dummy.go	/^	Blink2    = Attr(1 << 5)$/;"	c	package:tui
Bold	plugged/fzf/src/options.go	/^	Bold        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Bold	plugged/fzf/src/tui/dummy.go	/^	Bold      = Attr(1)$/;"	c	package:tui
Bold	plugged/fzf/src/tui/tcell.go	/^	Bold      Attr = Attr(tcell.AttrBold)$/;"	c	package:tui	typeref:type:Attr
Border	plugged/fzf/src/tui/tui.go	/^	Border       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
BorderBottom	plugged/fzf/src/tui/tui.go	/^	BorderBottom$/;"	c	package:tui
BorderCharacter	plugged/fzf/src/tui/tui.go	/^type BorderCharacter int$/;"	t	package:tui	typeref:typename:int
BorderHorizontal	plugged/fzf/src/tui/tui.go	/^	BorderHorizontal$/;"	c	package:tui
BorderLeft	plugged/fzf/src/tui/tui.go	/^	BorderLeft$/;"	c	package:tui
BorderNone	plugged/fzf/src/tui/tui.go	/^	BorderNone BorderShape = iota$/;"	c	package:tui	typeref:type:BorderShape
BorderRight	plugged/fzf/src/tui/tui.go	/^	BorderRight$/;"	c	package:tui
BorderRounded	plugged/fzf/src/tui/tui.go	/^	BorderRounded$/;"	c	package:tui
BorderShape	plugged/fzf/src/options.go	/^	BorderShape tui.BorderShape$/;"	m	struct:fzf.Options	typeref:typename:tui.BorderShape
BorderShape	plugged/fzf/src/tui/tui.go	/^type BorderShape int$/;"	t	package:tui	typeref:typename:int
BorderSharp	plugged/fzf/src/tui/tui.go	/^	BorderSharp$/;"	c	package:tui
BorderStyle	plugged/fzf/src/tui/tui.go	/^type BorderStyle struct {$/;"	s	package:tui
BorderTop	plugged/fzf/src/tui/tui.go	/^	BorderTop$/;"	c	package:tui
BorderVertical	plugged/fzf/src/tui/tui.go	/^	BorderVertical$/;"	c	package:tui
Branches	plugged/fzf/ADVANCED.md	/^### Branches$/;"	S	section:Advanced fzf examples""Key bindings for git objects
Bug Fixes	plugged/nord-vim/CHANGELOG.md	/^## Bug Fixes$/;"	s	chapter:0.1.1
Bug Fixes	plugged/nord-vim/CHANGELOG.md	/^## Bug Fixes$/;"	s	chapter:0.1.2
Bug Fixes	plugged/nord-vim/CHANGELOG.md	/^## Bug Fixes$/;"	s	chapter:0.13.0
Bug Fixes	plugged/nord-vim/CHANGELOG.md	/^## Bug Fixes$/;"	s	chapter:0.16.0
Bug Fixes	plugged/nord-vim/CHANGELOG.md	/^## Bug Fixes$/;"	s	chapter:0.3.0
Bug Fixes	plugged/nord-vim/CHANGELOG.md	/^## Bug Fixes$/;"	s	chapter:0.5.0
Bug Fixes	plugged/nord-vim/CHANGELOG.md	/^## Bug Fixes$/;"	s	chapter:0.6.0
Bug Fixes	plugged/nord-vim/CHANGELOG.md	/^## Bug Fixes$/;"	s	chapter:0.7.0
Bug Fixes	plugged/nord-vim/CHANGELOG.md	/^## Bug Fixes$/;"	s	chapter:0.8.0
Bug Fixes	plugged/nord-vim/CHANGELOG.md	/^## Bug Fixes$/;"	s	chapter:0.9.0
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.11
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.12
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.13
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.5
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.6
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.7
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.8
Build instructions	plugged/fzf/BUILD.md	/^Build instructions$/;"	s	chapter:Building fzf
BuildPattern	plugged/fzf/src/pattern.go	/^func BuildPattern(fuzzy bool, fuzzyAlgo algo.Algo, extended bool, caseMode Case, normalize bool,/;"	f	package:fzf	typeref:typename:*Pattern
Building fzf	plugged/fzf/BUILD.md	/^Building fzf$/;"	c
Building fzf	plugged/fzf/README.md	/^Building fzf$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
ByOrder	plugged/fzf/src/result.go	/^type ByOrder []Offset$/;"	t	package:fzf	typeref:typename:[]Offset
ByRelevance	plugged/fzf/src/result.go	/^type ByRelevance []Result$/;"	t	package:fzf	typeref:typename:[]Result
ByRelevanceTac	plugged/fzf/src/result.go	/^type ByRelevanceTac []Result$/;"	t	package:fzf	typeref:typename:[]Result
Byte	plugged/fzf/src/tui/tui.go	/^func (t EventType) Byte() byte {$/;"	f	type:tui.EventType	typeref:typename:byte
Bytes	plugged/fzf/src/util/chars.go	/^func (chars *Chars) Bytes() []byte {$/;"	f	struct:util.Chars	typeref:typename:[]byte
CFill	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) CFill(fg Color, bg Color, attr Attr, text string) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
CFill	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CFill(fg Color, bg Color, a Attr, str string) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
CFill	plugged/fzf/src/tui/tui.go	/^	CFill(fg Color, bg Color, attr Attr, text string) FillReturn$/;"	n	interface:tui.Window	typeref:typename:FillReturn
CHANGELOG	plugged/fzf/CHANGELOG.md	/^CHANGELOG$/;"	c
COMPREPLY=	plugged/fzf/shell/completion.bash	/^    COMPREPLY=()$/;"	f
COMPREPLY=	plugged/fzf/shell/completion.bash	/^  COMPREPLY=()$/;"	f
CPrint	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) CPrint(pair ColorPair, text string) {$/;"	f	struct:tui.LightWindow
CPrint	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CPrint(pair ColorPair, text string) {$/;"	f	struct:tui.TcellWindow
CPrint	plugged/fzf/src/tui/tui.go	/^	CPrint(color ColorPair, text string)$/;"	n	interface:tui.Window
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -q$/;"	v
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=$/;"	v
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=%CSCOPE_ARGS% -i %DB_FILE%.files$/;"	v
CSCOPE_EXE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
CSCOPE_EXE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% -L %TAGS_FILE%.files$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% %~2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
CTAGS_EXE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_EXE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
CacheKey	plugged/fzf/src/pattern.go	/^func (p *Pattern) CacheKey() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
Case	plugged/fzf/src/options.go	/^	Case        Case$/;"	m	struct:fzf.Options	typeref:typename:Case
Case	plugged/fzf/src/options.go	/^type Case int$/;"	t	package:fzf	typeref:typename:int
CaseIgnore	plugged/fzf/src/options.go	/^	CaseIgnore$/;"	c	package:fzf
CaseRespect	plugged/fzf/src/options.go	/^	CaseRespect$/;"	c	package:fzf
CaseSmart	plugged/fzf/src/options.go	/^	CaseSmart Case = iota$/;"	c	package:fzf	typeref:type:Case
Change	plugged/fzf/src/tui/tui.go	/^	Change$/;"	c	package:tui
Changed behavior on `--no-sort`	plugged/fzf/CHANGELOG.md	/^#### Changed behavior on `--no-sort`$/;"	t	subsection:CHANGELOG""0.9.4""*Backward incompatible changes*
Char	plugged/fzf/src/tui/tui.go	/^	Char       rune$/;"	m	struct:tui.Event	typeref:typename:rune
Chars	plugged/fzf/src/util/chars.go	/^type Chars struct {$/;"	s	package:util
Chunk	plugged/fzf/src/chunklist.go	/^type Chunk struct {$/;"	s	package:fzf
ChunkCache	plugged/fzf/src/cache.go	/^type ChunkCache struct {$/;"	s	package:fzf
ChunkList	plugged/fzf/src/chunklist.go	/^type ChunkList struct {$/;"	s	package:fzf
CleanUp	plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^CleanUp() {$/;"	f
Clear	plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) Clear() {$/;"	f	struct:fzf.ChunkList
Clear	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Clear()            {}$/;"	f	unknown:tui.FullscreenRenderer
Clear	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Clear() {$/;"	f	struct:tui.LightRenderer
Clear	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Clear() {$/;"	f	unknown:tui.FullscreenRenderer
Clear	plugged/fzf/src/tui/tui.go	/^	Clear()$/;"	n	interface:tui.Renderer
Clear	plugged/fzf/src/util/eventbox.go	/^func (events *Events) Clear() {$/;"	f	type:util.Events
ClearOnExit	plugged/fzf/src/options.go	/^	ClearOnExit bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Close	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Close()            {}$/;"	f	unknown:tui.FullscreenRenderer
Close	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Close() {$/;"	f	struct:tui.LightRenderer
Close	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Close() {$/;"	f	struct:tui.LightWindow
Close	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Close() {$/;"	f	unknown:tui.FullscreenRenderer
Close	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Close() {$/;"	f	struct:tui.TcellWindow
Close	plugged/fzf/src/tui/tui.go	/^	Close()$/;"	n	interface:tui.Renderer
Close	plugged/fzf/src/tui/tui.go	/^	Close()$/;"	n	interface:tui.Window
ColBorder	plugged/fzf/src/tui/tui.go	/^	ColBorder               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrent	plugged/fzf/src/tui/tui.go	/^	ColCurrent              ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentCursor	plugged/fzf/src/tui/tui.go	/^	ColCurrentCursor        ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentCursorEmpty	plugged/fzf/src/tui/tui.go	/^	ColCurrentCursorEmpty   ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentMatch	plugged/fzf/src/tui/tui.go	/^	ColCurrentMatch         ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentSelected	plugged/fzf/src/tui/tui.go	/^	ColCurrentSelected      ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentSelectedEmpty	plugged/fzf/src/tui/tui.go	/^	ColCurrentSelectedEmpty ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCursor	plugged/fzf/src/tui/tui.go	/^	ColCursor               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCursorEmpty	plugged/fzf/src/tui/tui.go	/^	ColCursorEmpty          ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColDisabled	plugged/fzf/src/tui/tui.go	/^	ColDisabled             ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColHeader	plugged/fzf/src/tui/tui.go	/^	ColHeader               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColInfo	plugged/fzf/src/tui/tui.go	/^	ColInfo                 ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColInput	plugged/fzf/src/tui/tui.go	/^	ColInput                ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColMatch	plugged/fzf/src/tui/tui.go	/^	ColMatch                ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColNormal	plugged/fzf/src/tui/tui.go	/^	ColNormal               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPreview	plugged/fzf/src/tui/tui.go	/^	ColPreview              ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPreviewBorder	plugged/fzf/src/tui/tui.go	/^	ColPreviewBorder        ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPrompt	plugged/fzf/src/tui/tui.go	/^	ColPrompt               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColSelected	plugged/fzf/src/tui/tui.go	/^	ColSelected             ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColSpinner	plugged/fzf/src/tui/tui.go	/^	ColSpinner              ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
Color	plugged/fzf/src/tui/tui.go	/^	Color Color$/;"	m	struct:tui.ColorAttr	typeref:typename:Color
Color	plugged/fzf/src/tui/tui.go	/^type Color int32$/;"	t	package:tui	typeref:typename:int32
Color themes	plugged/fzf/ADVANCED.md	/^Color themes$/;"	s	chapter:Advanced fzf examples
ColorAttr	plugged/fzf/src/tui/tui.go	/^type ColorAttr struct {$/;"	s	package:tui
ColorPair	plugged/fzf/src/tui/tui.go	/^type ColorPair struct {$/;"	s	package:tui
ColorTheme	plugged/fzf/src/tui/tui.go	/^type ColorTheme struct {$/;"	s	package:tui
Colored	plugged/fzf/src/tui/tui.go	/^	Colored      bool$/;"	m	struct:tui.ColorTheme	typeref:typename:bool
Colors	plugged/fzf/src/item.go	/^func (item *Item) Colors() []ansiOffset {$/;"	f	struct:fzf.Item	typeref:typename:[]ansiOffset
Command-local options	plugged/fzf.vim/README.md	/^### Command-local options$/;"	S	section:fzf :heart: vim""Customization
Commands	plugged/fzf.vim/README.md	/^Commands$/;"	s	chapter:fzf :heart: vim
Commit hashes	plugged/fzf/ADVANCED.md	/^### Commit hashes$/;"	S	section:Advanced fzf examples""Key bindings for git objects
Comparable	plugged/fzf/src/tui/tui.go	/^func (e Event) Comparable() Event {$/;"	f	unknown:tui.Event	typeref:typename:Event
CompilerSet	plugged/vim-go/compiler/go.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
Completion functions	plugged/fzf.vim/README.md	/^Completion functions$/;"	s	chapter:fzf :heart: vim
CompletionTest	plugged/fzf/test/test_go.rb	/^module CompletionTest$/;"	m
Configuration	plugged/fzf/README-VIM.md	/^### Configuration$/;"	S	section:FZF Vim integration""`:FZF[!]`
Configuration (**MUST** fill this out):	plugged/vim-go/.github/ISSUE_TEMPLATE.md	/^### Configuration (**MUST** fill this out):$/;"	S
Configuration Docs	plugged/nord-vim/CHANGELOG.md	/^###### Configuration Docs$/;"	u	section:0.12.0""Features
Configurations	plugged/nord-vim/CHANGELOG.md	/^### Configurations$/;"	S	section:0.4.0""Features
Constrain	plugged/fzf/src/util/util.go	/^func Constrain(val int, min int, max int) int {$/;"	f	package:util	typeref:typename:int
Constrain32	plugged/fzf/src/util/util.go	/^func Constrain32(val int32, min int32, max int32) int32 {$/;"	f	package:util	typeref:typename:int32
Contribute	README.md	/^## Contribute$/;"	s	chapter:neovimfiles
Contributing	plugged/nord-vim/README.md	/^## Contributing$/;"	s
Contributing	plugged/vim-go/README.md	/^## Contributing$/;"	s	chapter:vim-go [![GitHub Actions Status](https://github.com/fatih/vim-go/workflows/test/badge.svg)](https://github.com/fatih/vim-go/actions)
Contributing	plugged/vim-gutentags/CONTRIBUTING.md	/^# Contributing$/;"	c
Contributors	plugged/vim-two-firewatch/README.md	/^# Contributors$/;"	c
CopyRunes	plugged/fzf/src/util/chars.go	/^func (chars *Chars) CopyRunes(dest []rune) {$/;"	f	struct:util.Chars
CountItems	plugged/fzf/src/chunklist.go	/^func CountItems(cs []*Chunk) int {$/;"	f	package:fzf	typeref:typename:int
Criteria	plugged/fzf/src/options.go	/^	Criteria    []criterion$/;"	m	struct:fzf.Options	typeref:typename:[]criterion
CtrlA	plugged/fzf/src/tui/tui.go	/^	CtrlA$/;"	c	package:tui
CtrlAlt	plugged/fzf/src/tui/tui.go	/^	CtrlAlt$/;"	c	package:tui
CtrlAltKey	plugged/fzf/src/tui/tui.go	/^func CtrlAltKey(r rune) Event {$/;"	f	package:tui	typeref:typename:Event
CtrlB	plugged/fzf/src/tui/tui.go	/^	CtrlB$/;"	c	package:tui
CtrlBackSlash	plugged/fzf/src/tui/tui.go	/^	CtrlBackSlash$/;"	c	package:tui
CtrlC	plugged/fzf/src/tui/tui.go	/^	CtrlC$/;"	c	package:tui
CtrlCaret	plugged/fzf/src/tui/tui.go	/^	CtrlCaret$/;"	c	package:tui
CtrlD	plugged/fzf/src/tui/tui.go	/^	CtrlD$/;"	c	package:tui
CtrlE	plugged/fzf/src/tui/tui.go	/^	CtrlE$/;"	c	package:tui
CtrlF	plugged/fzf/src/tui/tui.go	/^	CtrlF$/;"	c	package:tui
CtrlG	plugged/fzf/src/tui/tui.go	/^	CtrlG$/;"	c	package:tui
CtrlH	plugged/fzf/src/tui/tui.go	/^	CtrlH$/;"	c	package:tui
CtrlJ	plugged/fzf/src/tui/tui.go	/^	CtrlJ$/;"	c	package:tui
CtrlK	plugged/fzf/src/tui/tui.go	/^	CtrlK$/;"	c	package:tui
CtrlL	plugged/fzf/src/tui/tui.go	/^	CtrlL$/;"	c	package:tui
CtrlM	plugged/fzf/src/tui/tui.go	/^	CtrlM$/;"	c	package:tui
CtrlN	plugged/fzf/src/tui/tui.go	/^	CtrlN$/;"	c	package:tui
CtrlO	plugged/fzf/src/tui/tui.go	/^	CtrlO$/;"	c	package:tui
CtrlP	plugged/fzf/src/tui/tui.go	/^	CtrlP$/;"	c	package:tui
CtrlQ	plugged/fzf/src/tui/tui.go	/^	CtrlQ$/;"	c	package:tui
CtrlR	plugged/fzf/src/tui/tui.go	/^	CtrlR$/;"	c	package:tui
CtrlRightBracket	plugged/fzf/src/tui/tui.go	/^	CtrlRightBracket$/;"	c	package:tui
CtrlS	plugged/fzf/src/tui/tui.go	/^	CtrlS$/;"	c	package:tui
CtrlSlash	plugged/fzf/src/tui/tui.go	/^	CtrlSlash$/;"	c	package:tui
CtrlSpace	plugged/fzf/src/tui/tui.go	/^	CtrlSpace$/;"	c	package:tui
CtrlT	plugged/fzf/src/tui/tui.go	/^	CtrlT$/;"	c	package:tui
CtrlU	plugged/fzf/src/tui/tui.go	/^	CtrlU$/;"	c	package:tui
CtrlV	plugged/fzf/src/tui/tui.go	/^	CtrlV$/;"	c	package:tui
CtrlW	plugged/fzf/src/tui/tui.go	/^	CtrlW$/;"	c	package:tui
CtrlX	plugged/fzf/src/tui/tui.go	/^	CtrlX$/;"	c	package:tui
CtrlY	plugged/fzf/src/tui/tui.go	/^	CtrlY$/;"	c	package:tui
CtrlZ	plugged/fzf/src/tui/tui.go	/^	CtrlZ$/;"	c	package:tui
Current	plugged/fzf/src/tui/tui.go	/^	Current      ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
CurrentMatch	plugged/fzf/src/tui/tui.go	/^	CurrentMatch ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Cursor	plugged/fzf/src/tui/tui.go	/^	Cursor       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Custom completion	plugged/fzf.vim/README.md	/^Custom completion$/;"	s	chapter:fzf :heart: vim
Custom fuzzy completion	plugged/fzf/README.md	/^#### Custom fuzzy completion$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Custom statusline	plugged/fzf.vim/README.md	/^### Custom statusline$/;"	S	section:fzf :heart: vim""Status line of terminal buffer
Customization	plugged/fzf.vim/README.md	/^Customization$/;"	s	chapter:fzf :heart: vim
Customization Docs	plugged/nord-vim/CHANGELOG.md	/^###### Customization Docs$/;"	u	section:0.12.0""Features
Cycle	plugged/fzf/src/options.go	/^	Cycle       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
D	autoload/plug.vim	/^  nnoremap <silent> <buffer> D  :PlugDiff<cr>$/;"	m
DB_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
DB_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
DEBUG	plugged/fzf/src/algo/algo.go	/^var DEBUG bool$/;"	v	package:algo	typeref:typename:bool
DECLS_SYNTAX_HIGHLIGHT	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^DECLS_SYNTAX_HIGHLIGHT = [$/;"	v
DEFAULT_TIMEOUT	plugged/fzf/test/test_go.rb	/^DEFAULT_TIMEOUT = 10$/;"	C
DESCRIPTION	plugged/fzf/man/man1/fzf-tmux.1	/^.SH DESCRIPTION$/;"	s	title:fzf-tmux
DESCRIPTION	plugged/fzf/man/man1/fzf.1	/^.SH DESCRIPTION$/;"	s	title:fzf
Dark256	plugged/fzf/src/tui/tui.go	/^	Dark256   *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
DarkBg	plugged/fzf/src/tui/tui.go	/^	DarkBg       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Debug	plugged/vim-go/autoload/go/test-fixtures/fmt/src/imports/vendor/gh.com/gi/foo-logging/logger.go	/^func (l *TestLogger) Debug(msg string) {$/;"	f	struct:logging.TestLogger
Default16	plugged/fzf/src/tui/tui.go	/^	Default16 *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
Del	plugged/fzf/src/tui/tui.go	/^	Del$/;"	c	package:tui
Delimiter	plugged/fzf/src/options.go	/^	Delimiter   Delimiter$/;"	m	struct:fzf.Options	typeref:typename:Delimiter
Delimiter	plugged/fzf/src/tokenizer.go	/^type Delimiter struct {$/;"	s	package:fzf
Demo	plugged/fzf/README.md	/^#### Demo$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Dependencies	plugged/fzf.vim/README.md	/^### Dependencies$/;"	S	section:fzf :heart: vim""Installation
Dim	plugged/fzf/src/tui/dummy.go	/^	Dim       = Attr(1 << 1)$/;"	c	package:tui
Dim	plugged/fzf/src/tui/tcell.go	/^	Dim            = Attr(tcell.AttrDim)$/;"	c	package:tui
Disabled	plugged/fzf/src/tui/tui.go	/^	Disabled     ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Documentation	plugged/nord-vim/CHANGELOG.md	/^### Documentation$/;"	S	section:0.13.0""Bug Fixes
Documentation	plugged/nord-vim/CHANGELOG.md	/^### Documentation$/;"	S	section:0.3.0""Bug Fixes
Documentation	plugged/nord-vim/CHANGELOG.md	/^### Documentation$/;"	S	section:0.4.0""Improvements
Documentation	plugged/nord-vim/CHANGELOG.md	/^### Documentation$/;"	S	section:0.5.0""Bug Fixes
Documentation	plugged/nord-vim/CHANGELOG.md	/^### Documentation$/;"	S	section:0.7.0""Tasks
Documentation	plugged/nord-vim/CHANGELOG.md	/^### Documentation$/;"	S	section:0.8.0""Improvements
DoneParseArgs	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:DoneParseArgs$/;"	l
Double	plugged/fzf/src/tui/tui.go	/^	Double bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
DoubleClick	plugged/fzf/src/tui/tui.go	/^	DoubleClick$/;"	c	package:tui
Down	plugged/fzf/src/tui/tui.go	/^	Down   bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Down	plugged/fzf/src/tui/tui.go	/^	Down$/;"	c	package:tui
DurWithin	plugged/fzf/src/util/util.go	/^func DurWithin($/;"	f	package:util	typeref:typename:time.Duration
Dynamic reloading of the list	plugged/fzf/ADVANCED.md	/^Dynamic reloading of the list$/;"	s	chapter:Advanced fzf examples
ENVIRONMENT	plugged/fzf/man/man1/fzf.1	/^.SH ENVIRONMENT VARIABLES$/;"	s	title:fzf
EOF	plugged/fzf/install	/^  cat << EOF$/;"	h
EOF	plugged/fzf/install	/^  cat > "$src" << EOF$/;"	h
EOF	plugged/fzf/install	/^  fish << EOF$/;"	h
EOF	plugged/fzf/uninstall	/^  cat << EOF$/;"	h
ESC	plugged/fzf/src/tui/tui.go	/^	ESC$/;"	c	package:tui
EXIT	plugged/fzf/man/man1/fzf.1	/^.SH EXIT STATUS$/;"	s	title:fzf
EXTENDED	plugged/fzf/man/man1/fzf.1	/^.SH EXTENDED SEARCH MODE$/;"	s	title:fzf
Empty	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden.go	/^	Empty         string   `json:"empty"`$/;"	m	struct:main.Server	typeref:typename:string
Empty	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden_options.go	/^	Empty         string   `json:"empty,omitempty"`$/;"	m	struct:main.Server	typeref:typename:string
Empty	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_input.go	/^	Empty         string$/;"	m	struct:main.Server	typeref:typename:string
Empty	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_golden.go	/^	Empty         string   $/;"	m	struct:main.Server	typeref:typename:string
Empty	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_input.go	/^	Empty         string   `json:"empty"`$/;"	m	struct:main.Server	typeref:typename:string
EmptyMerger	plugged/fzf/src/merger.go	/^var EmptyMerger = NewMerger(nil, [][]Result{}, false, false)$/;"	v	package:fzf
EmptyTheme	plugged/fzf/src/tui/tui.go	/^func EmptyTheme() *ColorTheme {$/;"	f	package:tui	typeref:typename:*ColorTheme
Enclose	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Enclose(y int, x int) bool {$/;"	f	struct:tui.LightWindow	typeref:typename:bool
Enclose	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Enclose(y int, x int) bool {$/;"	f	struct:tui.TcellWindow	typeref:typename:bool
Enclose	plugged/fzf/src/tui/tui.go	/^	Enclose(y int, x int) bool$/;"	n	interface:tui.Window	typeref:typename:bool
End	plugged/fzf/src/algo/algo.go	/^	End   int$/;"	m	struct:algo.Result	typeref:typename:int
End	plugged/fzf/src/tui/tui.go	/^	End$/;"	c	package:tui
Environment variables	plugged/fzf/README.md	/^#### Environment variables$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Environment variables / Aliases	plugged/fzf/README.md	/^#### Environment variables \/ Aliases$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
EqualMatch	plugged/fzf/src/algo/algo.go	/^func EqualMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []ru/;"	f	package:algo	typeref:typename:(Result, *[]int)
Erase	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Erase() {$/;"	f	struct:tui.LightWindow
Erase	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Erase() {$/;"	f	struct:tui.TcellWindow
Erase	plugged/fzf/src/tui/tui.go	/^	Erase()$/;"	n	interface:tui.Window
Event	plugged/fzf/src/tui/tui.go	/^type Event struct {$/;"	s	package:tui
EventBox	plugged/fzf/src/util/eventbox.go	/^type EventBox struct {$/;"	s	package:util
EventType	plugged/fzf/src/tui/tui.go	/^type EventType int$/;"	t	package:tui	typeref:typename:int
EventType	plugged/fzf/src/util/eventbox.go	/^type EventType int$/;"	t	package:util	typeref:typename:int
Events	plugged/fzf/src/util/eventbox.go	/^type Events map[EventType]interface{}$/;"	t	package:util	typeref:typename:map[EventType]interface{}
EvtClose	plugged/fzf/src/util/eventbox_test.go	/^	EvtClose$/;"	c	package:util
EvtHeader	plugged/fzf/src/constants.go	/^	EvtHeader$/;"	c	package:fzf
EvtQuit	plugged/fzf/src/constants.go	/^	EvtQuit$/;"	c	package:fzf
EvtReadFin	plugged/fzf/src/constants.go	/^	EvtReadFin$/;"	c	package:fzf
EvtReadFin	plugged/fzf/src/util/eventbox_test.go	/^	EvtReadFin$/;"	c	package:util
EvtReadNew	plugged/fzf/src/constants.go	/^	EvtReadNew util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
EvtReadNew	plugged/fzf/src/util/eventbox_test.go	/^	EvtReadNew EventType = iota$/;"	c	package:util	typeref:typename:EventType
EvtReady	plugged/fzf/src/constants.go	/^	EvtReady$/;"	c	package:fzf
EvtSearchFin	plugged/fzf/src/constants.go	/^	EvtSearchFin$/;"	c	package:fzf
EvtSearchFin	plugged/fzf/src/util/eventbox_test.go	/^	EvtSearchFin$/;"	c	package:util
EvtSearchNew	plugged/fzf/src/constants.go	/^	EvtSearchNew$/;"	c	package:fzf
EvtSearchNew	plugged/fzf/src/util/eventbox_test.go	/^	EvtSearchNew$/;"	c	package:util
EvtSearchProgress	plugged/fzf/src/constants.go	/^	EvtSearchProgress$/;"	c	package:fzf
EvtSearchProgress	plugged/fzf/src/util/eventbox_test.go	/^	EvtSearchProgress$/;"	c	package:util
ExactMatchNaive	plugged/fzf/src/algo/algo.go	/^func ExactMatchNaive(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern/;"	f	package:algo	typeref:typename:(Result, *[]int)
Example	plugged/vim-go/autoload/go/test-fixtures/complete/complete.go	/^func Example(s string) {$/;"	f	package:complete
Example	plugged/vim-go/autoload/go/test-fixtures/config/buildtags/buildtags.go	/^func Example() {$/;"	f	package:config
Example	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden.go	/^	Example       int64    `json:"example"`$/;"	m	struct:main.Server	typeref:typename:int64
Example	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden_options.go	/^	Example       int64    `json:"example,omitempty"`$/;"	m	struct:main.Server	typeref:typename:int64
Example	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_input.go	/^	Example       int64$/;"	m	struct:main.Server	typeref:typename:int64
Example	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_golden.go	/^	Example       int64    $/;"	m	struct:main.Server	typeref:typename:int64
Example	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_input.go	/^	Example       int64    `json:"example"`$/;"	m	struct:main.Server	typeref:typename:int64
Example2	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden.go	/^	Example2      string   `json:"example_2"`$/;"	m	struct:main.Server	typeref:typename:string
Example2	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden_options.go	/^	Example2      string   `json:"example_2,omitempty"`$/;"	m	struct:main.Server	typeref:typename:string
Example2	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_input.go	/^	Example2      string$/;"	m	struct:main.Server	typeref:typename:string
Example2	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_golden.go	/^	Example2      string   $/;"	m	struct:main.Server	typeref:typename:string
Example2	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_input.go	/^	Example2      string   `json:"example_2"`$/;"	m	struct:main.Server	typeref:typename:string
Example: Advanced ripgrep integration	plugged/fzf.vim/README.md	/^#### Example: Advanced ripgrep integration$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Example: Customizing `Files` command	plugged/fzf.vim/README.md	/^#### Example: Customizing `Files` command$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Example: `Rg` command with preview window	plugged/fzf.vim/README.md	/^#### Example: `Rg` command with preview window$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Example: `git grep` wrapper	plugged/fzf.vim/README.md	/^#### Example: `git grep` wrapper$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
ExampleHelloWorld	plugged/vim-go/autoload/go/test-fixtures/test/src/example/example_test.go	/^func ExampleHelloWorld() {$/;"	f	package:main
Examples	plugged/fzf/README-VIM.md	/^#### Examples$/;"	t	subsection:FZF Vim integration""`:FZF[!]`""Configuration
Examples	plugged/fzf/README.md	/^Examples$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Exception	plugged/vim-gitgutter/test/runner.vim	/^function Exception()$/;"	f
ExecCommand	plugged/fzf/src/util/util_unix.go	/^func ExecCommand(command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
ExecCommand	plugged/fzf/src/util/util_windows.go	/^func ExecCommand(command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
ExecCommandWith	plugged/fzf/src/util/util_unix.go	/^func ExecCommandWith(shell string, command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
ExecCommandWith	plugged/fzf/src/util/util_windows.go	/^func ExecCommandWith(shell string, command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
Executing external programs	plugged/fzf/README.md	/^### Executing external programs$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
Exit0	plugged/fzf/src/options.go	/^	Exit0       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Expect	plugged/fzf/src/options.go	/^	Expect      map[tui.Event]string$/;"	m	struct:fzf.Options	typeref:typename:map[tui.Event]string
Explanation of `g:fzf_colors`	plugged/fzf/README-VIM.md	/^##### Explanation of `g:fzf_colors`$/;"	T	subsubsection:FZF Vim integration""`:FZF[!]`""Configuration""Examples
Extended	plugged/fzf/src/options.go	/^	Extended    bool$/;"	m	struct:fzf.Options	typeref:typename:bool
F1	plugged/fzf/src/tui/tui.go	/^	F1$/;"	c	package:tui
F10	plugged/fzf/src/tui/tui.go	/^	F10$/;"	c	package:tui
F11	plugged/fzf/src/tui/tui.go	/^	F11$/;"	c	package:tui
F12	plugged/fzf/src/tui/tui.go	/^	F12$/;"	c	package:tui
F2	plugged/fzf/src/tui/tui.go	/^	F2$/;"	c	package:tui
F3	plugged/fzf/src/tui/tui.go	/^	F3$/;"	c	package:tui
F4	plugged/fzf/src/tui/tui.go	/^	F4$/;"	c	package:tui
F5	plugged/fzf/src/tui/tui.go	/^	F5$/;"	c	package:tui
F6	plugged/fzf/src/tui/tui.go	/^	F6$/;"	c	package:tui
F7	plugged/fzf/src/tui/tui.go	/^	F7$/;"	c	package:tui
F8	plugged/fzf/src/tui/tui.go	/^	F8$/;"	c	package:tui
F9	plugged/fzf/src/tui/tui.go	/^	F9$/;"	c	package:tui
FAQ	plugged/vim-fugitive/README.markdown	/^## FAQ$/;"	s	chapter:fugitive.vim
FAQ and troubleshooting	plugged/vim-go/README.md	/^## FAQ and troubleshooting$/;"	s	chapter:vim-go [![GitHub Actions Status](https://github.com/fatih/vim-go/workflows/test/badge.svg)](https://github.com/fatih/vim-go/actions)
FIELD	plugged/fzf/man/man1/fzf.1	/^.SH FIELD INDEX EXPRESSION$/;"	s	title:fzf
FILE	plugged/fzf/test/test_go.rb	/^FILE = File.expand_path(__FILE__)$/;"	C
FILESIZE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^for \/F %%F in ("%DB_FILE%.files") do set FILESIZE=%%~zF$/;"	v
FILESIZE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILESIZE=0$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD_IS_ABSOLUTE=1$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD_IS_ABSOLUTE=0$/;"	v
FZF	plugged/fzf/plugin/fzf.vim	/^command! -nargs=* -complete=dir -bang FZF call s:cmd(<bang>0, <f-args>)$/;"	c
FZF	plugged/fzf/test/test_go.rb	/^FZF = "FZF_DEFAULT_OPTS= FZF_DEFAULT_COMMAND= #{BASE}\/bin\/fzf"$/;"	C
FZF Vim integration	plugged/fzf/README-VIM.md	/^FZF Vim integration$/;"	c
Fail	plugged/vim-go/autoload/go/test-fixtures/test/src/play/mock/controller.go	/^func Fail(t *testing.T) {$/;"	f	package:mock
Features	plugged/nord-vim/CHANGELOG.md	/^## Features$/;"	s	chapter:0.1.0
Features	plugged/nord-vim/CHANGELOG.md	/^## Features$/;"	s	chapter:0.10.0
Features	plugged/nord-vim/CHANGELOG.md	/^## Features$/;"	s	chapter:0.11.0
Features	plugged/nord-vim/CHANGELOG.md	/^## Features$/;"	s	chapter:0.12.0
Features	plugged/nord-vim/CHANGELOG.md	/^## Features$/;"	s	chapter:0.13.0
Features	plugged/nord-vim/CHANGELOG.md	/^## Features$/;"	s	chapter:0.14.0
Features	plugged/nord-vim/CHANGELOG.md	/^## Features$/;"	s	chapter:0.15.0
Features	plugged/nord-vim/CHANGELOG.md	/^## Features$/;"	s	chapter:0.16.0
Features	plugged/nord-vim/CHANGELOG.md	/^## Features$/;"	s	chapter:0.17.0
Features	plugged/nord-vim/CHANGELOG.md	/^## Features$/;"	s	chapter:0.18.0
Features	plugged/nord-vim/CHANGELOG.md	/^## Features$/;"	s	chapter:0.4.0
Features	plugged/nord-vim/CHANGELOG.md	/^## Features$/;"	s	chapter:0.6.0
Features	plugged/nord-vim/CHANGELOG.md	/^## Features$/;"	s	chapter:0.7.0
Features	plugged/nord-vim/CHANGELOG.md	/^## Features$/;"	s	chapter:0.8.0
Features	plugged/nord-vim/CHANGELOG.md	/^## Features$/;"	s	chapter:0.9.0
Features	plugged/nord-vim/README.md	/^## Features$/;"	s
Features	plugged/vim-go/README.md	/^## Features$/;"	s	chapter:vim-go [![GitHub Actions Status](https://github.com/fatih/vim-go/workflows/test/badge.svg)](https://github.com/fatih/vim-go/actions)
Fg	plugged/fzf/src/tui/tui.go	/^	Fg           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Fg	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Fg() Color {$/;"	f	struct:tui.ColorPair	typeref:typename:Color
FileWord	plugged/fzf/src/options.go	/^	FileWord    bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Files and directories	plugged/fzf/README.md	/^#### Files and directories$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Files listed in `git status`	plugged/fzf/ADVANCED.md	/^### Files listed in `git status`$/;"	S	section:Advanced fzf examples""Key bindings for git objects
Fill	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Fill(text string) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
Fill	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Fill(str string) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
Fill	plugged/fzf/src/tui/tui.go	/^	Fill(text string) FillReturn$/;"	n	interface:tui.Window	typeref:typename:FillReturn
FillContinue	plugged/fzf/src/tui/tui.go	/^	FillContinue FillReturn = iota$/;"	c	package:tui	typeref:type:FillReturn
FillNextLine	plugged/fzf/src/tui/tui.go	/^	FillNextLine$/;"	c	package:tui
FillReturn	plugged/fzf/src/tui/tui.go	/^type FillReturn int$/;"	t	package:tui	typeref:typename:int
FillSuspend	plugged/fzf/src/tui/tui.go	/^	FillSuspend$/;"	c	package:tui
Filter	plugged/fzf/src/options.go	/^	Filter      *string$/;"	m	struct:fzf.Options	typeref:typename:*string
FinishFill	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) FinishFill() {$/;"	f	struct:tui.LightWindow
FinishFill	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) FinishFill() {$/;"	f	struct:tui.TcellWindow
FinishFill	plugged/fzf/src/tui/tui.go	/^	FinishFill()$/;"	n	interface:tui.Window
Fish shell	plugged/fzf/README.md	/^#### Fish shell$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Tips
Fixes and improvements	plugged/fzf/CHANGELOG.md	/^### Fixes and improvements$/;"	S	section:CHANGELOG""0.10.2
Foo	plugged/vim-go/autoload/go/test-fixtures/fmt/src/imports/goimports.go	/^func Foo(log *logging.TestLogger) {$/;"	f	package:main
Foo	plugged/vim-go/autoload/go/test-fixtures/fmt/src/imports/goimports_golden.go	/^func Foo(log *logging.TestLogger) {$/;"	f	package:main
FriendlyName	plugged/vim-gitgutter/test/runner.vim	/^function FriendlyName(test_name)$/;"	f
FugitiveCommonDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveCommonDir(...) abort$/;"	f
FugitiveConfig	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfig(...) abort$/;"	f
FugitiveConfigGet	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGet(name, ...) abort$/;"	f
FugitiveConfigGetAll	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGetAll(name, ...) abort$/;"	f
FugitiveConfigGetRegexp	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGetRegexp(pattern, ...) abort$/;"	f
FugitiveDetect	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveDetect(...) abort$/;"	f
FugitiveDidChange	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveDidChange(...) abort$/;"	f
FugitiveExecute	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveExecute(args, ...) abort$/;"	f
FugitiveExtractGitDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveExtractGitDir(path) abort$/;"	f
FugitiveFind	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveFind(...) abort$/;"	f
FugitiveGitDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveGitDir(...) abort$/;"	f
FugitiveGitPath	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveGitPath(path) abort$/;"	f
FugitiveGitVersion	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveGitVersion(...) abort$/;"	f
FugitiveHead	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveHead(...) abort$/;"	f
FugitiveIsGitDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveIsGitDir(...) abort$/;"	f
FugitiveParse	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveParse(...) abort$/;"	f
FugitivePath	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitivePath(...) abort$/;"	f
FugitivePrepare	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitivePrepare(...) abort$/;"	f
FugitiveReal	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveReal(...) abort$/;"	f
FugitiveRemoteUrl	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveRemoteUrl(...) abort$/;"	f
FugitiveResult	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveResult(...) abort$/;"	f
FugitiveShellCommand	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveShellCommand(...) abort$/;"	f
FugitiveStatusline	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveStatusline(...) abort$/;"	f
FugitiveVimPath	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveVimPath(path) abort$/;"	f
FugitiveWorkTree	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveWorkTree(...) abort$/;"	f
FullscreenRenderer	plugged/fzf/src/tui/tui.go	/^type FullscreenRenderer struct {$/;"	s	package:tui
Fuzzy	plugged/fzf/src/options.go	/^	Fuzzy       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Fuzzy completion for bash and zsh	plugged/fzf/README.md	/^Fuzzy completion for bash and zsh$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
FuzzyAlgo	plugged/fzf/src/options.go	/^	FuzzyAlgo   algo.Algo$/;"	m	struct:fzf.Options	typeref:typename:algo.Algo
FuzzyMatchV1	plugged/fzf/src/algo/algo.go	/^func FuzzyMatchV1(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []/;"	f	package:algo	typeref:typename:(Result, *[]int)
FuzzyMatchV2	plugged/fzf/src/algo/algo.go	/^func FuzzyMatchV2(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern [/;"	f	package:algo	typeref:typename:(Result, *[]int)
G	plugged/vim-fugitive/plugin/fugitive.vim	/^  command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete G   exe fugitive#Comm/;"	c
GO	plugged/fzf/Makefile	/^GO             ?= go$/;"	m
GOOS	plugged/fzf/Makefile	/^GOOS           ?= $(word 1, $(subst \/, " ", $(word 4, $(shell go version))))$/;"	m
Generating fzf color theme from Vim color schemes	plugged/fzf/ADVANCED.md	/^### Generating fzf color theme from Vim color schemes$/;"	S	section:Advanced fzf examples""Color themes
Get	plugged/fzf/src/merger.go	/^func (mg *Merger) Get(idx int) Result {$/;"	f	struct:fzf.Merger	typeref:typename:Result
Get	plugged/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Get() bool {$/;"	f	struct:util.AtomicBool	typeref:typename:bool
Get	plugged/fzf/src/util/chars.go	/^func (chars *Chars) Get(i int) rune {$/;"	f	struct:util.Chars	typeref:typename:rune
GetChar	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) GetChar() Event { return Event{} }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Event
GetChar	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) GetChar() Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
GetChar	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) GetChar() Event {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Event
GetChar	plugged/fzf/src/tui/tui.go	/^	GetChar() Event$/;"	n	interface:tui.Renderer	typeref:typename:Event
GetGoHTMLTmplIndent	plugged/vim-go/indent/gohtmltmpl.vim	/^function! GetGoHTMLTmplIndent(lnum)$/;"	f
Getting Started	plugged/nord-vim/README.md	/^## Getting Started$/;"	s
Git	plugged/vim-fugitive/plugin/fugitive.vim	/^command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete Git exe fugitive#Comman/;"	c
GitGutter	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutter    call gitgutter#process_buffer(bufnr(''), 1)$/;"	c
GitGutterAll	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterAll call gitgutter#all(1)$/;"	c
GitGutterBufferDisable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterBufferDisable call gitgutter#buffer_disable()$/;"	c
GitGutterBufferEnable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterBufferEnable  call gitgutter#buffer_enable()$/;"	c
GitGutterBufferToggle	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterBufferToggle  call gitgutter#buffer_toggle()$/;"	c
GitGutterCursorHold	plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! GitGutterCursorHold(timer)$/;"	f
GitGutterDebug	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterDebug call gitgutter#debug#debug()$/;"	c
GitGutterDisable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterDisable call gitgutter#disable()$/;"	c
GitGutterEnable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterEnable  call gitgutter#enable()$/;"	c
GitGutterFold	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterFold call gitgutter#fold#toggle()$/;"	c
GitGutterGetHunkSummary	plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! GitGutterGetHunkSummary()$/;"	f
GitGutterGetHunks	plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! GitGutterGetHunks()$/;"	f
GitGutterLineHighlightsDisable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineHighlightsDisable call gitgutter#highlight#line_disable()$/;"	c
GitGutterLineHighlightsEnable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineHighlightsEnable  call gitgutter#highlight#line_enable()$/;"	c
GitGutterLineHighlightsToggle	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineHighlightsToggle  call gitgutter#highlight#line_toggle()$/;"	c
GitGutterLineNrHighlightsDisable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineNrHighlightsDisable call gitgutter#highlight#linenr_disable()$/;"	c
GitGutterLineNrHighlightsEnable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineNrHighlightsEnable  call gitgutter#highlight#linenr_enable()$/;"	c
GitGutterLineNrHighlightsToggle	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineNrHighlightsToggle  call gitgutter#highlight#linenr_toggle()$/;"	c
GitGutterNextHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar -count=1 GitGutterNextHunk call gitgutter#hunk#next_hunk(<count>)$/;"	c
GitGutterPrevHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar -count=1 GitGutterPrevHunk call gitgutter#hunk#prev_hunk(<count>)$/;"	c
GitGutterPreviewHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterPreviewHunk call gitgutter#hunk#preview()$/;"	c
GitGutterQuickFix	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterQuickFix call gitgutter#quickfix(0)$/;"	c
GitGutterQuickFixCurrentFile	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterQuickFixCurrentFile call gitgutter#quickfix(1)$/;"	c
GitGutterSignsDisable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterSignsDisable call gitgutter#sign#disable()$/;"	c
GitGutterSignsEnable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterSignsEnable  call gitgutter#sign#enable()$/;"	c
GitGutterSignsToggle	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterSignsToggle  call gitgutter#sign#toggle()$/;"	c
GitGutterStageHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar -range=% GitGutterStageHunk call gitgutter#hunk#stage(<line1>,<line2>)$/;"	c
GitGutterToggle	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterToggle  call gitgutter#toggle()$/;"	c
GitGutterUndoHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterUndoHunk    call gitgutter#hunk#undo()$/;"	c
Global options	plugged/fzf.vim/README.md	/^### Global options$/;"	S	section:fzf :heart: vim""Customization
Global options supported by `fzf#wrap`	plugged/fzf/README-VIM.md	/^### Global options supported by `fzf#wrap`$/;"	S	section:FZF Vim integration""`fzf#wrap`
Go environment	plugged/vim-go/.github/ISSUE_TEMPLATE.md	/^#### Go environment$/;"	t	subsection:Configuration (**MUST** fill this out):
Go version (`go version`):	plugged/vim-go/.github/ISSUE_TEMPLATE.md	/^#### Go version (`go version`):$/;"	t	subsection:Configuration (**MUST** fill this out):
GoAddTags	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -range GoAddTags call go#tags#Add(<line1>, <line2>, <count>, <f-args>)$/;"	c
GoAddWorkspace	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=+ -complete=dir GoAddWorkspace call go#lsp#AddWorkspaceDirectory(<f-args>)$/;"	c
GoAlternate	plugged/vim-go/ftplugin/go/commands.vim	/^command! -bang GoAlternate call go#alternate#Switch(<bang>0, '')$/;"	c
GoAsmFmtAutoSaveToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoAsmFmtAutoSaveToggle call go#asmfmt#ToggleAsmFmtAutoSave()$/;"	c
GoAutoTypeInfoToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoAutoTypeInfoToggle call go#complete#ToggleAutoTypeInfo()$/;"	c
GoBuild	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoBuild call go#cmd#Build(<bang>0,<f-args>)$/;"	c
GoBuildTags	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? -bang GoBuildTags call go#cmd#BuildTags(<bang>0, <f-args>)$/;"	c
GoCallees	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoCallees call go#guru#Callees(<count>)$/;"	c
GoCallers	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoCallers call go#calls#Callers()$/;"	c
GoCallstack	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoCallstack call go#guru#Callstack(<count>)$/;"	c
GoChannelPeers	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoChannelPeers call go#guru#ChannelPeers(<count>)$/;"	c
GoCoverage	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoCoverage call go#coverage#Buffer(<bang>0, <f-args>)$/;"	c
GoCoverageBrowser	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoCoverageBrowser call go#coverage#Browser(<bang>0, <f-args>)$/;"	c
GoCoverageClear	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoCoverageClear call go#coverage#Clear()$/;"	c
GoCoverageToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoCoverageToggle call go#coverage#BufferToggle(<bang>0, <f-args>)$/;"	c
GoDebugAttach	plugged/vim-go/autoload/go/debug.vim	/^  command! -nargs=1 GoDebugAttach call go#debug#Start('attach', <f-args>)$/;"	c
GoDebugAttach	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=1 GoDebugAttach call go#debug#Start('attach', <f-args>)$/;"	c
GoDebugBreakpoint	plugged/vim-go/autoload/go/debug.vim	/^  command! -nargs=? GoDebugBreakpoint call go#debug#Breakpoint(<f-args>)$/;"	c
GoDebugBreakpoint	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=? GoDebugBreakpoint call go#debug#Breakpoint(<f-args>)$/;"	c
GoDebugConnect	plugged/vim-go/autoload/go/debug.vim	/^  command! -nargs=? GoDebugConnect call go#debug#Start('connect', <f-args>)$/;"	c
GoDebugConnect	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=? GoDebugConnect call go#debug#Start('connect', <f-args>)$/;"	c
GoDebugContinue	plugged/vim-go/autoload/go/debug.vim	/^  command! -nargs=0 GoDebugContinue   call go#debug#Stack('continue')$/;"	c
GoDebugHalt	plugged/vim-go/autoload/go/debug.vim	/^  command! -nargs=0 GoDebugHalt       call go#debug#Stack('halt')$/;"	c
GoDebugNext	plugged/vim-go/autoload/go/debug.vim	/^  command! -nargs=0 GoDebugNext       call go#debug#Stack('next')$/;"	c
GoDebugPrint	plugged/vim-go/autoload/go/debug.vim	/^  command! -nargs=1 GoDebugPrint      call go#debug#Print(<q-args>)$/;"	c
GoDebugRestart	plugged/vim-go/autoload/go/debug.vim	/^  command! -nargs=0 GoDebugRestart    call go#debug#Restart()$/;"	c
GoDebugSet	plugged/vim-go/autoload/go/debug.vim	/^  command! -nargs=* GoDebugSet        call go#debug#Set(<f-args>)$/;"	c
GoDebugStart	plugged/vim-go/autoload/go/debug.vim	/^  command! -nargs=* -complete=customlist,go#package#Complete GoDebugStart call go#debug#Start('d/;"	c
GoDebugStart	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=* -complete=customlist,go#package#Complete GoDebugStart call go#debug#Start('d/;"	c
GoDebugStep	plugged/vim-go/autoload/go/debug.vim	/^  command! -nargs=0 GoDebugStep       call go#debug#Stack('step')$/;"	c
GoDebugStepOut	plugged/vim-go/autoload/go/debug.vim	/^  command! -nargs=0 GoDebugStepOut    call go#debug#Stack('stepOut')$/;"	c
GoDebugStop	plugged/vim-go/autoload/go/debug.vim	/^  command! -nargs=0 GoDebugStop       call go#debug#Stop()$/;"	c
GoDebugTest	plugged/vim-go/autoload/go/debug.vim	/^  command! -nargs=* -complete=customlist,go#package#Complete GoDebugTest  call go#debug#Start('t/;"	c
GoDebugTest	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=* -complete=customlist,go#package#Complete GoDebugTest  call go#debug#Start('t/;"	c
GoDebugTestFunc	plugged/vim-go/autoload/go/debug.vim	/^  command! -nargs=* GoDebugTestFunc  call go#debug#TestFunc(<f-args>)$/;"	c
GoDebugTestFunc	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=* GoDebugTestFunc  call go#debug#TestFunc(<f-args>)$/;"	c
GoDecls	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? -complete=file GoDecls call go#decls#Decls(0, <q-args>)$/;"	c
GoDeclsDir	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? -complete=dir GoDeclsDir call go#decls#Decls(1, <q-args>)$/;"	c
GoDef	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -range GoDef :call go#def#Jump('', 0)$/;"	c
GoDefPop	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? GoDefPop :call go#def#StackPop(<f-args>)$/;"	c
GoDefStack	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? GoDefStack :call go#def#Stack(<f-args>)$/;"	c
GoDefStackClear	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? GoDefStackClear :call go#def#StackClear(<f-args>)$/;"	c
GoDefType	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -range GoDefType :call go#def#Jump('', 1)$/;"	c
GoDeps	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoDeps echo go#tool#Deps()$/;"	c
GoDescribe	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoDescribe call go#guru#Describe(<count>)$/;"	c
GoDiagnostics	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoDiagnostics call go#lint#Diagnostics(<bang>0, <f-args>)$/;"	c
GoDoc	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -range -complete=customlist,go#package#Complete GoDoc call go#doc#Open('new', /;"	c
GoDocBrowser	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -range -complete=customlist,go#package#Complete GoDocBrowser call go#doc#OpenB/;"	c
GoDrop	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? -complete=customlist,go#package#Complete GoDrop call go#import#SwitchImport(0,/;"	c
GoErrCheck	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang -complete=customlist,go#package#Complete GoErrCheck call go#lint#Errchec/;"	c
GoFiles	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -complete=customlist,go#tool#ValidFiles GoFiles echo go#tool#Files(<f-args>)$/;"	c
GoFillStruct	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoFillStruct call go#fillstruct#FillStruct()$/;"	c
GoFmt	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoFmt call go#fmt#Format(0)$/;"	c
GoFmtAutoSaveToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoFmtAutoSaveToggle call go#fmt#ToggleFmtAutoSave()$/;"	c
GoFreevars	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoFreevars call go#guru#Freevars(<count>)$/;"	c
GoGenerate	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoGenerate call go#cmd#Generate(<bang>0,<f-args>)$/;"	c
GoGuruScope	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=* -complete=customlist,go#package#Complete GoGuruScope call go#guru#Scope(<f-a/;"	c
GoIfErr	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoIfErr call go#iferr#Generate()$/;"	c
GoImpl	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -complete=customlist,go#impl#Complete GoImpl call go#impl#Impl(<f-args>)$/;"	c
GoImplements	plugged/vim-go/ftplugin/go/commands.vim	/^command! -range=% GoImplements call go#implements#Implements(<count>)$/;"	c
GoImport	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=1 -bang -complete=customlist,go#package#Complete GoImport call go#import#SwitchI/;"	c
GoImportAs	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang -complete=customlist,go#package#Complete GoImportAs call go#import#Switc/;"	c
GoImports	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoImports call go#fmt#Format(1)$/;"	c
GoIndent	plugged/vim-go/indent/go.vim	/^function! GoIndent(lnum) abort$/;"	f
GoInfo	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoInfo call go#tool#Info(1)$/;"	c
GoInstall	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoInstall call go#cmd#Install(<bang>0, <f-args>)$/;"	c
GoInstallBinaries	plugged/vim-go/plugin/go.vim	/^command! -nargs=* -complete=customlist,s:complete GoInstallBinaries call s:GoInstallBinaries(-1,/;"	c
GoKeyify	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=0 GoKeyify call go#keyify#Keyify()$/;"	c
GoLSPDebugBrowser	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoLSPDebugBrowser call go#lsp#DebugBrowser()$/;"	c
GoLint	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoLint call go#lint#Golint(<bang>0, <f-args>)$/;"	c
GoMetaLinter	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoMetaLinter call go#lint#Gometa(<bang>0, 0, <f-args>)$/;"	c
GoMetaLinterAutoSaveToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoMetaLinterAutoSaveToggle call go#lint#ToggleMetaLinterAutoSave()$/;"	c
GoModFmt	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 -range GoModFmt call go#mod#Format()$/;"	c
GoModFmt	plugged/vim-go/ftplugin/gomod/commands.vim	/^command! -nargs=0 -range GoModFmt call go#mod#Format()$/;"	c
GoModFmtAutoSaveToggle	plugged/vim-go/ftplugin/gomod/commands.vim	/^command! -nargs=0 GoModFmtAutoSaveToggle call go#mod#ToggleModFmtAutoSave()$/;"	c
GoPath	plugged/vim-go/plugin/go.vim	/^command! -nargs=? -complete=dir GoPath call go#path#GoPath(<f-args>)$/;"	c
GoPlay	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 -range=% GoPlay call go#play#Share(<count>, <line1>, <line2>)$/;"	c
GoPointsTo	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoPointsTo call go#guru#PointsTo(<count>)$/;"	c
GoReferrers	plugged/vim-go/ftplugin/go/commands.vim	/^command! -range=% GoReferrers call go#referrers#Referrers(<count>)$/;"	c
GoRemoveTags	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -range GoRemoveTags call go#tags#Remove(<line1>, <line2>, <count>, <f-args>)$/;"	c
GoRename	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? -complete=customlist,go#rename#Complete GoRename call go#rename#Rename(<bang>0/;"	c
GoReportGitHubIssue	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoReportGitHubIssue call go#issue#New()$/;"	c
GoRun	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang -complete=file GoRun call go#cmd#Run(<bang>0,<f-args>)$/;"	c
GoSameIds	plugged/vim-go/ftplugin/go/commands.vim	/^command! -range=0 GoSameIds call go#guru#SameIds(1)$/;"	c
GoSameIdsAutoToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -range=0 GoSameIdsAutoToggle call go#guru#AutoToggleSameIds()$/;"	c
GoSameIdsClear	plugged/vim-go/ftplugin/go/commands.vim	/^command! -range=0 GoSameIdsClear call go#guru#ClearSameIds()$/;"	c
GoSameIdsToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -range=0 GoSameIdsToggle call go#guru#ToggleSameIds()$/;"	c
GoTemplateAutoCreateToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoTemplateAutoCreateToggle call go#template#ToggleAutoCreate()$/;"	c
GoTest	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoTest call go#test#Test(<bang>0, 0, <f-args>)$/;"	c
GoTestCompile	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoTestCompile call go#test#Test(<bang>0, 1, <f-args>)$/;"	c
GoTestFunc	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoTestFunc call go#test#Func(<bang>0, <f-args>)$/;"	c
GoToggleTermCloseOnExit	plugged/vim-go/ftplugin/go/commands.vim	/^command! GoToggleTermCloseOnExit call go#term#ToggleCloseOnExit()$/;"	c
GoUpdateBinaries	plugged/vim-go/plugin/go.vim	/^command! -nargs=* -complete=customlist,s:complete GoUpdateBinaries  call s:GoInstallBinaries(1, /;"	c
GoVet	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoVet call go#lint#Vet(<bang>0, <f-args>)$/;"	c
GoWhicherrs	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoWhicherrs call go#guru#Whicherrs(<count>)$/;"	c
Gutentags	plugged/vim-gutentags/README.md	/^# Gutentags$/;"	c
GutentagsToggleEnabled	plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled$/;"	c
GutentagsToggleFake	plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleFake    :call gutentags#fake()$/;"	c
GutentagsToggleTrace	plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleTrace   :call gutentags#toggletrace()$/;"	c
GutentagsUpdate	plugged/vim-gutentags/autoload/gutentags.vim	/^    command! -buffer -bang GutentagsUpdate :call s:manual_update_tags(<bang>0)$/;"	c
Gutter	plugged/fzf/src/tui/tui.go	/^	Gutter       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
HasBg	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) HasBg() bool {$/;"	f	struct:tui.ColorPair	typeref:typename:bool
HasFullscreenRenderer	plugged/fzf/src/tui/dummy.go	/^func HasFullscreenRenderer() bool {$/;"	f	package:tui	typeref:typename:bool
HasFullscreenRenderer	plugged/fzf/src/tui/tcell.go	/^func HasFullscreenRenderer() bool {$/;"	f	package:tui	typeref:typename:bool
Header	plugged/fzf/src/options.go	/^	Header      []string$/;"	m	struct:fzf.Options	typeref:typename:[]string
Header	plugged/fzf/src/tui/tui.go	/^	Header       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
HeaderFirst	plugged/fzf/src/options.go	/^	HeaderFirst bool$/;"	m	struct:fzf.Options	typeref:typename:bool
HeaderLines	plugged/fzf/src/options.go	/^	HeaderLines int$/;"	m	struct:fzf.Options	typeref:typename:int
Height	plugged/fzf/src/options.go	/^	Height      sizeSpec$/;"	m	struct:fzf.Options	typeref:typename:sizeSpec
Height	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Height() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Height	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Height() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Height	plugged/fzf/src/tui/tui.go	/^	Height() int$/;"	n	interface:tui.Window	typeref:typename:int
HexToColor	plugged/fzf/src/tui/tui.go	/^func HexToColor(rrggbb string) Color {$/;"	f	package:tui	typeref:typename:Color
Hide statusline	plugged/fzf.vim/README.md	/^### Hide statusline$/;"	S	section:fzf :heart: vim""Status line of terminal buffer
Hide statusline	plugged/fzf/README-VIM.md	/^### Hide statusline$/;"	S	section:FZF Vim integration""Tips
History	plugged/fzf/src/history.go	/^type History struct {$/;"	s	package:fzf
History	plugged/fzf/src/options.go	/^	History     *History$/;"	m	struct:fzf.Options	typeref:typename:*History
Home	plugged/fzf/src/tui/tui.go	/^	Home$/;"	c	package:tui
Host names	plugged/fzf/README.md	/^#### Host names$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
How?	plugged/vim-gutentags/README.md	/^## How?$/;"	s	chapter:Gutentags
Hscroll	plugged/fzf/src/options.go	/^	Hscroll     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
HscrollOff	plugged/fzf/src/options.go	/^	HscrollOff  int$/;"	m	struct:fzf.Options	typeref:typename:int
I16	plugged/fzf/src/util/slab.go	/^	I16 []int16$/;"	m	struct:util.Slab	typeref:typename:[]int16
I32	plugged/fzf/src/util/slab.go	/^	I32 []int32$/;"	m	struct:util.Slab	typeref:typename:[]int32
ID	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden.go	/^	ID            int      `json:"id"`$/;"	m	struct:main.Server	typeref:typename:int
ID	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden_options.go	/^	ID            int      `json:"id,omitempty"`$/;"	m	struct:main.Server	typeref:typename:int
ID	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_input.go	/^	ID            int$/;"	m	struct:main.Server	typeref:typename:int
ID	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_golden.go	/^	ID            int      $/;"	m	struct:main.Server	typeref:typename:int
ID	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_input.go	/^	ID            int      `json:"id"`$/;"	m	struct:main.Server	typeref:typename:int
INDEX_WHOLE_PROJECT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set INDEX_WHOLE_PROJECT=0$/;"	v
INDEX_WHOLE_PROJECT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set INDEX_WHOLE_PROJECT=1$/;"	v
Improvements	plugged/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.10
Improvements	plugged/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.3
Improvements	plugged/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.4
Improvements	plugged/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.5
Improvements	plugged/nord-vim/CHANGELOG.md	/^## Improvements$/;"	s	chapter:0.10.0
Improvements	plugged/nord-vim/CHANGELOG.md	/^## Improvements$/;"	s	chapter:0.11.0
Improvements	plugged/nord-vim/CHANGELOG.md	/^## Improvements$/;"	s	chapter:0.12.0
Improvements	plugged/nord-vim/CHANGELOG.md	/^## Improvements$/;"	s	chapter:0.13.0
Improvements	plugged/nord-vim/CHANGELOG.md	/^## Improvements$/;"	s	chapter:0.14.0
Improvements	plugged/nord-vim/CHANGELOG.md	/^## Improvements$/;"	s	chapter:0.16.0
Improvements	plugged/nord-vim/CHANGELOG.md	/^## Improvements$/;"	s	chapter:0.18.0
Improvements	plugged/nord-vim/CHANGELOG.md	/^## Improvements$/;"	s	chapter:0.2.0
Improvements	plugged/nord-vim/CHANGELOG.md	/^## Improvements$/;"	s	chapter:0.3.0
Improvements	plugged/nord-vim/CHANGELOG.md	/^## Improvements$/;"	s	chapter:0.4.0
Improvements	plugged/nord-vim/CHANGELOG.md	/^## Improvements$/;"	s	chapter:0.5.0
Improvements	plugged/nord-vim/CHANGELOG.md	/^## Improvements$/;"	s	chapter:0.6.0
Improvements	plugged/nord-vim/CHANGELOG.md	/^## Improvements$/;"	s	chapter:0.7.0
Improvements	plugged/nord-vim/CHANGELOG.md	/^## Improvements$/;"	s	chapter:0.8.0
Improvements	plugged/nord-vim/CHANGELOG.md	/^## Improvements$/;"	s	chapter:0.9.0
Index	plugged/fzf/src/item.go	/^func (item *Item) Index() int32 {$/;"	f	struct:fzf.Item	typeref:typename:int32
Index	plugged/fzf/src/result.go	/^func (result *Result) Index() int32 {$/;"	f	struct:fzf.Result	typeref:typename:int32
Index	plugged/fzf/src/util/chars.go	/^	Index int32$/;"	m	struct:util.Chars	typeref:typename:int32
Info	plugged/fzf/.github/ISSUE_TEMPLATE.md	/^## Info$/;"	s
Info	plugged/fzf/src/tui/tui.go	/^	Info         ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
InfoStyle	plugged/fzf/src/options.go	/^	InfoStyle   infoStyle$/;"	m	struct:fzf.Options	typeref:typename:infoStyle
Init	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Init()             {}$/;"	f	unknown:tui.FullscreenRenderer
Init	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Init() {$/;"	f	struct:tui.LightRenderer
Init	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Init() {$/;"	f	unknown:tui.FullscreenRenderer
Init	plugged/fzf/src/tui/tui.go	/^	Init()$/;"	n	interface:tui.Renderer
Input	plugged/fzf/src/terminal.go	/^func (t *Terminal) Input() (bool, []rune) {$/;"	f	struct:fzf.Terminal	typeref:typename:(bool, []rune)
Input	plugged/fzf/src/tui/tui.go	/^	Input        ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Insert	plugged/fzf/src/tui/tui.go	/^	Insert$/;"	c	package:tui
Instalation	README.md	/^## Instalation$/;"	s	chapter:neovimfiles
Install	plugged/vim-go/README.md	/^## Install$/;"	s	chapter:vim-go [![GitHub Actions Status](https://github.com/fatih/vim-go/workflows/test/badge.svg)](https://github.com/fatih/vim-go/actions)
Installation	plugged/fzf.vim/README.md	/^Installation$/;"	s	chapter:fzf :heart: vim
Installation	plugged/fzf/README-VIM.md	/^Installation$/;"	s	chapter:FZF Vim integration
Installation	plugged/fzf/README.md	/^Installation$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Installation	plugged/vim-fugitive/README.markdown	/^## Installation$/;"	s	chapter:fugitive.vim
Installation	plugged/vim-two-firewatch/README.md	/^## Installation$/;"	s	chapter:Vim-Two-Firewatch Colorscheme
Installation & Activation Docs	plugged/nord-vim/CHANGELOG.md	/^###### Installation & Activation Docs$/;"	u	section:0.12.0""Features
Int	plugged/fzf/src/tui/tui.go	/^func (t EventType) Int() int {$/;"	f	type:tui.EventType	typeref:typename:int
Introduction	plugged/fzf/ADVANCED.md	/^Introduction$/;"	s	chapter:Advanced fzf examples
Invalid	plugged/fzf/src/tui/tui.go	/^	Invalid$/;"	c	package:tui
IsBytes	plugged/fzf/src/util/chars.go	/^func (chars *Chars) IsBytes() bool {$/;"	f	struct:util.Chars	typeref:typename:bool
IsDefault	plugged/fzf/src/tui/tui.go	/^func (c Color) IsDefault() bool {$/;"	f	type:tui.Color	typeref:typename:bool
IsEmpty	plugged/fzf/src/pattern.go	/^func (p *Pattern) IsEmpty() bool {$/;"	f	struct:fzf.Pattern	typeref:typename:bool
IsFull	plugged/fzf/src/chunklist.go	/^func (c *Chunk) IsFull() bool {$/;"	f	struct:fzf.Chunk	typeref:typename:bool
IsLightRendererSupported	plugged/fzf/src/tui/light_unix.go	/^func IsLightRendererSupported() bool {$/;"	f	package:tui	typeref:typename:bool
IsLightRendererSupported	plugged/fzf/src/tui/light_windows.go	/^func IsLightRendererSupported() bool {$/;"	f	package:tui	typeref:typename:bool
IsTty	plugged/fzf/src/util/util.go	/^func IsTty() bool {$/;"	f	package:util	typeref:typename:bool
IsWindows	plugged/fzf/src/util/util_unix.go	/^func IsWindows() bool {$/;"	f	package:util	typeref:typename:bool
IsWindows	plugged/fzf/src/util/util_windows.go	/^func IsWindows() bool {$/;"	f	package:util	typeref:typename:bool
Italic	plugged/fzf/src/tui/dummy.go	/^	Italic    = Attr(1 << 2)$/;"	c	package:tui
Italic	plugged/fzf/src/tui/tcell.go	/^	Italic         = Attr(tcell.AttrItalic)$/;"	c	package:tui
Item	plugged/fzf/src/item.go	/^type Item struct {$/;"	s	package:fzf
ItemBuilder	plugged/fzf/src/chunklist.go	/^type ItemBuilder func(*Item, []byte) bool$/;"	t	package:fzf	typeref:typename:func(*Item, []byte) bool
JumpLabels	plugged/fzf/src/options.go	/^	JumpLabels  string$/;"	m	struct:fzf.Options	typeref:typename:string
K	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> K :GoDoc<cr>$/;"	m
KEY/EVENT	plugged/fzf/man/man1/fzf.1	/^.SH KEY\/EVENT BINDINGS$/;"	s	title:fzf
KeepRight	plugged/fzf/src/options.go	/^	KeepRight   bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Key	plugged/fzf/src/tui/tui.go	/^func Key(r rune) Event {$/;"	f	package:tui	typeref:typename:Event
Key bindings for command-line	plugged/fzf/README.md	/^Key bindings for command-line$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Key bindings for git objects	plugged/fzf/ADVANCED.md	/^Key bindings for git objects$/;"	s	chapter:Advanced fzf examples
Keymap	plugged/fzf/src/options.go	/^	Keymap      map[tui.Event][]action$/;"	m	struct:fzf.Options	typeref:typename:map[tui.Event][]action
KillCommand	plugged/fzf/src/util/util_unix.go	/^func KillCommand(cmd *exec.Cmd) error {$/;"	f	package:util	typeref:typename:error
KillCommand	plugged/fzf/src/util/util_windows.go	/^func KillCommand(cmd *exec.Cmd) error {$/;"	f	package:util	typeref:typename:error
L	autoload/plug.vim	/^    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	autoload/plug.vim	/^    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
LAYOUT	plugged/fzf/man/man1/fzf-tmux.1	/^.SH LAYOUT OPTIONS$/;"	s	title:fzf-tmux
LICENSE	plugged/fzf/man/man1/fzf.1	/^.SH LICENSE$/;"	s	title:fzf
LOG_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set LOG_FILE=$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set LOG_FILE=$/;"	v
Lala	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden.go	/^	Lala interface{} `json:"lala"`$/;"	m	struct:main.Server	typeref:typename:interface{}
Lala	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden_options.go	/^	Lala interface{} `json:"lala,omitempty"`$/;"	m	struct:main.Server	typeref:typename:interface{}
Lala	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_input.go	/^	Lala interface{}$/;"	m	struct:main.Server	typeref:typename:interface{}
Lala	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_golden.go	/^	Lala interface{} $/;"	m	struct:main.Server	typeref:typename:interface{}
Lala	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_input.go	/^	Lala interface{} `json:"lala"`$/;"	m	struct:main.Server	typeref:typename:interface{}
Landing Page	plugged/nord-vim/CHANGELOG.md	/^###### Landing Page$/;"	u	section:0.12.0""Features
Landing Page Docs	plugged/nord-vim/CHANGELOG.md	/^###### Landing Page Docs$/;"	u	section:0.12.0""Features
Language Support	plugged/nord-vim/CHANGELOG.md	/^### Language Support$/;"	S	section:0.4.0""Improvements
Language Support	plugged/nord-vim/CHANGELOG.md	/^### Language Support$/;"	S	section:0.5.0""Improvements
Layout	plugged/fzf/README.md	/^#### Layout$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Layout	plugged/fzf/src/options.go	/^	Layout      layoutType$/;"	m	struct:fzf.Options	typeref:typename:layoutType
LeadingWhitespaces	plugged/fzf/src/util/chars.go	/^func (chars *Chars) LeadingWhitespaces() int {$/;"	f	struct:util.Chars	typeref:typename:int
Left	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Left() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Left	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Left() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Left	plugged/fzf/src/tui/tui.go	/^	Left   bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Left	plugged/fzf/src/tui/tui.go	/^	Left$/;"	c	package:tui
Left	plugged/fzf/src/tui/tui.go	/^	Left() int$/;"	n	interface:tui.Window	typeref:typename:int
LeftClick	plugged/fzf/src/tui/tui.go	/^	LeftClick$/;"	c	package:tui
Len	plugged/fzf/src/result.go	/^func (a ByOrder) Len() int {$/;"	f	type:fzf.ByOrder	typeref:typename:int
Len	plugged/fzf/src/result.go	/^func (a ByRelevance) Len() int {$/;"	f	type:fzf.ByRelevance	typeref:typename:int
Len	plugged/fzf/src/result.go	/^func (a ByRelevanceTac) Len() int {$/;"	f	type:fzf.ByRelevanceTac	typeref:typename:int
Len	plugged/fzf/src/terminal.go	/^func (a byTimeOrder) Len() int {$/;"	f	type:fzf.byTimeOrder	typeref:typename:int
Length	plugged/fzf/src/merger.go	/^func (mg *Merger) Length() int {$/;"	f	struct:fzf.Merger	typeref:typename:int
Length	plugged/fzf/src/util/chars.go	/^func (chars *Chars) Length() int {$/;"	f	struct:util.Chars	typeref:typename:int
Less	plugged/fzf/src/result.go	/^func (a ByOrder) Less(i, j int) bool {$/;"	f	type:fzf.ByOrder	typeref:typename:bool
Less	plugged/fzf/src/result.go	/^func (a ByRelevance) Less(i, j int) bool {$/;"	f	type:fzf.ByRelevance	typeref:typename:bool
Less	plugged/fzf/src/result.go	/^func (a ByRelevanceTac) Less(i, j int) bool {$/;"	f	type:fzf.ByRelevanceTac	typeref:typename:bool
Less	plugged/fzf/src/terminal.go	/^func (a byTimeOrder) Less(i, j int) bool {$/;"	f	type:fzf.byTimeOrder	typeref:typename:bool
License	plugged/fzf.vim/README.md	/^License$/;"	s	chapter:fzf :heart: vim
License	plugged/fzf/BUILD.md	/^License$/;"	s	chapter:Building fzf
License	plugged/vim-fugitive/README.markdown	/^## License$/;"	s	chapter:fugitive.vim
License	plugged/vim-go/README.md	/^## License$/;"	s	chapter:vim-go [![GitHub Actions Status](https://github.com/fatih/vim-go/workflows/test/badge.svg)](https://github.com/fatih/vim-go/actions)
Light256	plugged/fzf/src/tui/tui.go	/^	Light256  *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
LightRenderer	plugged/fzf/src/tui/light.go	/^type LightRenderer struct {$/;"	s	package:tui
LightWindow	plugged/fzf/src/tui/light.go	/^type LightWindow struct {$/;"	s	package:tui
Log	plugged/vim-gitgutter/test/runner.vim	/^function Log(msg)$/;"	f
Log tailing	plugged/fzf/ADVANCED.md	/^Log tailing$/;"	s	chapter:Advanced fzf examples
Lookup	plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Lookup(chunk *Chunk, key string) []Result {$/;"	f	struct:fzf.ChunkCache	typeref:typename:[]Result
Loop	plugged/fzf/src/matcher.go	/^func (m *Matcher) Loop() {$/;"	f	struct:fzf.Matcher
Loop	plugged/fzf/src/terminal.go	/^func (t *Terminal) Loop() {$/;"	f	struct:fzf.Terminal
LoopParseArgs	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:LoopParseArgs$/;"	l
LoopParseArgs	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:LoopParseArgs$/;"	l
MAKEFILE	plugged/fzf/Makefile	/^MAKEFILE       := $(realpath $(lastword $(MAKEFILE_LIST)))$/;"	m
MakeBorderStyle	plugged/fzf/src/tui/tui.go	/^func MakeBorderStyle(shape BorderShape, unicode bool) BorderStyle {$/;"	f	package:tui	typeref:typename:BorderStyle
MakeSlab	plugged/fzf/src/util/slab.go	/^func MakeSlab(size16 int, size32 int) *Slab {$/;"	f	package:util	typeref:typename:*Slab
MakeTransparentBorder	plugged/fzf/src/tui/tui.go	/^func MakeTransparentBorder() BorderStyle {$/;"	f	package:tui	typeref:typename:BorderStyle
Mappings	plugged/fzf.vim/README.md	/^Mappings$/;"	s	chapter:fzf :heart: vim
Margin	plugged/fzf/src/options.go	/^	Margin      [4]sizeSpec$/;"	m	struct:fzf.Options	typeref:typename:[4]sizeSpec
Marker	plugged/fzf/src/options.go	/^	Marker      string$/;"	m	struct:fzf.Options	typeref:typename:string
Match	plugged/fzf/src/pattern.go	/^func (p *Pattern) Match(chunk *Chunk, slab *util.Slab) []Result {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Result
Match	plugged/fzf/src/tui/tui.go	/^	Match        ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
MatchItem	plugged/fzf/src/pattern.go	/^func (p *Pattern) MatchItem(item *Item, withPos bool, slab *util.Slab) (*Result, []Offset, *[]in/;"	f	struct:fzf.Pattern	typeref:typename:(*Result, []Offset, *[]int)
MatchRequest	plugged/fzf/src/matcher.go	/^type MatchRequest struct {$/;"	s	package:fzf
Matcher	plugged/fzf/src/matcher.go	/^type Matcher struct {$/;"	s	package:fzf
Max	plugged/fzf/src/util/util.go	/^func Max(first int, second int) int {$/;"	f	package:util	typeref:typename:int
Max16	plugged/fzf/src/util/util.go	/^func Max16(first int16, second int16) int16 {$/;"	f	package:util	typeref:typename:int16
Max32	plugged/fzf/src/util/util.go	/^func Max32(first int32, second int32) int32 {$/;"	f	package:util	typeref:typename:int32
MaxX	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxX() int      { return 0 }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxX	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxX() int {$/;"	f	struct:tui.LightRenderer	typeref:typename:int
MaxX	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxX() int {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxX	plugged/fzf/src/tui/tui.go	/^	MaxX() int$/;"	n	interface:tui.Renderer	typeref:typename:int
MaxY	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxY() int      { return 0 }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxY	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxY() int {$/;"	f	struct:tui.LightRenderer	typeref:typename:int
MaxY	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxY() int {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxY	plugged/fzf/src/tui/tui.go	/^	MaxY() int$/;"	n	interface:tui.Renderer	typeref:typename:int
Merge	plugged/fzf/src/tui/dummy.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f	type:tui.Attr	typeref:typename:Attr
Merge	plugged/fzf/src/tui/tcell.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f	type:tui.Attr	typeref:typename:Attr
Merge	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Merge(other ColorPair) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
MergeAttr	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) MergeAttr(other ColorPair) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
MergeNonDefault	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) MergeNonDefault(other ColorPair) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
Merger	plugged/fzf/src/merger.go	/^type Merger struct {$/;"	s	package:fzf
Min	plugged/fzf/src/util/util.go	/^func Min(first int, second int) int {$/;"	f	package:util	typeref:typename:int
Min32	plugged/fzf/src/util/util.go	/^func Min32(first int32, second int32) int32 {$/;"	f	package:util	typeref:typename:int32
MinHeight	plugged/fzf/src/options.go	/^	MinHeight   int$/;"	m	struct:fzf.Options	typeref:typename:int
Minor improvements/fixes	plugged/fzf/CHANGELOG.md	/^### Minor improvements\/fixes$/;"	S	section:CHANGELOG""0.10.0
Minor improvements/fixes	plugged/fzf/CHANGELOG.md	/^### Minor improvements\/fixes$/;"	S	section:CHANGELOG""0.10.1
MissingDoc	plugged/vim-go/autoload/go/test-fixtures/lint/src/lint/lint.go	/^func MissingDoc() {$/;"	f	package:lint
MissingFooDoc	plugged/vim-go/autoload/go/test-fixtures/lint/src/foo/foo.go	/^func MissingFooDoc() {$/;"	f	package:foo
Mod	plugged/fzf/src/tui/tui.go	/^	Mod    bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Mouse	plugged/fzf/src/options.go	/^	Mouse       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Mouse	plugged/fzf/src/tui/tui.go	/^	Mouse$/;"	c	package:tui
MouseEvent	plugged/fzf/src/tui/tui.go	/^	MouseEvent *MouseEvent$/;"	m	struct:tui.Event	typeref:typename:*MouseEvent
MouseEvent	plugged/fzf/src/tui/tui.go	/^type MouseEvent struct {$/;"	s	package:tui
Move	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Move(y int, x int) {$/;"	f	struct:tui.LightWindow
Move	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Move(y int, x int) {$/;"	f	struct:tui.TcellWindow
Move	plugged/fzf/src/tui/tui.go	/^	Move(y int, x int)$/;"	n	interface:tui.Window
MoveAndClear	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) MoveAndClear(y int, x int) {$/;"	f	struct:tui.LightWindow
MoveAndClear	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) MoveAndClear(y int, x int) {$/;"	f	struct:tui.TcellWindow
MoveAndClear	plugged/fzf/src/tui/tui.go	/^	MoveAndClear(y int, x int)$/;"	n	interface:tui.Window
Multi	plugged/fzf/src/options.go	/^	Multi       int$/;"	m	struct:fzf.Options	typeref:typename:int
MyHomeAddress	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden.go	/^	MyHomeAddress string   `json:"my_home_address"`$/;"	m	struct:main.Server	typeref:typename:string
MyHomeAddress	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden_options.go	/^	MyHomeAddress string   `json:"my_home_address,omitempty"`$/;"	m	struct:main.Server	typeref:typename:string
MyHomeAddress	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_input.go	/^	MyHomeAddress string$/;"	m	struct:main.Server	typeref:typename:string
MyHomeAddress	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_golden.go	/^	MyHomeAddress string   $/;"	m	struct:main.Server	typeref:typename:string
MyHomeAddress	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_input.go	/^	MyHomeAddress string   `json:"my_home_address"`$/;"	m	struct:main.Server	typeref:typename:string
NAME	plugged/fzf/man/man1/fzf-tmux.1	/^.SH NAME$/;"	s	title:fzf-tmux
NAME	plugged/fzf/man/man1/fzf.1	/^.SH NAME$/;"	s	title:fzf
Name	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden.go	/^	Name          string   `json:"name"`$/;"	m	struct:main.Server	typeref:typename:string
Name	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden_options.go	/^	Name          string   `json:"name,omitempty"`$/;"	m	struct:main.Server	typeref:typename:string
Name	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_input.go	/^	Name          string$/;"	m	struct:main.Server	typeref:typename:string
Name	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_golden.go	/^	Name          string   $/;"	m	struct:main.Server	typeref:typename:string
Name	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_input.go	/^	Name          string   `json:"name"`$/;"	m	struct:main.Server	typeref:typename:string
Neovim	plugged/nord-vim/CHANGELOG.md	/^#### Neovim$/;"	t	subsection:0.6.0""Improvements""UI
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.10.0
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.10.1
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.10
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.11
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.12
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.13
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.3
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.4
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.5
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.6
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.7
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.9
NewAtomicBool	plugged/fzf/src/util/atomicbool.go	/^func NewAtomicBool(initialState bool) *AtomicBool {$/;"	f	package:util	typeref:typename:*AtomicBool
NewChunkCache	plugged/fzf/src/cache.go	/^func NewChunkCache() ChunkCache {$/;"	f	package:fzf	typeref:typename:ChunkCache
NewChunkList	plugged/fzf/src/chunklist.go	/^func NewChunkList(trans ItemBuilder) *ChunkList {$/;"	f	package:fzf	typeref:typename:*ChunkList
NewColorAttr	plugged/fzf/src/tui/tui.go	/^func NewColorAttr() ColorAttr {$/;"	f	package:tui	typeref:typename:ColorAttr
NewColorPair	plugged/fzf/src/tui/tui.go	/^func NewColorPair(fg Color, bg Color, attr Attr) ColorPair {$/;"	f	package:tui	typeref:typename:ColorPair
NewEventBox	plugged/fzf/src/util/eventbox.go	/^func NewEventBox() *EventBox {$/;"	f	package:util	typeref:typename:*EventBox
NewFullscreenRenderer	plugged/fzf/src/tui/tui.go	/^func NewFullscreenRenderer(theme *ColorTheme, forceBlack bool, mouse bool) Renderer {$/;"	f	package:tui	typeref:typename:Renderer
NewHistory	plugged/fzf/src/history.go	/^func NewHistory(path string, maxSize int) (*History, error) {$/;"	f	package:fzf	typeref:typename:(*History, error)
NewLightRenderer	plugged/fzf/src/tui/light.go	/^func NewLightRenderer(theme *ColorTheme, forceBlack bool, mouse bool, tabstop int, clearOnExit b/;"	f	package:tui	typeref:typename:Renderer
NewMatcher	plugged/fzf/src/matcher.go	/^func NewMatcher(patternBuilder func([]rune) *Pattern,$/;"	f	package:fzf	typeref:typename:*Matcher
NewMerger	plugged/fzf/src/merger.go	/^func NewMerger(pattern *Pattern, lists [][]Result, sorted bool, tac bool) *Merger {$/;"	f	package:fzf	typeref:typename:*Merger
NewReader	plugged/fzf/src/reader.go	/^func NewReader(pusher func([]byte) bool, eventBox *util.EventBox, delimNil bool, wait bool) *Rea/;"	f	package:fzf	typeref:typename:*Reader
NewTerminal	plugged/fzf/src/terminal.go	/^func NewTerminal(opts *Options, eventBox *util.EventBox) *Terminal {$/;"	f	package:fzf	typeref:typename:*Terminal
NewWindow	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, preview bool, b/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Window
NewWindow	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) NewWindow(top int, left int, width int, height int, preview bool, border/;"	f	struct:tui.LightRenderer	typeref:typename:Window
NewWindow	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, preview bool, b/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Window
NewWindow	plugged/fzf/src/tui/tui.go	/^	NewWindow(top int, left int, width int, height int, preview bool, borderStyle BorderStyle) Wind/;"	n	interface:tui.Renderer	typeref:typename:Window
NoColorTheme	plugged/fzf/src/tui/tui.go	/^func NoColorTheme() *ColorTheme {$/;"	f	package:tui	typeref:typename:*ColorTheme
NordPalette	plugged/nord-vim/colors/nord.vim	/^function! NordPalette() abort$/;"	f
Normalize	plugged/fzf/src/options.go	/^	Normalize   bool$/;"	m	struct:fzf.Options	typeref:typename:bool
NormalizeRunes	plugged/fzf/src/algo/normalize.go	/^func NormalizeRunes(runes []rune) []rune {$/;"	f	package:algo	typeref:typename:[]rune
Nth	plugged/fzf/src/options.go	/^	Nth         []Range$/;"	m	struct:fzf.Options	typeref:typename:[]Range
OPTIONS	plugged/fzf/man/man1/fzf.1	/^.SH OPTIONS$/;"	s	title:fzf
Offset	plugged/fzf/src/result.go	/^type Offset [2]int32$/;"	t	package:fzf	typeref:typename:[2]int32
Once	plugged/fzf/src/util/util.go	/^func Once(nextResponse bool) func() bool {$/;"	f	package:util	typeref:typename:func() bool
Options	plugged/fzf/README.md	/^#### Options$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Options	plugged/fzf/src/options.go	/^type Options struct {$/;"	s	package:fzf
PAUSE_BEFORE_EXIT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PAUSE_BEFORE_EXIT=1$/;"	v
PAUSE_BEFORE_EXIT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PAUSE_BEFORE_EXIT=0$/;"	v
POST_PROCESS_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set POST_PROCESS_CMD=%~2$/;"	v
POST_PROCESS_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set POST_PROCESS_CMD=$/;"	v
PROJECT_ROOT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PROJECT_ROOT=%~2$/;"	v
PROJECT_ROOT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PROJECT_ROOT=$/;"	v
PROJ_ROOT	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set PROJ_ROOT=%~2$/;"	v
PS1	plugged/fzf/test/test_go.rb	/^PS1= PROMPT_COMMAND= HISTFILE= HISTSIZE=100$/;"	C
Padding	plugged/fzf/src/options.go	/^	Padding     [4]sizeSpec$/;"	m	struct:fzf.Options	typeref:typename:[4]sizeSpec
Parse	plugged/vim-go/test/parse.go	/^func Parse(r io.Reader) (*Node, error) {$/;"	f	package:html	typeref:typename:(*Node, error)
ParseArgs	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:ParseArgs$/;"	l
ParseArgs	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:ParseArgs$/;"	l
ParseFragment	plugged/vim-go/test/parse.go	/^func ParseFragment(r io.Reader, context *Node) ([]*Node, error) {$/;"	f	package:html	typeref:typename:([]*Node, error)
ParseOptions	plugged/fzf/src/options.go	/^func ParseOptions() *Options {$/;"	f	package:fzf	typeref:typename:*Options
ParseRange	plugged/fzf/src/tokenizer.go	/^func ParseRange(str *string) (Range, bool) {$/;"	f	package:fzf	typeref:typename:(Range, bool)
PassMerger	plugged/fzf/src/merger.go	/^func PassMerger(chunks *[]*Chunk, tac bool) *Merger {$/;"	f	package:fzf	typeref:typename:*Merger
Pattern	plugged/fzf/src/pattern.go	/^type Pattern struct {$/;"	s	package:fzf
Pause	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Pause(bool)        {}$/;"	f	unknown:tui.FullscreenRenderer
Pause	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Pause(clear bool) {$/;"	f	struct:tui.LightRenderer
Pause	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Pause(clear bool) {$/;"	f	unknown:tui.FullscreenRenderer
Pause	plugged/fzf/src/tui/tui.go	/^	Pause(clear bool)$/;"	n	interface:tui.Renderer
Peek	plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Peek(event EventType) bool {$/;"	f	struct:util.EventBox	typeref:typename:bool
Performance	plugged/fzf/README.md	/^### Performance$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
PgDn	plugged/fzf/src/tui/tui.go	/^	PgDn$/;"	c	package:tui
PgUp	plugged/fzf/src/tui/tui.go	/^	PgUp$/;"	c	package:tui
Phony	plugged/fzf/src/options.go	/^	Phony       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Plug	autoload/plug.vim	/^  command! -nargs=+ -bar Plug call plug#(<args>)$/;"	c
PlugClean	autoload/plug.vim	/^  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)$/;"	c
PlugDiff	autoload/plug.vim	/^  command! -nargs=0 -bar PlugDiff    call s:diff()$/;"	c
PlugInstall	autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, /;"	c
PlugLOD	autoload/plug.vim	/^    augroup PlugLOD$/;"	a
PlugSnapshot	autoload/plug.vim	/^  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)$/;"	c
PlugStatus	autoload/plug.vim	/^  command! -nargs=0 -bar PlugStatus  call s:status()$/;"	c
PlugUpdate	autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [/;"	c
PlugUpgrade	autoload/plug.vim	/^  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif$/;"	c
Plugin Support	plugged/nord-vim/CHANGELOG.md	/^### Plugin Support$/;"	S	section:0.3.0""Improvements
Plugin Support	plugged/nord-vim/CHANGELOG.md	/^### Plugin Support$/;"	S	section:0.4.0""Improvements
Plugin Support	plugged/nord-vim/CHANGELOG.md	/^### Plugin Support$/;"	S	section:0.6.0""Features
Plugin Support	plugged/nord-vim/CHANGELOG.md	/^### Plugin Support$/;"	S	section:0.7.0""Features
Plugin Support	plugged/nord-vim/CHANGELOG.md	/^### Plugin Support$/;"	S	section:0.8.0""Features
Plugin Support	plugged/nord-vim/CHANGELOG.md	/^#### Plugin Support$/;"	t	subsection:0.11.0""Features""Syntax
Plugin Support	plugged/nord-vim/CHANGELOG.md	/^#### Plugin Support$/;"	t	subsection:0.11.0""Features""UI
Plugin Support	plugged/nord-vim/CHANGELOG.md	/^#### Plugin Support$/;"	t	subsection:0.11.0""Improvements""UI
Plugin Support	plugged/nord-vim/CHANGELOG.md	/^#### Plugin Support$/;"	t	subsection:0.9.0""Features""Syntax
Plugin Support	plugged/nord-vim/CHANGELOG.md	/^#### Plugin Support$/;"	t	subsection:0.9.0""Features""UI
Pointer	plugged/fzf/src/options.go	/^	Pointer     string$/;"	m	struct:fzf.Options	typeref:typename:string
Popup window support	plugged/fzf/ADVANCED.md	/^#### Popup window support$/;"	t	subsection:Advanced fzf examples""Screen Layout""`fzf-tmux`
Pragma	plugged/nord-vim/CHANGELOG.md	/^#### Pragma$/;"	t	subsection:0.11.0""Features""Syntax
Pre-Processor	plugged/nord-vim/CHANGELOG.md	/^#### Pre-Processor$/;"	t	subsection:0.11.0""Features""Syntax
PrefixMatch	plugged/fzf/src/algo/algo.go	/^func PrefixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []r/;"	f	package:algo	typeref:typename:(Result, *[]int)
Prepend	plugged/fzf/src/util/chars.go	/^func (chars *Chars) Prepend(prefix string) {$/;"	f	struct:util.Chars
Prerequisites	plugged/fzf/BUILD.md	/^### Prerequisites$/;"	S	section:Building fzf""Build instructions
Preview	plugged/fzf/src/options.go	/^	Preview     previewOpts$/;"	m	struct:fzf.Options	typeref:typename:previewOpts
Preview window	plugged/fzf.vim/README.md	/^#### Preview window$/;"	t	subsection:fzf :heart: vim""Customization""Global options
Preview window	plugged/fzf/README.md	/^### Preview window$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
PreviewBg	plugged/fzf/src/tui/tui.go	/^	PreviewBg    ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
PreviewFg	plugged/fzf/src/tui/tui.go	/^	PreviewFg    ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Print	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Print(text string) {$/;"	f	struct:tui.LightWindow
Print	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Print(text string) {$/;"	f	struct:tui.TcellWindow
Print	plugged/fzf/src/tui/tui.go	/^	Print(text string)$/;"	n	interface:tui.Window
PrintQuery	plugged/fzf/src/options.go	/^	PrintQuery  bool$/;"	m	struct:fzf.Options	typeref:typename:bool
PrintSep	plugged/fzf/src/options.go	/^	PrintSep    string$/;"	m	struct:fzf.Options	typeref:typename:string
Printer	plugged/fzf/src/options.go	/^	Printer     func(string)$/;"	m	struct:fzf.Options	typeref:typename:func(string)
Problem / Steps to reproduce	plugged/fzf/.github/ISSUE_TEMPLATE.md	/^## Problem \/ Steps to reproduce$/;"	s
Process IDs	plugged/fzf/README.md	/^#### Process IDs$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Project Initialization	plugged/nord-vim/CHANGELOG.md	/^# Project Initialization$/;"	c
Prompt	plugged/fzf/src/options.go	/^	Prompt      string$/;"	m	struct:fzf.Options	typeref:typename:string
Prompt	plugged/fzf/src/tui/tui.go	/^	Prompt       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Pros	plugged/fzf/README.md	/^Pros$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Protect	plugged/fzf/src/protector/protector.go	/^func Protect() {$/;"	f	package:protector
Protect	plugged/fzf/src/protector/protector_openbsd.go	/^func Protect() {$/;"	f	package:protector
Push	plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) Push(data []byte) bool {$/;"	f	struct:fzf.ChunkList	typeref:typename:bool
Pushing	plugged/vim-gutentags/CONTRIBUTING.md	/^## Pushing$/;"	s	chapter:Contributing
Query	plugged/fzf/src/options.go	/^	Query       string$/;"	m	struct:fzf.Options	typeref:typename:string
Quick Start	plugged/nord-vim/README.md	/^### Quick Start$/;"	S	section:Getting Started
R	autoload/plug.vim	/^  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>$/;"	m
REVISION	plugged/fzf/Makefile	/^REVISION       := $(FZF_REVISION)$/;"	m
REVISION	plugged/fzf/Makefile	/^REVISION       := $(shell git log -n 1 --pretty=format:%h -- $(SOURCES) 2> \/dev\/null)$/;"	m
ROOT_DIR	plugged/fzf/Makefile	/^ROOT_DIR       := $(shell dirname $(MAKEFILE))$/;"	m
Random	plugged/vim-gitgutter/test/runner.vim	/^function Random(min, max)$/;"	f
Range	plugged/fzf/src/tokenizer.go	/^type Range struct {$/;"	s	package:fzf
Rationale	plugged/fzf.vim/README.md	/^Rationale$/;"	s	chapter:fzf :heart: vim
Read	plugged/fzf/src/util/util_unix.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f	package:util	typeref:typename:(int, error)
Read	plugged/fzf/src/util/util_windows.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f	package:util	typeref:typename:(int, error)
ReadSource	plugged/fzf/src/reader.go	/^func (r *Reader) ReadSource() {$/;"	f	struct:fzf.Reader
ReadZero	plugged/fzf/src/options.go	/^	ReadZero    bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Reader	plugged/fzf/src/reader.go	/^type Reader struct {$/;"	s	package:fzf
Reduced initial memory footprint (#151)	plugged/fzf/CHANGELOG.md	/^#### Reduced initial memory footprint (#151)$/;"	t	subsection:CHANGELOG""0.9.5""Improvements
Reducer example	plugged/fzf.vim/README.md	/^### Reducer example$/;"	S	section:fzf :heart: vim""Custom completion
Refresh	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Refresh()          {}$/;"	f	unknown:tui.FullscreenRenderer
Refresh	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Refresh() {$/;"	f	struct:tui.LightRenderer
Refresh	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Refresh() {$/;"	f	struct:tui.LightWindow
Refresh	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Refresh() {$/;"	f	unknown:tui.FullscreenRenderer
Refresh	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Refresh() {$/;"	f	struct:tui.TcellWindow
Refresh	plugged/fzf/src/tui/tui.go	/^	Refresh()$/;"	n	interface:tui.Renderer
Refresh	plugged/fzf/src/tui/tui.go	/^	Refresh()$/;"	n	interface:tui.Window
RefreshWindows	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {}$/;"	f	unknown:tui.FullscreenRenderer
RefreshWindows	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) RefreshWindows(windows []Window) {$/;"	f	struct:tui.LightRenderer
RefreshWindows	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {$/;"	f	unknown:tui.FullscreenRenderer
RefreshWindows	plugged/fzf/src/tui/tui.go	/^	RefreshWindows(windows []Window)$/;"	n	interface:tui.Renderer
Related Projects	plugged/vim-gutentags/README.md	/^# Related Projects$/;"	c
Related projects	plugged/fzf/README.md	/^Related projects$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Reloading the candidate list	plugged/fzf/README.md	/^### Reloading the candidate list$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
Renderer	plugged/fzf/src/tui/tui.go	/^type Renderer interface {$/;"	i	package:tui
Reset	plugged/fzf/src/matcher.go	/^func (m *Matcher) Reset(chunks []*Chunk, patternRunes []rune, cancel bool, final bool, sort bool/;"	f	struct:fzf.Matcher
Resize	plugged/fzf/src/tui/tui.go	/^	Resize$/;"	c	package:tui
Respecting `.gitignore`	plugged/fzf/README.md	/^#### Respecting `.gitignore`$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Tips
Result	plugged/fzf/src/algo/algo.go	/^type Result struct {$/;"	s	package:algo
Result	plugged/fzf/src/result.go	/^type Result struct {$/;"	s	package:fzf
Resume	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Resume(bool, bool) {}$/;"	f	unknown:tui.FullscreenRenderer
Resume	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Resume(clear bool, sigcont bool) {$/;"	f	struct:tui.LightRenderer
Resume	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Resume(clear bool, sigcont bool) {$/;"	f	unknown:tui.FullscreenRenderer
Resume	plugged/fzf/src/tui/tui.go	/^	Resume(clear bool, sigcont bool)$/;"	n	interface:tui.Renderer
Reverse	plugged/fzf/src/tui/dummy.go	/^	Reverse   = Attr(1 << 6)$/;"	c	package:tui
Reverse	plugged/fzf/src/tui/tcell.go	/^	Reverse        = Attr(tcell.AttrReverse)$/;"	c	package:tui
Right	plugged/fzf/src/tui/tui.go	/^	Right$/;"	c	package:tui
RightClick	plugged/fzf/src/tui/tui.go	/^	RightClick$/;"	c	package:tui
Ripgrep integration	plugged/fzf/ADVANCED.md	/^Ripgrep integration$/;"	s	chapter:Advanced fzf examples
Run	plugged/fzf/src/core.go	/^func Run(opts *Options, version string, revision string) {$/;"	f	package:fzf
RunTest	plugged/vim-gitgutter/test/runner.vim	/^function RunTest(test)$/;"	f
Rune	plugged/fzf/src/tui/tui.go	/^	Rune EventType = iota$/;"	c	package:tui	typeref:type:EventType
RunesToChars	plugged/fzf/src/util/chars.go	/^func RunesToChars(runes []rune) Chars {$/;"	f	package:util	typeref:typename:Chars
RunesWidth	plugged/fzf/src/util/util.go	/^func RunesWidth(runes []rune, prefixWidth int, tabstop int, limit int) (int, int) {$/;"	f	package:util	typeref:typename:(int, int)
S	autoload/plug.vim	/^  nnoremap <silent> <buffer> S  :PlugStatus<cr>$/;"	m
S	plugged/fzf/src/tui/tui.go	/^	S      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
SDown	plugged/fzf/src/tui/tui.go	/^	SDown$/;"	c	package:tui
SEE	plugged/fzf/man/man1/fzf.1	/^.SH SEE ALSO$/;"	s	title:fzf
SHELL	plugged/fzf/Makefile	/^SHELL          := bash$/;"	m
SLeft	plugged/fzf/src/tui/tui.go	/^	SLeft$/;"	c	package:tui
SOURCES	plugged/fzf/Makefile	/^SOURCES        := $(wildcard *.go src\/*.go src\/*\/*.go) $(MAKEFILE)$/;"	m
SRight	plugged/fzf/src/tui/tui.go	/^	SRight$/;"	c	package:tui
SUp	plugged/fzf/src/tui/tui.go	/^	SUp$/;"	c	package:tui
SYNOPSIS	plugged/fzf/man/man1/fzf-tmux.1	/^.SH SYNOPSIS$/;"	s	title:fzf-tmux
SYNOPSIS	plugged/fzf/man/man1/fzf.1	/^.SH SYNOPSIS$/;"	s	title:fzf
Score	plugged/fzf/src/algo/algo.go	/^	Score int$/;"	m	struct:algo.Result	typeref:typename:int
Screen Layout	plugged/fzf/ADVANCED.md	/^Screen Layout$/;"	s	chapter:Advanced fzf examples
Screencasts	plugged/vim-fugitive/README.markdown	/^## Screencasts$/;"	s	chapter:fugitive.vim
ScrollOff	plugged/fzf/src/options.go	/^	ScrollOff   int$/;"	m	struct:fzf.Options	typeref:typename:int
Search	plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Search(chunk *Chunk, key string) []Result {$/;"	f	struct:fzf.ChunkCache	typeref:typename:[]Result
Search syntax	plugged/fzf/README.md	/^#### Search syntax$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Select1	plugged/fzf/src/options.go	/^	Select1     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Selected	plugged/fzf/src/tui/tui.go	/^	Selected     ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Self-Promotion	plugged/vim-fugitive/README.markdown	/^## Self-Promotion$/;"	s	chapter:fugitive.vim
Server	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden.go	/^type Server struct {$/;"	s	package:main
Server	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden_options.go	/^type Server struct {$/;"	s	package:main
Server	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_input.go	/^type Server struct {$/;"	s	package:main
Server	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_golden.go	/^type Server struct {$/;"	s	package:main
Server	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_input.go	/^type Server struct {$/;"	s	package:main
Set	plugged/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Set(newState bool) bool {$/;"	f	struct:util.AtomicBool	typeref:typename:bool
Set	plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Set(event EventType, value interface{}) {$/;"	f	struct:util.EventBox
SetNonblock	plugged/fzf/src/util/util_unix.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f	package:util
SetNonblock	plugged/fzf/src/util/util_windows.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f	package:util
SetUp	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function SetUp()$/;"	f
Settings	plugged/fzf/README.md	/^#### Settings$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Shell	plugged/fzf/test/test_go.rb	/^class Shell$/;"	c
ShowUsage	plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	plugged/vim-gutentags/plat/unix/update_tags.sh	/^ShowUsage() {$/;"	f
Shuffle	plugged/vim-gitgutter/test/runner.vim	/^function Shuffle(list)$/;"	f
Slab	plugged/fzf/src/util/slab.go	/^type Slab struct {$/;"	s	package:util
Snapshot	plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) Snapshot() ([]*Chunk, int) {$/;"	f	struct:fzf.ChunkList	typeref:typename:([]*Chunk, int)
Sort	plugged/fzf/src/options.go	/^	Sort        int$/;"	m	struct:fzf.Options	typeref:typename:int
Source	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^class Source(Base):$/;"	c
Spinner	plugged/fzf/src/tui/tui.go	/^	Spinner      ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Start	plugged/fzf/src/algo/algo.go	/^	Start int$/;"	m	struct:algo.Result	typeref:typename:int
Start Vim with a minimal configuration	plugged/fzf.vim/.github/ISSUE_TEMPLATE.md	/^Start Vim with a minimal configuration$/;"	c
Starting fzf in a popup window	plugged/fzf/README-VIM.md	/^### Starting fzf in a popup window$/;"	S	section:FZF Vim integration""Tips
Status line of terminal buffer	plugged/fzf.vim/README.md	/^Status line of terminal buffer$/;"	s	chapter:fzf :heart: vim
String	plugged/fzf/src/pattern.go	/^func (t term) String() string {$/;"	f	struct:fzf.term	typeref:typename:string
String	plugged/fzf/src/terminal_test.go	/^func (item *Item) String() string {$/;"	f	unknown:fzf.Item	typeref:typename:string
String	plugged/fzf/src/tokenizer.go	/^func (d Delimiter) String() string {$/;"	f	struct:fzf.Delimiter	typeref:typename:string
String	plugged/fzf/src/tokenizer.go	/^func (t Token) String() string {$/;"	f	struct:fzf.Token	typeref:typename:string
String	plugged/fzf/src/util/chars.go	/^func (chars *Chars) String() string {$/;"	f	struct:util.Chars	typeref:typename:string
Style	plugged/fzf/src/tui/tcell.go	/^func (c Color) Style() tcell.Color {$/;"	f	unknown:tui.Color	typeref:typename:tcell.Color
SubDomains	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden.go	/^	SubDomains    []string `json:"sub_domains"`$/;"	m	struct:main.Server	typeref:typename:[]string
SubDomains	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden_options.go	/^	SubDomains    []string `json:"sub_domains,omitempty"`$/;"	m	struct:main.Server	typeref:typename:[]string
SubDomains	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_input.go	/^	SubDomains    []string$/;"	m	struct:main.Server	typeref:typename:[]string
SubDomains	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_golden.go	/^	SubDomains    []string $/;"	m	struct:main.Server	typeref:typename:[]string
SubDomains	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_input.go	/^	SubDomains    []string `json:"sub_domains"`$/;"	m	struct:main.Server	typeref:typename:[]string
SuffixMatch	plugged/fzf/src/algo/algo.go	/^func SuffixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []r/;"	f	package:algo	typeref:typename:(Result, *[]int)
Summary	plugged/fzf/README-VIM.md	/^Summary$/;"	s	chapter:FZF Vim integration
Supported commands	plugged/fzf/README.md	/^#### Supported commands$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Swap	plugged/fzf/src/result.go	/^func (a ByOrder) Swap(i, j int) {$/;"	f	type:fzf.ByOrder
Swap	plugged/fzf/src/result.go	/^func (a ByRelevance) Swap(i, j int) {$/;"	f	type:fzf.ByRelevance
Swap	plugged/fzf/src/result.go	/^func (a ByRelevanceTac) Swap(i, j int) {$/;"	f	type:fzf.ByRelevanceTac
Swap	plugged/fzf/src/terminal.go	/^func (a byTimeOrder) Swap(i, j int) {$/;"	f	type:fzf.byTimeOrder
Switching to fzf-only search mode	plugged/fzf/ADVANCED.md	/^### Switching to fzf-only search mode$/;"	S	section:Advanced fzf examples""Ripgrep integration
Sync	plugged/fzf/src/options.go	/^	Sync        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Syntax	plugged/nord-vim/CHANGELOG.md	/^### Syntax$/;"	S	section:0.11.0""Features
Syntax	plugged/nord-vim/CHANGELOG.md	/^### Syntax$/;"	S	section:0.11.0""Improvements
Syntax	plugged/nord-vim/CHANGELOG.md	/^### Syntax$/;"	S	section:0.15.0""Features
Syntax	plugged/nord-vim/CHANGELOG.md	/^### Syntax$/;"	S	section:0.16.0""Features
Syntax	plugged/nord-vim/CHANGELOG.md	/^### Syntax$/;"	S	section:0.17.0""Features
Syntax	plugged/nord-vim/CHANGELOG.md	/^### Syntax$/;"	S	section:0.18.0""Features
Syntax	plugged/nord-vim/CHANGELOG.md	/^### Syntax$/;"	S	section:0.18.0""Improvements
Syntax	plugged/nord-vim/CHANGELOG.md	/^### Syntax$/;"	S	section:0.7.0""Improvements
Syntax	plugged/nord-vim/CHANGELOG.md	/^### Syntax$/;"	S	section:0.9.0""Features
Syntax	plugged/nord-vim/CHANGELOG.md	/^### Syntax$/;"	S	section:0.9.0""Improvements
Syntax	plugged/nord-vim/CHANGELOG.md	/^#### Syntax$/;"	t	subsection:0.7.0""Features""Plugin Support
T	plugged/vim-go/autoload/go/test-fixtures/complete/complete.go	/^type T struct {$/;"	s	package:complete
TAGS_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set TAGS_FILE=%~2$/;"	v
TAGS_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set TAGS_FILE=tags$/;"	v
TEMPLATE	plugged/fzf/test/test_go.rb	/^TEMPLATE = DATA.read$/;"	C
TEMPNAME	plugged/fzf/test/test_go.rb	/^  TEMPNAME = '\/tmp\/output'$/;"	C	class:TestBase
TEST_FLAGS	plugged/vim-go/Makefile	/^TEST_FLAGS ?=$/;"	m
Tab	plugged/fzf/src/tui/tui.go	/^	Tab$/;"	c	package:tui
Table of Contents	plugged/fzf/README.md	/^Table of Contents$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Tabstop	plugged/fzf/src/options.go	/^	Tabstop     int$/;"	m	struct:fzf.Options	typeref:typename:int
Tac	plugged/fzf/src/options.go	/^	Tac         bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Tasks	plugged/nord-vim/CHANGELOG.md	/^## Tasks$/;"	s	chapter:0.7.0
TcellWindow	plugged/fzf/src/tui/tcell.go	/^type TcellWindow struct {$/;"	s	package:tui
TearDown	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function TearDown()$/;"	f
Terminal	plugged/fzf/src/terminal.go	/^type Terminal struct {$/;"	s	package:fzf
TestAddTags	plugged/vim-go/autoload/go/tags_test.vim	/^func! TestAddTags() abort$/;"	f
TestAddTags_AddOptions	plugged/vim-go/autoload/go/tags_test.vim	/^func! TestAddTags_AddOptions() abort$/;"	f
TestAddTags_WithOptions	plugged/vim-go/autoload/go/tags_test.vim	/^func! TestAddTags_WithOptions() abort$/;"	f
TestAdditiveExpect	plugged/fzf/src/options_test.go	/^func TestAdditiveExpect(t *testing.T) {$/;"	f	package:fzf
TestAnsiCodeStringConversion	plugged/fzf/src/ansi_test.go	/^func TestAnsiCodeStringConversion(t *testing.T) {$/;"	f	package:fzf
TestAtomicBool	plugged/fzf/src/util/atomicbool_test.go	/^func TestAtomicBool(t *testing.T) {$/;"	f	package:util
TestBase	plugged/fzf/test/test_go.rb	/^class TestBase < Minitest::Test$/;"	c
TestBash	plugged/fzf/test/test_go.rb	/^class TestBash < TestBase$/;"	c	mixin:include:TestShell,include:CompletionTest
TestBind	plugged/fzf/src/options_test.go	/^func TestBind(t *testing.T) {$/;"	f	package:fzf
TestCacheKey	plugged/fzf/src/pattern_test.go	/^func TestCacheKey(t *testing.T) {$/;"	f	package:fzf
TestCacheable	plugged/fzf/src/pattern_test.go	/^func TestCacheable(t *testing.T) {$/;"	f	package:fzf
TestCaseSensitivity	plugged/fzf/src/pattern_test.go	/^func TestCaseSensitivity(t *testing.T) {$/;"	f	package:fzf
TestCharsLength	plugged/fzf/src/util/chars_test.go	/^func TestCharsLength(t *testing.T) {$/;"	f	package:util
TestCharsToString	plugged/fzf/src/util/chars_test.go	/^func TestCharsToString(t *testing.T) {$/;"	f	package:util
TestChunkCache	plugged/fzf/src/cache_test.go	/^func TestChunkCache(t *testing.T) {$/;"	f	package:fzf
TestChunkList	plugged/fzf/src/chunklist_test.go	/^func TestChunkList(t *testing.T) {$/;"	f	package:fzf
TestColorOffset	plugged/fzf/src/result_test.go	/^func TestColorOffset(t *testing.T) {$/;"	f	package:fzf
TestColorSpec	plugged/fzf/src/options_test.go	/^func TestColorSpec(t *testing.T) {$/;"	f	package:fzf
TestConcurrentPanic	plugged/vim-go/autoload/go/test-fixtures/test/src/play/play_test.go	/^func TestConcurrentPanic(t *testing.T) {$/;"	f	package:play
TestContrain	plugged/fzf/src/util/util_test.go	/^func TestContrain(t *testing.T) {$/;"	f	package:util
TestDefaultCtrlNP	plugged/fzf/src/options_test.go	/^func TestDefaultCtrlNP(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegex	plugged/fzf/src/options_test.go	/^func TestDelimiterRegex(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegexRegex	plugged/fzf/src/options_test.go	/^func TestDelimiterRegexRegex(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegexString	plugged/fzf/src/options_test.go	/^func TestDelimiterRegexString(t *testing.T) {$/;"	f	package:fzf
TestEmptyMerger	plugged/fzf/src/merger_test.go	/^func TestEmptyMerger(t *testing.T) {$/;"	f	package:fzf
TestEmptyPattern	plugged/fzf/src/algo/algo_test.go	/^func TestEmptyPattern(t *testing.T) {$/;"	f	package:algo
TestEqual	plugged/fzf/src/pattern_test.go	/^func TestEqual(t *testing.T) {$/;"	f	package:fzf
TestEventBox	plugged/fzf/src/util/eventbox_test.go	/^func TestEventBox(t *testing.T) {$/;"	f	package:util
TestExact	plugged/fzf/src/pattern_test.go	/^func TestExact(t *testing.T) {$/;"	f	package:fzf
TestExactMatchNaive	plugged/fzf/src/algo/algo_test.go	/^func TestExactMatchNaive(t *testing.T) {$/;"	f	package:algo
TestExactMatchNaiveBackward	plugged/fzf/src/algo/algo_test.go	/^func TestExactMatchNaiveBackward(t *testing.T) {$/;"	f	package:algo
TestExtractColor	plugged/fzf/src/ansi_test.go	/^func TestExtractColor(t *testing.T) {$/;"	f	package:fzf
TestFish	plugged/fzf/test/test_go.rb	/^class TestFish < TestBase$/;"	c	mixin:include:TestShell
TestFoo	plugged/vim-go/autoload/go/test-fixtures/lint/src/errcheck/errcheck_test.go	/^func TestFoo(t *testing.T) {$/;"	f	package:errcheck
TestFuzzyMatch	plugged/fzf/src/algo/algo_test.go	/^func TestFuzzyMatch(t *testing.T) {$/;"	f	package:algo
TestFuzzyMatchBackward	plugged/fzf/src/algo/algo_test.go	/^func TestFuzzyMatchBackward(t *testing.T) {$/;"	f	package:algo
TestGetCharEventKey	plugged/fzf/src/tui/tcell_test.go	/^func TestGetCharEventKey(t *testing.T) {$/;"	f	package:tui
TestGoFZF	plugged/fzf/test/test_go.rb	/^class TestGoFZF < TestBase$/;"	c
TestHelloWorld	plugged/vim-go/autoload/go/test-fixtures/test/src/showname/showname_test.go	/^func TestHelloWorld(t *testing.T) {$/;"	f	package:main
TestHelloWorld	plugged/vim-go/templates/hello_world_test.go	/^func TestHelloWorld(t *testing.T) {$/;"	f	package:main
TestHexToColor	plugged/fzf/src/tui/tui_test.go	/^func TestHexToColor(t *testing.T) {$/;"	f	package:tui
TestHistory	plugged/fzf/src/history_test.go	/^func TestHistory(t *testing.T) {$/;"	f	package:fzf
TestIrrelevantNth	plugged/fzf/src/options_test.go	/^func TestIrrelevantNth(t *testing.T) {$/;"	f	package:fzf
TestLogger	plugged/vim-go/autoload/go/test-fixtures/fmt/src/imports/vendor/gh.com/gi/foo-logging/logger.go	/^type TestLogger struct {$/;"	s	package:logging
TestLongString	plugged/fzf/src/algo/algo_test.go	/^func TestLongString(t *testing.T) {$/;"	f	package:algo
TestMax	plugged/fzf/src/util/util_test.go	/^func TestMax(t *testing.T) {$/;"	f	package:util
TestMergerSorted	plugged/fzf/src/merger_test.go	/^func TestMergerSorted(t *testing.T) {$/;"	f	package:fzf
TestMergerUnsorted	plugged/fzf/src/merger_test.go	/^func TestMergerUnsorted(t *testing.T) {$/;"	f	package:fzf
TestMocked	plugged/vim-go/autoload/go/test-fixtures/test/src/play/play_test.go	/^func TestMocked(t *testing.T) {$/;"	f	package:play
TestMultiline	plugged/vim-go/autoload/go/test-fixtures/test/src/play/play_test.go	/^func TestMultiline(t *testing.T) {$/;"	f	package:play
TestNextAnsiEscapeSequence	plugged/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence(t *testing.T) {$/;"	f	package:fzf
TestNextAnsiEscapeSequence_Fuzz_Modified	plugged/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence_Fuzz_Modified(t *testing.T) {$/;"	f	package:fzf
TestNextAnsiEscapeSequence_Fuzz_Random	plugged/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence_Fuzz_Random(t *testing.T) {$/;"	f	package:fzf
TestNormalize	plugged/fzf/src/algo/algo_test.go	/^func TestNormalize(t *testing.T) {$/;"	f	package:algo
TestOK	plugged/vim-go/autoload/go/test-fixtures/test/src/play/play_test.go	/^func TestOK(t *testing.T) {$/;"	f	package:play
TestOffsetSort	plugged/fzf/src/result_test.go	/^func TestOffsetSort(t *testing.T) {$/;"	f	package:fzf
TestOnce	plugged/fzf/src/util/util_test.go	/^func TestOnce(t *testing.T) {$/;"	f	package:util
TestOrigTextAndTransformed	plugged/fzf/src/pattern_test.go	/^func TestOrigTextAndTransformed(t *testing.T) {$/;"	f	package:fzf
TestPanic	plugged/vim-go/autoload/go/test-fixtures/test/src/play/play_test.go	/^func TestPanic(t *testing.T) {$/;"	f	package:play
TestParseAnsiCode	plugged/fzf/src/ansi_test.go	/^func TestParseAnsiCode(t *testing.T) {$/;"	f	package:fzf
TestParseKeys	plugged/fzf/src/options_test.go	/^func TestParseKeys(t *testing.T) {$/;"	f	package:fzf
TestParseKeysWithComma	plugged/fzf/src/options_test.go	/^func TestParseKeysWithComma(t *testing.T) {$/;"	f	package:fzf
TestParsePlaceholder	plugged/fzf/src/terminal_test.go	/^func TestParsePlaceholder(t *testing.T) {$/;"	f	package:fzf
TestParseRange	plugged/fzf/src/tokenizer_test.go	/^func TestParseRange(t *testing.T) {$/;"	f	package:fzf
TestParseTermsEmpty	plugged/fzf/src/pattern_test.go	/^func TestParseTermsEmpty(t *testing.T) {$/;"	f	package:fzf
TestParseTermsExtended	plugged/fzf/src/pattern_test.go	/^func TestParseTermsExtended(t *testing.T) {$/;"	f	package:fzf
TestParseTermsExtendedExact	plugged/fzf/src/pattern_test.go	/^func TestParseTermsExtendedExact(t *testing.T) {$/;"	f	package:fzf
TestPowershellCommands	plugged/fzf/src/terminal_test.go	/^func TestPowershellCommands(t *testing.T) {$/;"	f	package:fzf
TestPrefixMatch	plugged/fzf/src/algo/algo_test.go	/^func TestPrefixMatch(t *testing.T) {$/;"	f	package:algo
TestPreviewOpts	plugged/fzf/src/options_test.go	/^func TestPreviewOpts(t *testing.T) {$/;"	f	package:fzf
TestQuoteEntry	plugged/fzf/src/terminal_test.go	/^func TestQuoteEntry(t *testing.T) {$/;"	f	package:fzf
TestRankComparison	plugged/fzf/src/result_test.go	/^func TestRankComparison(t *testing.T) {$/;"	f	package:fzf
TestReadFromCommand	plugged/fzf/src/reader_test.go	/^func TestReadFromCommand(t *testing.T) {$/;"	f	package:fzf
TestReplacePlaceholder	plugged/fzf/src/terminal_test.go	/^func TestReplacePlaceholder(t *testing.T) {$/;"	f	package:fzf
TestResultRank	plugged/fzf/src/result_test.go	/^func TestResultRank(t *testing.T) {$/;"	f	package:fzf
TestRunning	plugged/vim-go/autoload/go/test-fixtures/test/src/timeout/timeout_test.go	/^func TestRunning(t *testing.T) {$/;"	f	package:main
TestRunningAlso	plugged/vim-go/autoload/go/test-fixtures/test/src/timeout/timeout_test.go	/^func TestRunningAlso(t *testing.T) {$/;"	f	package:main
TestShell	plugged/fzf/test/test_go.rb	/^module TestShell$/;"	m
TestSleep	plugged/vim-go/autoload/go/test-fixtures/test/src/timeout/timeout_test.go	/^func TestSleep(t *testing.T) {$/;"	f	package:main
TestSomething	plugged/vim-go/autoload/go/test-fixtures/test/src/testcompilerror/testcompilerror_test.go	/^func TestSomething(t *testing.T) {$/;"	f	package:main
TestSplitNth	plugged/fzf/src/options_test.go	/^func TestSplitNth(t *testing.T) {$/;"	f	package:fzf
TestStringPtr	plugged/fzf/src/item_test.go	/^func TestStringPtr(t *testing.T) {$/;"	f	package:fzf
TestSub	plugged/vim-go/autoload/go/test-fixtures/test/src/play/play_test.go	/^func TestSub(t *testing.T) {$/;"	f	package:play
TestSuffixMatch	plugged/fzf/src/algo/algo_test.go	/^func TestSuffixMatch(t *testing.T) {$/;"	f	package:algo
TestToCharsAscii	plugged/fzf/src/util/chars_test.go	/^func TestToCharsAscii(t *testing.T) {$/;"	f	package:util
TestToggle	plugged/fzf/src/options_test.go	/^func TestToggle(t *testing.T) {$/;"	f	package:fzf
TestTokenize	plugged/fzf/src/tokenizer_test.go	/^func TestTokenize(t *testing.T) {$/;"	f	package:fzf
TestTopSubHelper	plugged/vim-go/autoload/go/test-fixtures/test/src/play/play_test.go	/^func TestTopSubHelper(t *testing.T) {$/;"	f	package:play
TestTransform	plugged/fzf/src/tokenizer_test.go	/^func TestTransform(t *testing.T) {$/;"	f	package:fzf
TestTransformIndexOutOfBounds	plugged/fzf/src/tokenizer_test.go	/^func TestTransformIndexOutOfBounds(t *testing.T) {$/;"	f	package:fzf
TestTrimLength	plugged/fzf/src/util/chars_test.go	/^func TestTrimLength(t *testing.T) {$/;"	f	package:util
TestUnixCommands	plugged/fzf/src/terminal_test.go	/^func TestUnixCommands(t *testing.T) {$/;"	f	package:fzf
TestValidateSign	plugged/fzf/src/options_test.go	/^func TestValidateSign(t *testing.T) {$/;"	f	package:fzf
TestWindowsCommands	plugged/fzf/src/terminal_test.go	/^func TestWindowsCommands(t *testing.T) {$/;"	f	package:fzf
TestZsh	plugged/fzf/test/test_go.rb	/^class TestZsh < TestBase$/;"	c	mixin:include:TestShell,include:CompletionTest
Test_Callers	plugged/vim-go/autoload/go/calls_test.vim	/^func! Test_Callers() abort$/;"	f
Test_Complete_GOPATH_baronly	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_GOPATH_baronly() abort$/;"	f
Test_Complete_GOPATH_simple	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_GOPATH_simple() abort$/;"	f
Test_Complete_GOPATH_subdirs	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_GOPATH_subdirs() abort$/;"	f
Test_Complete_GOPATH_vendor	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_GOPATH_vendor() abort$/;"	f
Test_Complete_Module_baronly	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_Module_baronly() abort$/;"	f
Test_Complete_Module_simple	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_Module_simple() abort$/;"	f
Test_Complete_Module_subdirs	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_Module_subdirs() abort$/;"	f
Test_Complete_Module_vendor	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_Module_vendor() abort$/;"	f
Test_Decode_multibyte	plugged/vim-go/autoload/go/uri_test.vim	/^func! Test_Decode_multibyte() abort$/;"	f
Test_Decode_simple	plugged/vim-go/autoload/go/uri_test.vim	/^func! Test_Decode_simple() abort$/;"	f
Test_DefJump_gopls_MultipleCodeUnit_first	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_DefJump_gopls_MultipleCodeUnit_first() abort$/;"	f
Test_DefJump_gopls_MultipleCodeUnit_last	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_DefJump_gopls_MultipleCodeUnit_last() abort$/;"	f
Test_DefJump_gopls_simple_first	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_DefJump_gopls_simple_first() abort$/;"	f
Test_DefJump_gopls_simple_last	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_DefJump_gopls_simple_last() abort$/;"	f
Test_EncodePath_multibyte	plugged/vim-go/autoload/go/uri_test.vim	/^func! Test_EncodePath_multibyte() abort$/;"	f
Test_EncodePath_simple	plugged/vim-go/autoload/go/uri_test.vim	/^func! Test_EncodePath_simple() abort$/;"	f
Test_Errcheck	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Errcheck() abort$/;"	f
Test_Errcheck_compilererror	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Errcheck_compilererror() abort$/;"	f
Test_Errcheck_options	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Errcheck_options() abort$/;"	f
Test_ExecuteInDir	plugged/vim-go/autoload/go/tool_test.vim	/^func! Test_ExecuteInDir() abort$/;"	f
Test_ExecuteInDir_nodir	plugged/vim-go/autoload/go/tool_test.vim	/^func! Test_ExecuteInDir_nodir() abort$/;"	f
Test_Format	plugged/vim-go/autoload/go/lsp_test.vim	/^func! Test_Format() abort$/;"	f
Test_Format_SingleNewline	plugged/vim-go/autoload/go/lsp_test.vim	/^func! Test_Format_SingleNewline() abort$/;"	f
Test_GetInfo_gopls	plugged/vim-go/autoload/go/complete_test.vim	/^func! Test_GetInfo_gopls()$/;"	f
Test_GetMultiByteTextPosition	plugged/vim-go/autoload/go/lsp_test.vim	/^function! Test_GetMultiByteTextPosition()$/;"	f
Test_GetMultipleCodeUnitTextPosition	plugged/vim-go/autoload/go/lsp_test.vim	/^function! Test_GetMultipleCodeUnitTextPosition()$/;"	f
Test_GetSimpleTextPosition	plugged/vim-go/autoload/go/lsp_test.vim	/^function! Test_GetSimpleTextPosition()$/;"	f
Test_GoBuildErrors	plugged/vim-go/autoload/go/cmd_test.vim	/^func! Test_GoBuildErrors()$/;"	f
Test_GoDebugModeRemapsAndRestoresKeys	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugModeRemapsAndRestoresKeys() abort$/;"	f
Test_GoDebugStart_Empty	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugStart_Empty() abort$/;"	f
Test_GoDebugStart_Errors	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugStart_Errors() abort$/;"	f
Test_GoDebugStart_Package	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugStart_Package() abort$/;"	f
Test_GoDebugStart_RelativePackage	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugStart_RelativePackage() abort$/;"	f
Test_GoDebugStart_RelativePackage_NullModule	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugStart_RelativePackage_NullModule() abort$/;"	f
Test_GoDebugStopRemovesPlugMappings	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugStopRemovesPlugMappings() abort$/;"	f
Test_GoTermNewMode	plugged/vim-go/autoload/go/term_test.vim	/^func! Test_GoTermNewMode()$/;"	f
Test_GoTermNewMode_SplitRight	plugged/vim-go/autoload/go/term_test.vim	/^func! Test_GoTermNewMode_SplitRight()$/;"	f
Test_GoTermReuse	plugged/vim-go/autoload/go/term_test.vim	/^func! Test_GoTermReuse()$/;"	f
Test_GoTest	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTest() abort$/;"	f
Test_GoTestCompilerError	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestCompilerError() abort$/;"	f
Test_GoTestConcurrentPanic	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestConcurrentPanic()$/;"	f
Test_GoTestExample	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestExample() abort$/;"	f
Test_GoTestShowName	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestShowName() abort$/;"	f
Test_GoTestTestCompilerError	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestTestCompilerError() abort$/;"	f
Test_GoTestTimeout	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestTimeout() abort$/;"	f
Test_GoTestVerbose	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestVerbose() abort$/;"	f
Test_GoTestVet	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestVet() abort$/;"	f
Test_GometaAutoSaveGolangciLint	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaAutoSaveGolangciLint() abort$/;"	f
Test_GometaAutoSaveGolangciLintKeepsErrors	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaAutoSaveGolangciLintKeepsErrors() abort$/;"	f
Test_GometaAutoSaveGolangciLint_multiple	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaAutoSaveGolangciLint_multiple() abort$/;"	f
Test_GometaAutoSaveGopls	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaAutoSaveGopls() abort$/;"	f
Test_GometaAutoSaveStaticcheck	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaAutoSaveStaticcheck() abort$/;"	f
Test_GometaAutoSaveStaticcheckKeepsErrors	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaAutoSaveStaticcheckKeepsErrors() abort$/;"	f
Test_GometaGolangciLint	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaGolangciLint() abort$/;"	f
Test_GometaGolangciLint_importabs	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaGolangciLint_importabs() abort$/;"	f
Test_GometaStaticcheck	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaStaticcheck() abort$/;"	f
Test_GoplsEnabled_Clear	plugged/vim-go/autoload/go/config_test.vim	/^func! Test_GoplsEnabled_Clear() abort$/;"	f
Test_GuruScope_Set	plugged/vim-go/autoload/go/guru_test.vim	/^function Test_GuruScope_Set() abort$/;"	f
Test_Imports	plugged/vim-go/autoload/go/lsp_test.vim	/^func! Test_Imports() abort$/;"	f
Test_JobDirWithSpaces	plugged/vim-go/autoload/go/job_test.vim	/^func! Test_JobDirWithSpaces()$/;"	f
Test_Jump_leaves_lists	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_Jump_leaves_lists() abort$/;"	f
Test_Lint_GOPATH	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Lint_GOPATH() abort$/;"	f
Test_Lint_NullModule	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Lint_NullModule() abort$/;"	f
Test_PositionOf_MultiByte	plugged/vim-go/autoload/go/lsp/lsp_test.vim	/^function! Test_PositionOf_MultiByte()$/;"	f
Test_PositionOf_MultipleCodeUnit	plugged/vim-go/autoload/go/lsp/lsp_test.vim	/^function! Test_PositionOf_MultipleCodeUnit()$/;"	f
Test_PositionOf_Simple	plugged/vim-go/autoload/go/lsp/lsp_test.vim	/^function! Test_PositionOf_Simple()$/;"	f
Test_PromiseAwait	plugged/vim-go/autoload/go/promise_test.vim	/^func! Test_PromiseAwait() abort$/;"	f
Test_PromiseAwait_Timeout	plugged/vim-go/autoload/go/promise_test.vim	/^func! Test_PromiseAwait_Timeout() abort$/;"	f
Test_PromiseNew	plugged/vim-go/autoload/go/promise_test.vim	/^func! Test_PromiseNew() abort$/;"	f
Test_Roundtrip_multibyte	plugged/vim-go/autoload/go/uri_test.vim	/^func! Test_Roundtrip_multibyte() abort$/;"	f
Test_Roundtrip_simple	plugged/vim-go/autoload/go/uri_test.vim	/^func! Test_Roundtrip_simple() abort$/;"	f
Test_SetBuildTags	plugged/vim-go/autoload/go/config_test.vim	/^func! Test_SetBuildTags() abort$/;"	f
Test_SwitchImportAddIgnoresCommented	plugged/vim-go/autoload/go/import_test.vim	/^func! Test_SwitchImportAddIgnoresCommented()$/;"	f
Test_TemplateCreate	plugged/vim-go/autoload/go/template_test.vim	/^func! Test_TemplateCreate() abort$/;"	f
Test_TemplateCreate_PackageExists	plugged/vim-go/autoload/go/template_test.vim	/^func! Test_TemplateCreate_PackageExists() abort$/;"	f
Test_TemplateCreate_UsePkg	plugged/vim-go/autoload/go/template_test.vim	/^func! Test_TemplateCreate_UsePkg() abort$/;"	f
Test_Vet	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Vet() abort$/;"	f
Test_Vet_compilererror	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Vet_compilererror() abort$/;"	f
Test_Vet_subdir	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Vet_subdir() abort$/;"	f
Test_add_lines	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_add_lines()$/;"	f
Test_add_lines_fish	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_add_lines_fish()$/;"	f
Test_around_text_object	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_around_text_object()$/;"	f
Test_common_prefix	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_common_prefix()$/;"	f
Test_common_suffix	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_common_suffix()$/;"	f
Test_diagnostic_after_fmt	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_diagnostic_after_fmt() abort$/;"	f
Test_diagnostic_after_fmt_change	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_diagnostic_after_fmt_change() abort$/;"	f
Test_diagnostic_after_fmt_cleared	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_diagnostic_after_fmt_cleared() abort$/;"	f
Test_diagnostic_after_reload	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_diagnostic_after_reload() abort$/;"	f
Test_diff_highlight	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_diff_highlight()$/;"	f
Test_edit_file_with_same_name_as_a_branch	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_edit_file_with_same_name_as_a_branch()$/;"	f
Test_empty_file	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_empty_file()$/;"	f
Test_encoding	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_encoding()$/;"	f
Test_file_added_to_git	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_file_added_to_git()$/;"	f
Test_filename_leading_dash	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_leading_dash()$/;"	f
Test_filename_umlaut	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_umlaut()$/;"	f
Test_filename_with_equals	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_with_equals()$/;"	f
Test_filename_with_square_brackets	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_with_square_brackets()$/;"	f
Test_fillstruct	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_fillstruct() abort$/;"	f
Test_fillstruct_line	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_fillstruct_line() abort$/;"	f
Test_fillstruct_two_cursor	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_fillstruct_two_cursor() abort$/;"	f
Test_fillstruct_two_line	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_fillstruct_two_line() abort$/;"	f
Test_fix_file_references	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_fix_file_references()$/;"	f
Test_foldtext	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_foldtext()$/;"	f
Test_follow_symlink	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_follow_symlink()$/;"	f
Test_goImportStringHighlight	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_goImportStringHighlight() abort$/;"	f
Test_goReceiverHighlight	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_goReceiverHighlight() abort$/;"	f
Test_goStringHighlight	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_goStringHighlight() abort$/;"	f
Test_goimports	plugged/vim-go/autoload/go/fmt_test.vim	/^func! Test_goimports() abort$/;"	f
Test_gomodVersion_highlight	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_gomodVersion_highlight() abort$/;"	f
Test_gomodVersion_incompatible_highlight	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_gomodVersion_incompatible_highlight() abort$/;"	f
Test_gopls_fillstruct	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_gopls_fillstruct() abort$/;"	f
Test_gopls_fillstruct_line	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_gopls_fillstruct_line() abort$/;"	f
Test_gopls_fillstruct_two_cursor	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_gopls_fillstruct_two_cursor() abort$/;"	f
Test_gopls_fillstruct_two_line	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_gopls_fillstruct_two_line() abort$/;"	f
Test_hunk_outside_noop	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_outside_noop()$/;"	f
Test_hunk_stage	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage()$/;"	f
Test_hunk_stage_nearby_hunk	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_nearby_hunk()$/;"	f
Test_hunk_stage_partial_cmd_added	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_cmd_added()$/;"	f
Test_hunk_stage_partial_preview_added	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_preview_added()$/;"	f
Test_hunk_stage_partial_preview_added_removed	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_preview_added_removed()$/;"	f
Test_hunk_stage_partial_visual_added	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_visual_added()$/;"	f
Test_hunk_stage_preview_write	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_preview_write()$/;"	f
Test_hunk_undo	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_undo()$/;"	f
Test_hunk_undo_dos	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_undo_dos()$/;"	f
Test_impl	plugged/vim-go/autoload/go/impl_test.vim	/^func! Test_impl() abort$/;"	f
Test_impl_get	plugged/vim-go/autoload/go/impl_test.vim	/^func! Test_impl_get() abort$/;"	f
Test_indent_raw_string	plugged/vim-go/autoload/go/indent_test.vim	/^func! Test_indent_raw_string() abort$/;"	f
Test_inner_text_object	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_inner_text_object()$/;"	f
Test_jump_to_declaration_godef	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_jump_to_declaration_godef() abort$/;"	f
Test_jump_to_declaration_guru	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_jump_to_declaration_guru() abort$/;"	f
Test_keep_alt	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_alt()$/;"	f
Test_keep_modified	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_modified()$/;"	f
Test_keep_op_marks	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_op_marks()$/;"	f
Test_lcs	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_lcs()$/;"	f
Test_modify_lines	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_modify_lines()$/;"	f
Test_no_modifications	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_no_modifications()$/;"	f
Test_numeric_literal_highlight	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_numeric_literal_highlight() abort$/;"	f
Test_orphaned_signs	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_orphaned_signs()$/;"	f
Test_overlapping_hunk_op	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_overlapping_hunk_op()$/;"	f
Test_overlapping_hunks	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_overlapping_hunks()$/;"	f
Test_preview	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_preview()$/;"	f
Test_preview_dos	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_preview_dos()$/;"	f
Test_priority	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_priority()$/;"	f
Test_quickfix	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_quickfix()$/;"	f
Test_remove_first_lines	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_remove_first_lines()$/;"	f
Test_remove_lines	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_remove_lines()$/;"	f
Test_remove_tags	plugged/vim-go/autoload/go/tags_test.vim	/^func! Test_remove_tags() abort$/;"	f
Test_run_fmt	plugged/vim-go/autoload/go/fmt_test.vim	/^func! Test_run_fmt() abort$/;"	f
Test_split	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_split()$/;"	f
Test_undo_nearby_hunk	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_undo_nearby_hunk()$/;"	f
Test_untracked_file_outside_repo	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_outside_repo()$/;"	f
Test_untracked_file_square_brackets_within_repo	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_square_brackets_within_repo()$/;"	f
Test_untracked_file_within_repo	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_within_repo()$/;"	f
Test_update_file	plugged/vim-go/autoload/go/fmt_test.vim	/^func! Test_update_file() abort$/;"	f
Test_user_autocmd	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_user_autocmd()$/;"	f
Test_write_option	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_write_option()$/;"	f
Test_zero_as_index_element	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_zero_as_index_element() abort$/;"	f
Test_zero_as_slice_index	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_zero_as_slice_index() abort$/;"	f
Test_zero_as_start_slicing_slice	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_zero_as_start_slicing_slice() abort$/;"	f
Testing	plugged/vim-gutentags/CONTRIBUTING.md	/^## Testing$/;"	s	chapter:Contributing
Theme	plugged/fzf/src/options.go	/^	Theme       *tui.ColorTheme$/;"	m	struct:fzf.Options	typeref:typename:*tui.ColorTheme
Third-party libraries used	plugged/fzf/BUILD.md	/^Third-party libraries used$/;"	s	chapter:Building fzf
Tips	plugged/fzf/README-VIM.md	/^Tips$/;"	s	chapter:FZF Vim integration
Tips	plugged/fzf/README.md	/^Tips$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Tmux	plugged/fzf/test/test_go.rb	/^class Tmux$/;"	c
ToChars	plugged/fzf/src/util/chars.go	/^func ToChars(bytes []byte) Chars {$/;"	f	package:util	typeref:typename:Chars
ToRunes	plugged/fzf/src/util/chars.go	/^func (chars *Chars) ToRunes() []rune {$/;"	f	struct:util.Chars	typeref:typename:[]rune
ToString	plugged/fzf/src/ansi.go	/^func (s *ansiState) ToString() string {$/;"	f	struct:fzf.ansiState	typeref:typename:string
ToString	plugged/fzf/src/util/chars.go	/^func (chars *Chars) ToString() string {$/;"	f	struct:util.Chars	typeref:typename:string
ToTty	plugged/fzf/src/util/util.go	/^func ToTty() bool {$/;"	f	package:util	typeref:typename:bool
ToggleSort	plugged/fzf/src/options.go	/^	ToggleSort  bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Toggling background	plugged/vim-two-firewatch/README.md	/^## Toggling background$/;"	s	chapter:Vim-Two-Firewatch Colorscheme
Toggling between data sources	plugged/fzf/ADVANCED.md	/^### Toggling between data sources$/;"	S	section:Advanced fzf examples""Dynamic reloading of the list
Token	plugged/fzf/src/tokenizer.go	/^type Token struct {$/;"	s	package:fzf
Tokenize	plugged/fzf/src/tokenizer.go	/^func Tokenize(text string, delimiter Delimiter) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
Top	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Top() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Top	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Top() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Top	plugged/fzf/src/tui/tui.go	/^	Top() int$/;"	n	interface:tui.Window	typeref:typename:int
TrailingWhitespaces	plugged/fzf/src/util/chars.go	/^func (chars *Chars) TrailingWhitespaces() int {$/;"	f	struct:util.Chars	typeref:typename:int
Transform	plugged/fzf/src/tokenizer.go	/^func Transform(tokens []Token, withNth []Range) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
TrimLength	plugged/fzf/src/item.go	/^func (item *Item) TrimLength() uint16 {$/;"	f	struct:fzf.Item	typeref:typename:uint16
TrimLength	plugged/fzf/src/util/chars.go	/^func (chars *Chars) TrimLength() uint16 {$/;"	f	struct:util.Chars	typeref:typename:uint16
TrimTrailingWhitespaces	plugged/fzf/src/util/chars.go	/^func (chars *Chars) TrimTrailingWhitespaces() {$/;"	f	struct:util.Chars
TtyIn	plugged/fzf/src/tui/ttyname_unix.go	/^func TtyIn() *os.File {$/;"	f	package:tui	typeref:typename:*os.File
TtyIn	plugged/fzf/src/tui/ttyname_windows.go	/^func TtyIn() *os.File {$/;"	f	package:tui	typeref:typename:*os.File
Type	plugged/fzf/src/tui/tui.go	/^	Type       EventType$/;"	m	struct:tui.Event	typeref:typename:EventType
Types/Classes	plugged/nord-vim/CHANGELOG.md	/^#### Types\/Classes$/;"	t	subsection:0.11.0""Features""Syntax
U	autoload/plug.vim	/^  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	autoload/plug.vim	/^  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
UI	plugged/nord-vim/CHANGELOG.md	/^### UI$/;"	S	section:0.11.0""Features
UI	plugged/nord-vim/CHANGELOG.md	/^### UI$/;"	S	section:0.11.0""Improvements
UI	plugged/nord-vim/CHANGELOG.md	/^### UI$/;"	S	section:0.13.0""Features
UI	plugged/nord-vim/CHANGELOG.md	/^### UI$/;"	S	section:0.13.0""Improvements
UI	plugged/nord-vim/CHANGELOG.md	/^### UI$/;"	S	section:0.14.0""Features
UI	plugged/nord-vim/CHANGELOG.md	/^### UI$/;"	S	section:0.14.0""Improvements
UI	plugged/nord-vim/CHANGELOG.md	/^### UI$/;"	S	section:0.15.0""Features
UI	plugged/nord-vim/CHANGELOG.md	/^### UI$/;"	S	section:0.16.0""Bug Fixes
UI	plugged/nord-vim/CHANGELOG.md	/^### UI$/;"	S	section:0.16.0""Features
UI	plugged/nord-vim/CHANGELOG.md	/^### UI$/;"	S	section:0.16.0""Improvements
UI	plugged/nord-vim/CHANGELOG.md	/^### UI$/;"	S	section:0.18.0""Features
UI	plugged/nord-vim/CHANGELOG.md	/^### UI$/;"	S	section:0.6.0""Bug Fixes
UI	plugged/nord-vim/CHANGELOG.md	/^### UI$/;"	S	section:0.6.0""Improvements
UI	plugged/nord-vim/CHANGELOG.md	/^### UI$/;"	S	section:0.8.0""Improvements
UI	plugged/nord-vim/CHANGELOG.md	/^### UI$/;"	S	section:0.9.0""Bug Fixes
UI	plugged/nord-vim/CHANGELOG.md	/^### UI$/;"	S	section:0.9.0""Features
UI	plugged/nord-vim/CHANGELOG.md	/^### UI$/;"	S	section:0.9.0""Improvements
UI	plugged/nord-vim/CHANGELOG.md	/^#### UI$/;"	t	subsection:0.6.0""Features""Plugin Support
UI	plugged/nord-vim/CHANGELOG.md	/^#### UI$/;"	t	subsection:0.7.0""Features""Plugin Support
UI	plugged/nord-vim/CHANGELOG.md	/^#### UI$/;"	t	subsection:0.8.0""Features""Plugin Support
UNAME_M	plugged/fzf/Makefile	/^UNAME_M := $(shell uname -m)$/;"	m
UNSETS	plugged/fzf/test/test_go.rb	/^UNSETS = %w[$/;"	C
UPDATED_SOURCE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set UPDATED_SOURCE=%~2$/;"	v
UPDATED_SOURCE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set UPDATED_SOURCE=$/;"	v
Underline	plugged/fzf/src/tui/dummy.go	/^	Underline = Attr(1 << 3)$/;"	c	package:tui
Underline	plugged/fzf/src/tui/tcell.go	/^	Underline      = Attr(tcell.AttrUnderline)$/;"	c	package:tui
Unicode	plugged/fzf/src/options.go	/^	Unicode     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Unlock	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Unlock$/;"	l
Unwatch	plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Unwatch(events ...EventType) {$/;"	f	struct:util.EventBox
Up	plugged/fzf/src/tui/tui.go	/^	Up$/;"	c	package:tui
UpdateCount	plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateCount(cnt int, final bool, failedCommand *string) {$/;"	f	struct:fzf.Terminal
UpdateHeader	plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateHeader(header []string) {$/;"	f	struct:fzf.Terminal
UpdateList	plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateList(merger *Merger, reset bool) {$/;"	f	struct:fzf.Terminal
UpdateProgress	plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateProgress(progress float32) {$/;"	f	struct:fzf.Terminal
Updating the list of processes by pressing CTRL-R	plugged/fzf/ADVANCED.md	/^### Updating the list of processes by pressing CTRL-R$/;"	S	section:Advanced fzf examples""Dynamic reloading of the list
Upgrading fzf	plugged/fzf/README.md	/^Upgrading fzf$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Usage	plugged/fzf/README.md	/^Usage$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Usage	plugged/vim-go/README.md	/^## Usage$/;"	s	chapter:vim-go [![GitHub Actions Status](https://github.com/fatih/vim-go/workflows/test/badge.svg)](https://github.com/fatih/vim-go/actions)
Usage	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:Usage$/;"	l
Usage	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Usage$/;"	l
Usage	plugged/vim-two-firewatch/README.md	/^## Usage$/;"	s	chapter:Vim-Two-Firewatch Colorscheme
Using Homebrew	plugged/fzf/README.md	/^### Using Homebrew$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
Using Linux package managers	plugged/fzf/README.md	/^### Using Linux package managers$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
Using Makefile	plugged/fzf/BUILD.md	/^### Using Makefile$/;"	S	section:Building fzf""Build instructions
Using [vim-plug](https://github.com/junegunn/vim-plug)	plugged/fzf.vim/README.md	/^### Using [vim-plug](https:\/\/github.com\/junegunn\/vim-plug)$/;"	S	section:fzf :heart: vim""Installation
Using fzf as the secondary filter	plugged/fzf/ADVANCED.md	/^### Using fzf as the secondary filter$/;"	S	section:Advanced fzf examples""Ripgrep integration
Using git	plugged/fzf/README.md	/^### Using git$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
Using the finder	plugged/fzf/README.md	/^#### Using the finder$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
V	plugged/vim-go/autoload/go/test-fixtures/complete/complete.go	/^	V string$/;"	m	struct:complete.T	typeref:typename:string
VERSION	plugged/fzf/Makefile	/^VERSION        := $(FZF_VERSION)$/;"	m
VERSION	plugged/fzf/Makefile	/^VERSION        := $(shell git describe --abbrev=0 2> \/dev\/null)$/;"	m
VERSION_REGEX	plugged/fzf/Makefile	/^VERSION_REGEX  := $(subst .,\\.,$(VERSION_TRIM))$/;"	m
VERSION_TRIM	plugged/fzf/Makefile	/^VERSION_TRIM   := $(shell sed "s\/-.*\/\/" <<< $(VERSION))$/;"	m
VIMS	plugged/vim-go/Makefile	/^VIMS ?= vim-8.0 vim-8.2 nvim$/;"	m
Value	plugged/vim-go/autoload/go/test-fixtures/fmt/src/imports/vendor/gh.com/gi/foo-logging/logger.go	/^	Value string$/;"	m	struct:logging.TestLogger	typeref:typename:string
Version	plugged/fzf/src/options.go	/^	Version     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Vim functions	plugged/fzf.vim/README.md	/^#### Vim functions$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Vim plugin	plugged/fzf/README.md	/^Vim plugin$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Vim version (first three lines from `:version`):	plugged/vim-go/.github/ISSUE_TEMPLATE.md	/^#### Vim version (first three lines from `:version`):$/;"	t	subsection:Configuration (**MUST** fill this out):
Vim-Two-Firewatch Colorscheme	plugged/vim-two-firewatch/README.md	/^# Vim-Two-Firewatch Colorscheme$/;"	c
Wait	plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Wait(callback func(*Events)) {$/;"	f	struct:util.EventBox
WaitFor	plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) WaitFor(event EventType) {$/;"	f	struct:util.EventBox
Watch	plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Watch(events ...EventType) {$/;"	f	struct:util.EventBox
What did you do? (required: The issue will be **closed** when not provided)	plugged/vim-go/.github/ISSUE_TEMPLATE.md	/^### What did you do? (required: The issue will be **closed** when not provided)$/;"	S
What did you expect to happen?	plugged/vim-go/.github/ISSUE_TEMPLATE.md	/^### What did you expect to happen?$/;"	S
What does it contain?	README.md	/^## What does it contain?$/;"	s	chapter:neovimfiles
What happened instead?	plugged/vim-go/.github/ISSUE_TEMPLATE.md	/^### What happened instead?$/;"	S
What?	plugged/vim-gutentags/README.md	/^## What?$/;"	s	chapter:Gutentags
Why Two-Firewatch?	plugged/vim-two-firewatch/README.md	/^## Why Two-Firewatch?$/;"	s	chapter:Vim-Two-Firewatch Colorscheme
Why you should use fzf on Vim	plugged/fzf.vim/README.md	/^Why you should use fzf on Vim$/;"	s	chapter:fzf :heart: vim
Why?	plugged/vim-gutentags/README.md	/^## Why?$/;"	s	chapter:Gutentags
Width	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Width() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Width	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Width() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Width	plugged/fzf/src/tui/tui.go	/^	Width() int$/;"	n	interface:tui.Window	typeref:typename:int
Window	plugged/fzf/src/tui/tui.go	/^type Window interface {$/;"	i	package:tui
Windows	plugged/fzf/README.md	/^### Windows$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
WithAttr	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) WithAttr(attr Attr) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
WithNth	plugged/fzf/src/options.go	/^	WithNth     []Range$/;"	m	struct:fzf.Options	typeref:typename:[]Range
Writing	plugged/vim-gutentags/CONTRIBUTING.md	/^## Writing$/;"	s	chapter:Contributing
X	autoload/plug.vim	/^    nnoremap <silent> <buffer> X :call <SID>revert()<cr>$/;"	m
X	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) X() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
X	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) X() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
X	plugged/fzf/src/tui/tui.go	/^	X      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
X	plugged/fzf/src/tui/tui.go	/^	X() int$/;"	n	interface:tui.Window	typeref:typename:int
X	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  fun <SID>X(group, fg, bg, attr)$/;"	f
Y	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Y() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Y	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Y() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Y	plugged/fzf/src/tui/tui.go	/^	Y      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
Y	plugged/fzf/src/tui/tui.go	/^	Y() int$/;"	n	interface:tui.Window	typeref:typename:int
[License](LICENSE)	plugged/fzf/README-VIM.md	/^[License](LICENSE)$/;"	s	chapter:FZF Vim integration
[License](LICENSE)	plugged/fzf/README.md	/^[License](LICENSE)$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
[[	autoload/plug.vim	/^  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>$/;"	m
[[	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> [[ :<c-u>call go#textobj#FunctionJump('n', 'prev')<cr>$/;"	m
[[	plugged/vim-go/ftplugin/go.vim	/^  onoremap <buffer> <silent> [[ :<c-u>call go#textobj#FunctionJump('o', 'prev')<cr>$/;"	m
[[	plugged/vim-go/ftplugin/go.vim	/^  xnoremap <buffer> <silent> [[ :<c-u>call go#textobj#FunctionJump('v', 'prev')<cr>$/;"	m
[c	plugged/vim-gitgutter/autoload/gitgutter.vim	/^    nmap <buffer> [c <Plug>(GitGutterPrevHunk)$/;"	m
]]	autoload/plug.vim	/^  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>$/;"	m
]]	plugged/fzf/shell/completion.bash	/^  if [[ "$(type -t _fzf_comprun 2>&1)" = function ]]; then$/;"	f
]]	plugged/fzf/shell/completion.zsh	/^  if [[ "$(type _fzf_comprun 2>&1)" =~ function ]]; then$/;"	f
]]	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> ]] :<c-u>call go#textobj#FunctionJump('n', 'next')<cr>$/;"	m
]]	plugged/vim-go/ftplugin/go.vim	/^  onoremap <buffer> <silent> ]] :<c-u>call go#textobj#FunctionJump('o', 'next')<cr>$/;"	m
]]	plugged/vim-go/ftplugin/go.vim	/^  xnoremap <buffer> <silent> ]] :<c-u>call go#textobj#FunctionJump('v', 'next')<cr>$/;"	m
]c	plugged/vim-gitgutter/autoload/gitgutter.vim	/^    nmap <buffer> ]c <Plug>(GitGutterNextHunk)$/;"	m
__fsel	plugged/fzf/shell/key-bindings.zsh	/^__fsel() {$/;"	f
__fzf_cd__	plugged/fzf/shell/key-bindings.bash	/^__fzf_cd__() {$/;"	f
__fzf_comprun	plugged/fzf/shell/completion.bash	/^__fzf_comprun() {$/;"	f
__fzf_comprun	plugged/fzf/shell/completion.zsh	/^__fzf_comprun() {$/;"	f
__fzf_defc	plugged/fzf/shell/completion.bash	/^__fzf_defc() {$/;"	f
__fzf_extract_command	plugged/fzf/shell/completion.zsh	/^__fzf_extract_command() {$/;"	f
__fzf_generic_path_completion	plugged/fzf/shell/completion.bash	/^__fzf_generic_path_completion() {$/;"	f
__fzf_generic_path_completion	plugged/fzf/shell/completion.zsh	/^__fzf_generic_path_completion() {$/;"	f
__fzf_history__	plugged/fzf/shell/key-bindings.bash	/^__fzf_history__() {$/;"	f
__fzf_orig_completion	plugged/fzf/shell/completion.bash	/^__fzf_orig_completion() {$/;"	f
__fzf_select__	plugged/fzf/shell/key-bindings.bash	/^__fzf_select__() {$/;"	f
__fzfcmd	plugged/fzf/shell/key-bindings.bash	/^__fzfcmd() {$/;"	f
__fzfcmd	plugged/fzf/shell/key-bindings.zsh	/^__fzfcmd() {$/;"	f
__init__	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^    def __init__(self, vim):$/;"	m	class:Source
_cache	plugged/fzf/src/pattern.go	/^	_cache        ChunkCache$/;"	v	package:fzf	typeref:typename:ChunkCache
_colorToAttribute	plugged/fzf/src/tui/tcell.go	/^	_colorToAttribute = []tcell.Color{$/;"	v	package:tui
_fzf_alias_completion	plugged/fzf/shell/completion.bash	/^_fzf_alias_completion() {$/;"	f
_fzf_compgen_dir	plugged/fzf/shell/completion.bash	/^  _fzf_compgen_dir() {$/;"	f
_fzf_compgen_dir	plugged/fzf/shell/completion.zsh	/^  _fzf_compgen_dir() {$/;"	f
_fzf_compgen_path	plugged/fzf/shell/completion.bash	/^  _fzf_compgen_path() {$/;"	f
_fzf_compgen_path	plugged/fzf/shell/completion.zsh	/^  _fzf_compgen_path() {$/;"	f
_fzf_complete	plugged/fzf/shell/completion.bash	/^_fzf_complete() {$/;"	f
_fzf_complete	plugged/fzf/shell/completion.zsh	/^_fzf_complete() {$/;"	f
_fzf_complete_export	plugged/fzf/shell/completion.zsh	/^_fzf_complete_export() {$/;"	f
_fzf_complete_kill	plugged/fzf/shell/completion.bash	/^_fzf_complete_kill() {$/;"	f
_fzf_complete_kill	plugged/fzf/shell/completion.zsh	/^_fzf_complete_kill() {$/;"	f
_fzf_complete_kill_post	plugged/fzf/shell/completion.zsh	/^_fzf_complete_kill_post() {$/;"	f
_fzf_complete_ssh	plugged/fzf/shell/completion.zsh	/^_fzf_complete_ssh() {$/;"	f
_fzf_complete_telnet	plugged/fzf/shell/completion.zsh	/^_fzf_complete_telnet() {$/;"	f
_fzf_complete_unalias	plugged/fzf/shell/completion.zsh	/^_fzf_complete_unalias() {$/;"	f
_fzf_complete_unset	plugged/fzf/shell/completion.zsh	/^_fzf_complete_unset() {$/;"	f
_fzf_dir_completion	plugged/fzf/shell/completion.bash	/^_fzf_dir_completion() {$/;"	f
_fzf_dir_completion	plugged/fzf/shell/completion.zsh	/^_fzf_dir_completion() {$/;"	f
_fzf_feed_fifo	plugged/fzf/shell/completion.zsh	/^_fzf_feed_fifo() ($/;"	f
_fzf_file_completion	plugged/fzf/shell/completion.bash	/^_fzf_file_completion() {$/;"	f
_fzf_handle_dynamic_completion	plugged/fzf/shell/completion.bash	/^_fzf_handle_dynamic_completion() {$/;"	f
_fzf_host_completion	plugged/fzf/shell/completion.bash	/^_fzf_host_completion() {$/;"	f
_fzf_opts_completion	plugged/fzf/shell/completion.bash	/^_fzf_opts_completion() {$/;"	f
_fzf_path_completion	plugged/fzf/shell/completion.bash	/^_fzf_path_completion() {$/;"	f
_fzf_path_completion	plugged/fzf/shell/completion.zsh	/^_fzf_path_completion() {$/;"	f
_fzf_proc_completion	plugged/fzf/shell/completion.bash	/^_fzf_proc_completion() {$/;"	f
_fzf_proc_completion_post	plugged/fzf/shell/completion.bash	/^_fzf_proc_completion_post() {$/;"	f
_fzf_setup_completion	plugged/fzf/shell/completion.bash	/^_fzf_setup_completion() {$/;"	f
_fzf_statusline	plugged/fzf.vim/plugin/fzf.vim	/^  augroup _fzf_statusline$/;"	a
_fzf_var_completion	plugged/fzf/shell/completion.bash	/^_fzf_var_completion() {$/;"	f
_patternCache	plugged/fzf/src/pattern.go	/^	_patternCache map[string]*Pattern$/;"	v	package:fzf	typeref:typename:map[string]*Pattern
_prevMouseButton	plugged/fzf/src/tui/tcell.go	/^	_prevMouseButton tcell.ButtonMask$/;"	v	package:tui	typeref:typename:tcell.ButtonMask
_screen	plugged/fzf/src/tui/tcell.go	/^	_screen          tcell.Screen$/;"	v	package:tui	typeref:typename:tcell.Screen
_splitRegex	plugged/fzf/src/pattern.go	/^	_splitRegex   *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
_usage	plugged/vim-go/scripts/test	/^_usage() {$/;"	f
`--filter` will not block when sort is disabled	plugged/fzf/CHANGELOG.md	/^#### `--filter` will not block when sort is disabled$/;"	t	subsection:CHANGELOG""0.9.4""Improvements
`--height`	plugged/fzf/ADVANCED.md	/^### `--height`$/;"	S	section:Advanced fzf examples""Screen Layout
`:FZF[!]`	plugged/fzf/README-VIM.md	/^`:FZF[!]`$/;"	s	chapter:FZF Vim integration
`fzf#run`	plugged/fzf/README-VIM.md	/^`fzf#run`$/;"	s	chapter:FZF Vim integration
`fzf#wrap`	plugged/fzf/README-VIM.md	/^`fzf#wrap`$/;"	s	chapter:FZF Vim integration
`fzf-tmux`	plugged/fzf/ADVANCED.md	/^### `fzf-tmux`$/;"	S	section:Advanced fzf examples""Screen Layout
`fzf-tmux` script	plugged/fzf/README.md	/^`fzf-tmux` script$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
`vimrc` you used to reproduce:	plugged/vim-go/.github/ISSUE_TEMPLATE.md	/^####  `vimrc` you used to reproduce:$/;"	t	subsection:Configuration (**MUST** fill this out):
a	plugged/fzf/src/terminal.go	/^	a string$/;"	m	struct:fzf.action	typeref:typename:string
a	plugged/vim-go/test/parse.go	/^	a "golang.org\/x\/net\/html\/atom"$/;"	P	package:golang.org/x/net/html/atom
ac	plugged/vim-gitgutter/autoload/gitgutter.vim	/^    omap <buffer> ac <Plug>(GitGutterTextObjectOuterPending)$/;"	m
ac	plugged/vim-gitgutter/autoload/gitgutter.vim	/^    xmap <buffer> ac <Plug>(GitGutterTextObjectOuterVisual)$/;"	m
ac	plugged/vim-go/ftplugin/go.vim	/^  onoremap <buffer> <silent> ac :<c-u>call go#textobj#Comment('a')<cr>$/;"	m
ac	plugged/vim-go/ftplugin/go.vim	/^  xnoremap <buffer> <silent> ac :<c-u>call go#textobj#Comment('a')<cr>$/;"	m
acknowledgeSelfClosingTag	plugged/vim-go/test/parse.go	/^func (p *parser) acknowledgeSelfClosingTag() {$/;"	f	struct:html.parser
actAbort	plugged/fzf/src/terminal.go	/^	actAbort$/;"	c	package:fzf
actAccept	plugged/fzf/src/terminal.go	/^	actAccept$/;"	c	package:fzf
actAcceptNonEmpty	plugged/fzf/src/terminal.go	/^	actAcceptNonEmpty$/;"	c	package:fzf
actBackwardChar	plugged/fzf/src/terminal.go	/^	actBackwardChar$/;"	c	package:fzf
actBackwardDeleteChar	plugged/fzf/src/terminal.go	/^	actBackwardDeleteChar$/;"	c	package:fzf
actBackwardDeleteCharEOF	plugged/fzf/src/terminal.go	/^	actBackwardDeleteCharEOF$/;"	c	package:fzf
actBackwardKillWord	plugged/fzf/src/terminal.go	/^	actBackwardKillWord$/;"	c	package:fzf
actBackwardWord	plugged/fzf/src/terminal.go	/^	actBackwardWord$/;"	c	package:fzf
actBeginningOfLine	plugged/fzf/src/terminal.go	/^	actBeginningOfLine$/;"	c	package:fzf
actCancel	plugged/fzf/src/terminal.go	/^	actCancel$/;"	c	package:fzf
actChangePrompt	plugged/fzf/src/terminal.go	/^	actChangePrompt$/;"	c	package:fzf
actClearQuery	plugged/fzf/src/terminal.go	/^	actClearQuery$/;"	c	package:fzf
actClearScreen	plugged/fzf/src/terminal.go	/^	actClearScreen$/;"	c	package:fzf
actClearSelection	plugged/fzf/src/terminal.go	/^	actClearSelection$/;"	c	package:fzf
actClose	plugged/fzf/src/terminal.go	/^	actClose$/;"	c	package:fzf
actDeleteChar	plugged/fzf/src/terminal.go	/^	actDeleteChar$/;"	c	package:fzf
actDeleteCharEOF	plugged/fzf/src/terminal.go	/^	actDeleteCharEOF$/;"	c	package:fzf
actDeselect	plugged/fzf/src/terminal.go	/^	actDeselect$/;"	c	package:fzf
actDeselectAll	plugged/fzf/src/terminal.go	/^	actDeselectAll$/;"	c	package:fzf
actDisableSearch	plugged/fzf/src/terminal.go	/^	actDisableSearch$/;"	c	package:fzf
actDown	plugged/fzf/src/terminal.go	/^	actDown$/;"	c	package:fzf
actEnableSearch	plugged/fzf/src/terminal.go	/^	actEnableSearch$/;"	c	package:fzf
actEndOfLine	plugged/fzf/src/terminal.go	/^	actEndOfLine$/;"	c	package:fzf
actExecute	plugged/fzf/src/terminal.go	/^	actExecute$/;"	c	package:fzf
actExecuteMulti	plugged/fzf/src/terminal.go	/^	actExecuteMulti \/\/ Deprecated$/;"	c	package:fzf
actExecuteSilent	plugged/fzf/src/terminal.go	/^	actExecuteSilent$/;"	c	package:fzf
actFirst	plugged/fzf/src/terminal.go	/^	actFirst$/;"	c	package:fzf
actForwardChar	plugged/fzf/src/terminal.go	/^	actForwardChar$/;"	c	package:fzf
actForwardWord	plugged/fzf/src/terminal.go	/^	actForwardWord$/;"	c	package:fzf
actHalfPageDown	plugged/fzf/src/terminal.go	/^	actHalfPageDown$/;"	c	package:fzf
actHalfPageUp	plugged/fzf/src/terminal.go	/^	actHalfPageUp$/;"	c	package:fzf
actIgnore	plugged/fzf/src/terminal.go	/^	actIgnore actionType = iota$/;"	c	package:fzf	typeref:type:actionType
actInvalid	plugged/fzf/src/terminal.go	/^	actInvalid$/;"	c	package:fzf
actJump	plugged/fzf/src/terminal.go	/^	actJump$/;"	c	package:fzf
actJumpAccept	plugged/fzf/src/terminal.go	/^	actJumpAccept$/;"	c	package:fzf
actKillLine	plugged/fzf/src/terminal.go	/^	actKillLine$/;"	c	package:fzf
actKillWord	plugged/fzf/src/terminal.go	/^	actKillWord$/;"	c	package:fzf
actLast	plugged/fzf/src/terminal.go	/^	actLast$/;"	c	package:fzf
actMouse	plugged/fzf/src/terminal.go	/^	actMouse$/;"	c	package:fzf
actNextHistory	plugged/fzf/src/terminal.go	/^	actNextHistory$/;"	c	package:fzf
actPageDown	plugged/fzf/src/terminal.go	/^	actPageDown$/;"	c	package:fzf
actPageUp	plugged/fzf/src/terminal.go	/^	actPageUp$/;"	c	package:fzf
actPreview	plugged/fzf/src/terminal.go	/^	actPreview$/;"	c	package:fzf
actPreviewBottom	plugged/fzf/src/terminal.go	/^	actPreviewBottom$/;"	c	package:fzf
actPreviewDown	plugged/fzf/src/terminal.go	/^	actPreviewDown$/;"	c	package:fzf
actPreviewHalfPageDown	plugged/fzf/src/terminal.go	/^	actPreviewHalfPageDown$/;"	c	package:fzf
actPreviewHalfPageUp	plugged/fzf/src/terminal.go	/^	actPreviewHalfPageUp$/;"	c	package:fzf
actPreviewPageDown	plugged/fzf/src/terminal.go	/^	actPreviewPageDown$/;"	c	package:fzf
actPreviewPageUp	plugged/fzf/src/terminal.go	/^	actPreviewPageUp$/;"	c	package:fzf
actPreviewTop	plugged/fzf/src/terminal.go	/^	actPreviewTop$/;"	c	package:fzf
actPreviewUp	plugged/fzf/src/terminal.go	/^	actPreviewUp$/;"	c	package:fzf
actPreviousHistory	plugged/fzf/src/terminal.go	/^	actPreviousHistory$/;"	c	package:fzf
actPrintQuery	plugged/fzf/src/terminal.go	/^	actPrintQuery$/;"	c	package:fzf
actRefreshPreview	plugged/fzf/src/terminal.go	/^	actRefreshPreview$/;"	c	package:fzf
actReload	plugged/fzf/src/terminal.go	/^	actReload$/;"	c	package:fzf
actReplaceQuery	plugged/fzf/src/terminal.go	/^	actReplaceQuery$/;"	c	package:fzf
actRune	plugged/fzf/src/terminal.go	/^	actRune$/;"	c	package:fzf
actSelect	plugged/fzf/src/terminal.go	/^	actSelect$/;"	c	package:fzf
actSelectAll	plugged/fzf/src/terminal.go	/^	actSelectAll$/;"	c	package:fzf
actSigStop	plugged/fzf/src/terminal.go	/^	actSigStop$/;"	c	package:fzf
actToggle	plugged/fzf/src/terminal.go	/^	actToggle$/;"	c	package:fzf
actToggleAll	plugged/fzf/src/terminal.go	/^	actToggleAll$/;"	c	package:fzf
actToggleDown	plugged/fzf/src/terminal.go	/^	actToggleDown$/;"	c	package:fzf
actToggleIn	plugged/fzf/src/terminal.go	/^	actToggleIn$/;"	c	package:fzf
actToggleOut	plugged/fzf/src/terminal.go	/^	actToggleOut$/;"	c	package:fzf
actTogglePreview	plugged/fzf/src/terminal.go	/^	actTogglePreview$/;"	c	package:fzf
actTogglePreviewWrap	plugged/fzf/src/terminal.go	/^	actTogglePreviewWrap$/;"	c	package:fzf
actToggleSearch	plugged/fzf/src/terminal.go	/^	actToggleSearch$/;"	c	package:fzf
actToggleSort	plugged/fzf/src/terminal.go	/^	actToggleSort$/;"	c	package:fzf
actToggleUp	plugged/fzf/src/terminal.go	/^	actToggleUp$/;"	c	package:fzf
actUnbind	plugged/fzf/src/terminal.go	/^	actUnbind$/;"	c	package:fzf
actUnixLineDiscard	plugged/fzf/src/terminal.go	/^	actUnixLineDiscard$/;"	c	package:fzf
actUnixWordRubout	plugged/fzf/src/terminal.go	/^	actUnixWordRubout$/;"	c	package:fzf
actUp	plugged/fzf/src/terminal.go	/^	actUp$/;"	c	package:fzf
actYank	plugged/fzf/src/terminal.go	/^	actYank$/;"	c	package:fzf
action	plugged/fzf/src/terminal.go	/^type action struct {$/;"	s	package:fzf
actionType	plugged/fzf/src/terminal.go	/^type actionType int$/;"	t	package:fzf	typeref:typename:int
activeTempFiles	plugged/fzf/src/terminal.go	/^var activeTempFiles []string$/;"	v	package:fzf	typeref:typename:[]string
addChild	plugged/vim-go/test/parse.go	/^func (p *parser) addChild(n *Node) {$/;"	f	struct:html.parser
addElement	plugged/vim-go/test/parse.go	/^func (p *parser) addElement() {$/;"	f	struct:html.parser
addFormattingElement	plugged/vim-go/test/parse.go	/^func (p *parser) addFormattingElement() {$/;"	f	struct:html.parser
addText	plugged/vim-go/test/parse.go	/^func (p *parser) addText(text string) {$/;"	f	struct:html.parser
af	plugged/vim-go/ftplugin/go.vim	/^  onoremap <buffer> <silent> af :<c-u>call go#textobj#Function('a')<cr>$/;"	m
af	plugged/vim-go/ftplugin/go.vim	/^  xnoremap <buffer> <silent> af :<c-u>call go#textobj#Function('a')<cr>$/;"	m
afe	plugged/vim-go/test/parse.go	/^	oe, afe nodeStack$/;"	m	struct:html.parser	typeref:typename:nodeStack
afterAfterBodyIM	plugged/vim-go/test/parse.go	/^func afterAfterBodyIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
afterAfterFramesetIM	plugged/vim-go/test/parse.go	/^func afterAfterFramesetIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
afterBodyIM	plugged/vim-go/test/parse.go	/^func afterBodyIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
afterFramesetIM	plugged/vim-go/test/parse.go	/^func afterFramesetIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
afterHeadIM	plugged/vim-go/test/parse.go	/^func afterHeadIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
airline#themes#twofirewatch#refresh	plugged/vim-two-firewatch/autoload/airline/themes/twofirewatch.vim	/^function! airline#themes#twofirewatch#refresh()$/;"	f
algo	plugged/fzf/src/algo/algo.go	/^package algo$/;"	p
algo	plugged/fzf/src/algo/algo_test.go	/^package algo$/;"	p
algo	plugged/fzf/src/algo/normalize.go	/^package algo$/;"	p
all	plugged/fzf/Makefile	/^all: target\/$(BINARY)$/;"	t
all	plugged/vim-go/Makefile	/^all: install lint test$/;"	t
allItems	plugged/fzf/src/terminal_test.go	/^	allItems []*Item$/;"	m	struct:fzf.give	typeref:typename:[]*Item
alloc16	plugged/fzf/src/algo/algo.go	/^func alloc16(offset int, slab *util.Slab, size int) (int, []int16) {$/;"	f	package:algo	typeref:typename:(int, []int16)
alloc32	plugged/fzf/src/algo/algo.go	/^func alloc32(offset int, slab *util.Slab, size int) (int, []int32) {$/;"	f	package:algo	typeref:typename:(int, []int32)
ansi	plugged/fzf/src/terminal.go	/^	ansi         bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
ansiBenchmarkString	plugged/fzf/src/ansi_test.go	/^const ansiBenchmarkString = "\\x1b[38;5;81m\\x1b[01;31m\\x1b[Kkernel\/\\x1b[0m\\x1b[38;5;81mbpf\//;"	c	package:fzf
ansiOffset	plugged/fzf/src/ansi.go	/^type ansiOffset struct {$/;"	s	package:fzf
ansiRegexReference	plugged/fzf/src/ansi_test.go	/^var ansiRegexReference = regexp.MustCompile("(?:\\x1b[\\\\[()][0-9;]*[a-zA-Z@]|\\x1b][0-9];[[:pr/;"	v	package:fzf
ansiState	plugged/fzf/src/ansi.go	/^type ansiState struct {$/;"	s	package:fzf
any_include?	plugged/fzf/test/test_go.rb	/^          def any_include?(val)$/;"	f	method:Tmux.until
append	plugged/fzf/src/history.go	/^func (h *History) append(line string) error {$/;"	f	struct:fzf.History	typeref:typename:error
append_line	plugged/fzf/install	/^append_line() {$/;"	f
args=	plugged/fzf/bin/fzf-tmux	/^      args=()$/;"	f
args=	plugged/fzf/bin/fzf-tmux	/^args=()$/;"	f
args=	plugged/fzf/shell/completion.bash	/^    args=()$/;"	f
args=	plugged/fzf/shell/completion.zsh	/^    args=()$/;"	f
asciiFuzzyIndex	plugged/fzf/src/algo/algo.go	/^func asciiFuzzyIndex(input *util.Chars, pattern []rune, caseSensitive bool) int {$/;"	f	package:algo	typeref:typename:int
ask	plugged/fzf/install	/^ask() {$/;"	f
ask	plugged/fzf/uninstall	/^ask() {$/;"	f
assert	plugged/fzf/src/merger_test.go	/^func assert(t *testing.T, cond bool, msg ...string) {$/;"	f	package:fzf
assert	plugged/fzf/src/tui/tcell_test.go	/^func assert(t *testing.T, context string, got interface{}, want interface{}) bool {$/;"	f	package:tui	typeref:typename:bool
assertMatch	plugged/fzf/src/algo/algo_test.go	/^func assertMatch(t *testing.T, fun Algo, caseSensitive, forward bool, input, pattern string, sid/;"	f	package:algo
assertMatch2	plugged/fzf/src/algo/algo_test.go	/^func assertMatch2(t *testing.T, fun Algo, caseSensitive, normalize, forward bool, input, pattern/;"	f	package:algo
at	plugged/fzf/src/terminal.go	/^	at   time.Time$/;"	m	struct:fzf.selectedItem	typeref:typename:time.Time
atof	plugged/fzf/src/options.go	/^func atof(str string) float64 {$/;"	f	package:fzf	typeref:typename:float64
atoi	plugged/fzf/src/options.go	/^func atoi(str string) int {$/;"	f	package:fzf	typeref:typename:int
atoi	plugged/fzf/src/tui/light.go	/^func atoi(s string, defaultValue int) int {$/;"	f	package:tui	typeref:typename:int
attr	plugged/fzf/src/ansi.go	/^	attr tui.Attr$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Attr
attr	plugged/fzf/src/tui/tui.go	/^	attr Attr$/;"	m	struct:tui.ColorPair	typeref:typename:Attr
attrCodes	plugged/fzf/src/tui/light.go	/^func attrCodes(attr Attr) []string {$/;"	f	package:tui	typeref:typename:[]string
author	plugged/vim-go/addon-info.json	/^  "author": "Fatih Arslan <fatih@arslan.io>",$/;"	s
awkBlack	plugged/fzf/src/tokenizer.go	/^	awkBlack$/;"	c	package:fzf
awkNil	plugged/fzf/src/tokenizer.go	/^	awkNil = iota$/;"	c	package:fzf
awkTokenizer	plugged/fzf/src/tokenizer.go	/^func awkTokenizer(input string) ([]string, int) {$/;"	f	package:fzf	typeref:typename:([]string, int)
awkWhite	plugged/fzf/src/tokenizer.go	/^	awkWhite$/;"	c	package:fzf
b:current_syntax	plugged/vim-fugitive/syntax/fugitive.vim	/^let b:current_syntax = "fugitive"$/;"	v
b:current_syntax	plugged/vim-fugitive/syntax/fugitiveblame.vim	/^let b:current_syntax = "fugitiveblame"$/;"	v
b:current_syntax	plugged/vim-go/syntax/go.vim	/^let b:current_syntax = "go"$/;"	v
b:current_syntax	plugged/vim-go/syntax/godebugoutput.vim	/^let b:current_syntax = "godebugoutput"$/;"	v
b:current_syntax	plugged/vim-go/syntax/godebugstacktrace.vim	/^let b:current_syntax = "godebugoutput"$/;"	v
b:current_syntax	plugged/vim-go/syntax/godebugvariables.vim	/^let b:current_syntax = "godebugvariables"$/;"	v
b:current_syntax	plugged/vim-go/syntax/godefstack.vim	/^let b:current_syntax = "godefstack"$/;"	v
b:current_syntax	plugged/vim-go/syntax/gohtmltmpl.vim	/^let b:current_syntax = "gohtmltmpl"$/;"	v
b:current_syntax	plugged/vim-go/syntax/gomod.vim	/^let b:current_syntax = "gomod"$/;"	v
b:current_syntax	plugged/vim-go/syntax/gosum.vim	/^let b:current_syntax = "gomod"$/;"	v
b:current_syntax	plugged/vim-go/syntax/gotexttmpl.vim	/^let b:current_syntax = "gotexttmpl"$/;"	v
b:current_syntax	plugged/vim-go/syntax/vimgo.vim	/^let b:current_syntax = "vimgo"$/;"	v
b:did_ftplugin	plugged/vim-fugitive/ftplugin/fugitiveblame.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-go/ftplugin/asm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-go/ftplugin/go.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-go/ftplugin/gomod.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_indent	plugged/vim-go/indent/go.vim	/^let b:did_indent = 1$/;"	v
b:undo_ftplugin	plugged/vim-go/ftplugin/asm.vim	/^let b:undo_ftplugin = "setl fo< com< cms<$/;"	v
b:undo_ftplugin	plugged/vim-go/ftplugin/go.vim	/^let b:undo_ftplugin = "setl fo< com< cms<"$/;"	v
b:undo_ftplugin	plugged/vim-go/ftplugin/gomod.vim	/^let b:undo_ftplugin = "setl fo< com< cms<$/;"	v
bar	plugged/vim-go/autoload/go/test-fixtures/lint/src/lint/golangci-lint/problems/importabs/ok.go	/^func bar() {}$/;"	f	package:problems
base	plugged/vim-go/assets/vim-go.svg	/^     fit-margin-bottom="0">$/;"	i
bash	plugged/fzf/test/test_go.rb	/^    def bash$/;"	S	class:Shell
basicMatch	plugged/fzf/src/pattern.go	/^func (p *Pattern) basicMatch(item *Item, withPos bool, slab *util.Slab) (Offset, int, *[]int) {$/;"	f	struct:fzf.Pattern	typeref:typename:(Offset, int, *[]int)
baz	plugged/vim-go/autoload/go/test-fixtures/lint/src/lint/baz.go	/^func baz() {}$/;"	f	package:lint
baz	plugged/vim-go/autoload/go/test-fixtures/lint/src/lint/golangci-lint/problems/importabs/problems.go	/^func baz() {}$/;"	f	package:problems
beforeHTMLIM	plugged/vim-go/test/parse.go	/^func beforeHTMLIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
beforeHeadIM	plugged/vim-go/test/parse.go	/^func beforeHeadIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
begin	plugged/fzf/src/tokenizer.go	/^	begin int$/;"	m	struct:fzf.Range	typeref:typename:int
bench	plugged/fzf/Makefile	/^bench:$/;"	t
bg	plugged/fzf/src/ansi.go	/^	bg   tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
bg	plugged/fzf/src/tui/light.go	/^	bg       Color$/;"	m	struct:tui.LightWindow	typeref:typename:Color
bg	plugged/fzf/src/tui/tui.go	/^	bg   Color$/;"	m	struct:tui.ColorPair	typeref:typename:Color
bin/fzf	plugged/fzf/Makefile	/^bin\/fzf: target\/$(BINARY) | bin$/;"	t
bonusAt	plugged/fzf/src/algo/algo.go	/^func bonusAt(input *util.Chars, idx int) int16 {$/;"	f	package:algo	typeref:typename:int16
bonusBoundary	plugged/fzf/src/algo/algo.go	/^	bonusBoundary = scoreMatch \/ 2$/;"	c	package:algo
bonusCamel123	plugged/fzf/src/algo/algo.go	/^	bonusCamel123 = bonusBoundary + scoreGapExtension$/;"	c	package:algo
bonusConsecutive	plugged/fzf/src/algo/algo.go	/^	bonusConsecutive = -(scoreGapStart + scoreGapExtension)$/;"	c	package:algo
bonusFirstCharMultiplier	plugged/fzf/src/algo/algo.go	/^	bonusFirstCharMultiplier = 2$/;"	c	package:algo
bonusFor	plugged/fzf/src/algo/algo.go	/^func bonusFor(prevClass charClass, class charClass) int16 {$/;"	f	package:algo	typeref:typename:int16
bonusNonWord	plugged/fzf/src/algo/algo.go	/^	bonusNonWord = scoreMatch \/ 2$/;"	c	package:algo
border	plugged/fzf/src/options.go	/^	border      tui.BorderShape$/;"	m	struct:fzf.previewOpts	typeref:typename:tui.BorderShape
border	plugged/fzf/src/terminal.go	/^	border       tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
border	plugged/fzf/src/tui/light.go	/^	border   BorderStyle$/;"	m	struct:tui.LightWindow	typeref:typename:BorderStyle
borderShape	plugged/fzf/src/terminal.go	/^	borderShape  tui.BorderShape$/;"	m	struct:fzf.Terminal	typeref:typename:tui.BorderShape
borderStyle	plugged/fzf/src/tui/tcell.go	/^	borderStyle BorderStyle$/;"	m	struct:tui.TcellWindow	typeref:typename:BorderStyle
bottomLeft	plugged/fzf/src/tui/tui.go	/^	bottomLeft  rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
bottomRight	plugged/fzf/src/tui/tui.go	/^	bottomRight rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
buffer	plugged/fzf/src/tui/light.go	/^	buffer        []byte$/;"	m	struct:tui.LightRenderer	typeref:typename:[]byte
build	plugged/fzf/Makefile	/^build:$/;"	t
buildCacheKey	plugged/fzf/src/pattern.go	/^func (p *Pattern) buildCacheKey() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
buildLists	plugged/fzf/src/merger_test.go	/^func buildLists(partiallySorted bool) ([][]Result, []Result) {$/;"	f	package:fzf	typeref:typename:([][]Result, []Result)
buildPlusList	plugged/fzf/src/terminal.go	/^func (t *Terminal) buildPlusList(template string, forcePlus bool) (bool, []*Item) {$/;"	f	struct:fzf.Terminal	typeref:typename:(bool, []*Item)
buildResult	plugged/fzf/src/result.go	/^func buildResult(item *Item, offsets []Offset, score int) Result {$/;"	f	package:fzf	typeref:typename:Result
buttonScope	plugged/vim-go/test/parse.go	/^	buttonScope$/;"	c	package:html
byBegin	plugged/fzf/src/options.go	/^	byBegin$/;"	c	package:fzf
byEnd	plugged/fzf/src/options.go	/^	byEnd$/;"	c	package:fzf
byLength	plugged/fzf/src/options.go	/^	byLength$/;"	c	package:fzf
byScore	plugged/fzf/src/options.go	/^	byScore criterion = iota$/;"	c	package:fzf	typeref:type:criterion
byTimeOrder	plugged/fzf/src/terminal.go	/^type byTimeOrder []selectedItem$/;"	t	package:fzf	typeref:typename:[]selectedItem
cache	plugged/fzf/src/cache.go	/^	cache map[*Chunk]*queryCache$/;"	m	struct:fzf.ChunkCache	typeref:typename:map[*Chunk]*queryCache
cacheKey	plugged/fzf/src/pattern.go	/^	cacheKey      string$/;"	m	struct:fzf.Pattern	typeref:typename:string
cacheable	plugged/fzf/src/merger.go	/^func (mg *Merger) cacheable() bool {$/;"	f	struct:fzf.Merger	typeref:typename:bool
cacheable	plugged/fzf/src/pattern.go	/^	cacheable     bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
calculateScore	plugged/fzf/src/algo/algo.go	/^func calculateScore(caseSensitive bool, normalize bool, text *util.Chars, pattern []rune, sidx i/;"	f	package:algo	typeref:typename:(int, *[]int)
calculateSize	plugged/fzf/src/terminal.go	/^func calculateSize(base int, size sizeSpec, occupied int, minSize int, pad int) int {$/;"	f	package:fzf	typeref:typename:int
cancelPreview	plugged/fzf/src/terminal.go	/^func (t *Terminal) cancelPreview() {$/;"	f	struct:fzf.Terminal
capture	plugged/fzf/test/test_go.rb	/^  def capture$/;"	f	class:Tmux
caseSensitive	plugged/fzf/src/pattern.go	/^	caseSensitive bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
caseSensitive	plugged/fzf/src/pattern.go	/^	caseSensitive bool$/;"	m	struct:fzf.term	typeref:typename:bool
cc	plugged/vim-go/assets/vim-go.svg	/^   inkscape:export-ydpi="46.84">$/;"	n	uri:http://creativecommons.org/ns#
charClass	plugged/fzf/src/algo/algo.go	/^type charClass int$/;"	t	package:algo	typeref:typename:int
charClassOf	plugged/fzf/src/algo/algo.go	/^func charClassOf(char rune) charClass {$/;"	f	package:algo	typeref:typename:charClass
charClassOfAscii	plugged/fzf/src/algo/algo.go	/^func charClassOfAscii(char rune) charClass {$/;"	f	package:algo	typeref:typename:charClass
charClassOfNonAscii	plugged/fzf/src/algo/algo.go	/^func charClassOfNonAscii(char rune) charClass {$/;"	f	package:algo	typeref:typename:charClass
charLetter	plugged/fzf/src/algo/algo.go	/^	charLetter$/;"	c	package:algo
charLower	plugged/fzf/src/algo/algo.go	/^	charLower$/;"	c	package:algo
charNonWord	plugged/fzf/src/algo/algo.go	/^	charNonWord charClass = iota$/;"	c	package:algo	typeref:type:charClass
charNumber	plugged/fzf/src/algo/algo.go	/^	charNumber$/;"	c	package:algo
charUpper	plugged/fzf/src/algo/algo.go	/^	charUpper$/;"	c	package:algo
checkAscii	plugged/fzf/src/util/chars.go	/^func checkAscii(bytes []byte) (bool, int) {$/;"	f	package:util	typeref:typename:(bool, int)
check_binary	plugged/fzf/install	/^check_binary() {$/;"	f
check_binary	plugged/fzf/install.ps1	/^function check_binary () {$/;"	f
chunkSize	plugged/fzf/src/constants.go	/^	chunkSize int = 100$/;"	c	package:fzf	typeref:typename:int
chunks	plugged/fzf/src/chunklist.go	/^	chunks []*Chunk$/;"	m	struct:fzf.ChunkList	typeref:typename:[]*Chunk
chunks	plugged/fzf/src/matcher.go	/^	chunks     []*Chunk$/;"	m	struct:fzf.MatchRequest	typeref:typename:[]*Chunk
chunks	plugged/fzf/src/merger.go	/^	chunks  *[]*Chunk$/;"	m	struct:fzf.Merger	typeref:typename:*[]*Chunk
circle4830	plugged/vim-go/assets/vim-go.svg	/^         style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visib/;"	i
circle4830-3	plugged/vim-go/assets/vim-go.svg	/^         transform="matrix(0.98640333,0.16434257,-0.16434257,0.98640333,0,0)" \/>$/;"	i
clap_match_color	plugged/nord-vim/colors/nord.vim	/^  let clap_match_color = s:clap_matches[s:nord_clap_match_i % len(s:clap_matches) - 1]$/;"	v
clean	plugged/fzf/Makefile	/^clean:$/;"	t
clean	plugged/vim-go/Makefile	/^clean:$/;"	t
cleanExit	plugged/fzf/src/terminal.go	/^	cleanExit    bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
cleanTemporaryFiles	plugged/fzf/src/terminal.go	/^func cleanTemporaryFiles() {$/;"	f	package:fzf
cleanse	plugged/fzf/src/tui/light.go	/^func cleanse(str string) string {$/;"	f	package:tui	typeref:typename:string
cleanup	plugged/fzf/bin/fzf-tmux	/^cleanup() {$/;"	f
clearActiveFormattingElements	plugged/vim-go/test/parse.go	/^func (p *parser) clearActiveFormattingElements() {$/;"	f	struct:html.parser
clearCache	plugged/fzf/src/matcher.go	/^	clearCache bool$/;"	m	struct:fzf.MatchRequest	typeref:typename:bool
clearChunkCache	plugged/fzf/src/pattern.go	/^func clearChunkCache() {$/;"	f	package:fzf
clearCode	plugged/fzf/src/terminal.go	/^const clearCode string = "\\x1b[2J"$/;"	c	package:fzf	typeref:typename:string
clearOnExit	plugged/fzf/src/tui/light.go	/^	clearOnExit   bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
clearPatternCache	plugged/fzf/src/pattern.go	/^func clearPatternCache() {$/;"	f	package:fzf
clearStackToContext	plugged/vim-go/test/parse.go	/^func (p *parser) clearStackToContext(s scope) {$/;"	f	struct:html.parser
clickY	plugged/fzf/src/tui/light.go	/^	clickY        []int$/;"	m	struct:tui.LightRenderer	typeref:typename:[]int
clickY	plugged/fzf/src/tui/tui.go	/^	clickY       []int$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:[]int
closePlatform	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) closePlatform() {$/;"	f	unknown:tui.LightRenderer
closePlatform	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) closePlatform() {$/;"	f	unknown:tui.LightRenderer
colBlack	plugged/fzf/src/tui/tui.go	/^	colBlack Color = iota$/;"	c	package:tui	typeref:type:Color
colBlue	plugged/fzf/src/tui/tui.go	/^	colBlue$/;"	c	package:tui
colCyan	plugged/fzf/src/tui/tui.go	/^	colCyan$/;"	c	package:tui
colDefault	plugged/fzf/src/tui/tui.go	/^	colDefault   Color = -1$/;"	c	package:tui	typeref:type:Color
colGreen	plugged/fzf/src/tui/tui.go	/^	colGreen$/;"	c	package:tui
colMagenta	plugged/fzf/src/tui/tui.go	/^	colMagenta$/;"	c	package:tui
colRed	plugged/fzf/src/tui/tui.go	/^	colRed$/;"	c	package:tui
colUndefined	plugged/fzf/src/tui/tui.go	/^	colUndefined Color = -2$/;"	c	package:tui	typeref:type:Color
colWhite	plugged/fzf/src/tui/tui.go	/^	colWhite$/;"	c	package:tui
colYellow	plugged/fzf/src/tui/tui.go	/^	colYellow$/;"	c	package:tui
color	plugged/fzf/src/ansi.go	/^	color  ansiState$/;"	m	struct:fzf.ansiOffset	typeref:typename:ansiState
color	plugged/fzf/src/result.go	/^	color  tui.ColorPair$/;"	m	struct:fzf.colorOffset	typeref:typename:tui.ColorPair
color	plugged/fzf/src/tui/tcell.go	/^	color       bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
color	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  fun <SID>color(r, g, b)$/;"	f
colorCodes	plugged/fzf/src/tui/light.go	/^func colorCodes(fg Color, bg Color) []string {$/;"	f	package:tui	typeref:typename:[]string
colorOffset	plugged/fzf/src/result.go	/^type colorOffset struct {$/;"	s	package:fzf
colorOffsets	plugged/fzf/src/result.go	/^func (result *Result) colorOffsets(matchOffsets []Offset, theme *tui.ColorTheme, colBase tui.Col/;"	f	struct:fzf.Result	typeref:typename:[]colorOffset
colored	plugged/fzf/src/ansi.go	/^func (s *ansiState) colored() bool {$/;"	f	struct:fzf.ansiState	typeref:typename:bool
colored	plugged/fzf/src/tui/light.go	/^	colored  bool$/;"	m	struct:tui.LightWindow	typeref:typename:bool
colors	plugged/fzf/src/item.go	/^	colors      *[]ansiOffset \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]ansiOffset
command	plugged/fzf/src/options.go	/^	command     string$/;"	m	struct:fzf.previewOpts	typeref:typename:string
command	plugged/fzf/src/reader.go	/^	command  *string$/;"	m	struct:fzf.Reader	typeref:typename:*string
command	plugged/fzf/src/terminal.go	/^	command *string$/;"	m	struct:fzf.searchRequest	typeref:typename:*string
compareRanks	plugged/fzf/src/result_others.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f	package:fzf	typeref:typename:bool
compareRanks	plugged/fzf/src/result_x86.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f	package:fzf	typeref:typename:bool
complete	plugged/vim-go/autoload/go/test-fixtures/complete/complete.go	/^package complete$/;"	p
cond	plugged/fzf/src/util/eventbox.go	/^	cond   *sync.Cond$/;"	m	struct:util.EventBox	typeref:typename:*sync.Cond
config	plugged/vim-go/autoload/go/test-fixtures/config/buildtags/buildtags.go	/^package config$/;"	p
config	plugged/vim-go/autoload/go/test-fixtures/config/buildtags/constrainedfoo.go	/^package config$/;"	p
config	plugged/vim-go/autoload/go/test-fixtures/config/buildtags/foo.go	/^package config$/;"	p
consoleDevice	plugged/fzf/src/tui/light.go	/^const consoleDevice string = "\/dev\/tty"$/;"	c	package:tui	typeref:typename:string
consoleFlagsInput	plugged/fzf/src/tui/light_windows.go	/^	consoleFlagsInput  = uint32(windows.ENABLE_VIRTUAL_TERMINAL_INPUT | windows.ENABLE_PROCESSED_IN/;"	v	package:tui
consoleFlagsOutput	plugged/fzf/src/tui/light_windows.go	/^	consoleFlagsOutput = uint32(windows.ENABLE_VIRTUAL_TERMINAL_PROCESSING | windows.ENABLE_PROCESS/;"	v	package:tui
constrain	plugged/fzf/src/terminal.go	/^func (t *Terminal) constrain() {$/;"	f	struct:fzf.Terminal
context	plugged/vim-go/test/parse.go	/^	context *Node$/;"	m	struct:html.parser	typeref:typename:*Node
convertBoolToInt32	plugged/fzf/src/util/atomicbool.go	/^func convertBoolToInt32(b bool) int32 {$/;"	f	package:util	typeref:typename:int32
coordinatorDelayMax	plugged/fzf/src/constants.go	/^	coordinatorDelayMax  time.Duration = 100 * time.Millisecond$/;"	c	package:fzf	typeref:typename:time.Duration
coordinatorDelayStep	plugged/fzf/src/constants.go	/^	coordinatorDelayStep time.Duration = 10 * time.Millisecond$/;"	c	package:fzf	typeref:typename:time.Duration
copyAttributes	plugged/vim-go/test/parse.go	/^func copyAttributes(dst *Node, src Token) {$/;"	f	package:html
copySlice	plugged/fzf/src/terminal.go	/^func copySlice(slice []rune) []rune {$/;"	f	package:fzf	typeref:typename:[]rune
count	plugged/fzf/src/chunklist.go	/^	count int$/;"	m	struct:fzf.Chunk	typeref:typename:int
count	plugged/fzf/src/merger.go	/^	count   int$/;"	m	struct:fzf.Merger	typeref:typename:int
count	plugged/fzf/src/terminal.go	/^	count        int$/;"	m	struct:fzf.Terminal	typeref:typename:int
counts	plugged/fzf/test/test_go.rb	/^          def counts$/;"	f	method:Tmux.until
cprint2	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) cprint2(fg Color, bg Color, attr Attr, text string) {$/;"	f	struct:tui.LightWindow
create_file	plugged/fzf/install	/^create_file() {$/;"	f
criterion	plugged/fzf/src/options.go	/^type criterion int$/;"	t	package:fzf	typeref:typename:int
csi	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) csi(code string) {$/;"	f	unknown:tui.LightRenderer
csi	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) csi(code string) {$/;"	f	struct:tui.LightWindow
csiColor	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) csiColor(fg Color, bg Color, attr Attr) bool {$/;"	f	struct:tui.LightWindow	typeref:typename:bool
ctrlp#decls#accept	plugged/vim-go/autoload/ctrlp/decls.vim	/^function! ctrlp#decls#accept(mode, str) abort$/;"	f
ctrlp#decls#cmd	plugged/vim-go/autoload/ctrlp/decls.vim	/^function! ctrlp#decls#cmd(mode, ...) abort$/;"	f
ctrlp#decls#enter	plugged/vim-go/autoload/ctrlp/decls.vim	/^function! ctrlp#decls#enter() abort$/;"	f
ctrlp#decls#exit	plugged/vim-go/autoload/ctrlp/decls.vim	/^function! ctrlp#decls#exit() abort$/;"	f
ctrlp#decls#init	plugged/vim-go/autoload/ctrlp/decls.vim	/^function! ctrlp#decls#init() abort$/;"	f
current	plugged/fzf/src/history.go	/^func (h *History) current() string {$/;"	f	struct:fzf.History	typeref:typename:string
current	plugged/fzf/src/terminal.go	/^	current  bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
currentItem	plugged/fzf/src/terminal.go	/^func (t *Terminal) currentItem() *Item {$/;"	f	struct:fzf.Terminal	typeref:typename:*Item
cursor	plugged/fzf/src/history.go	/^	cursor   int$/;"	m	struct:fzf.History	typeref:typename:int
cursors	plugged/fzf/src/merger.go	/^	cursors []int$/;"	m	struct:fzf.Merger	typeref:typename:[]int
cx	plugged/fzf/src/terminal.go	/^	cx           int$/;"	m	struct:fzf.Terminal	typeref:typename:int
cy	plugged/fzf/src/terminal.go	/^	cy           int$/;"	m	struct:fzf.Terminal	typeref:typename:int
cycle	plugged/fzf/src/options.go	/^	cycle       bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
cycle	plugged/fzf/src/terminal.go	/^	cycle        bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
dc	plugged/vim-go/assets/vim-go.svg	/^   inkscape:export-ydpi="46.84">$/;"	n	uri:http://purl.org/dc/elements/1.1/
debugV2	plugged/fzf/src/algo/algo.go	/^func debugV2(T []rune, pattern []rune, F []int32, lastIdx int, H []int16, C []int16) {$/;"	f	package:algo
default	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let default = exists('&previewpopup') ? !empty(&previewpopup) : 0$/;"	v
defaultCommand	plugged/fzf/src/constants.go	/^var defaultCommand string$/;"	v	package:fzf	typeref:typename:string
defaultEscDelay	plugged/fzf/src/tui/light.go	/^	defaultEscDelay = 100$/;"	c	package:tui
defaultHeight	plugged/fzf/src/tui/light.go	/^	defaultHeight = 24$/;"	c	package:tui
defaultHistoryMax	plugged/fzf/src/constants.go	/^	defaultHistoryMax int = 1000$/;"	c	package:fzf	typeref:typename:int
defaultJumpLabels	plugged/fzf/src/constants.go	/^	defaultJumpLabels string = "asdfghjklqwertyuiopzxcvbnm1234567890ASDFGHJKLQWERTYUIOPZXCVBNM`~;:,/;"	c	package:fzf	typeref:typename:string
defaultKeymap	plugged/fzf/src/terminal.go	/^func defaultKeymap() map[tui.Event][]action {$/;"	f	package:fzf	typeref:typename:map[tui.Event][]action
defaultMargin	plugged/fzf/src/options.go	/^func defaultMargin() [4]sizeSpec {$/;"	f	package:fzf	typeref:typename:[4]sizeSpec
defaultOptions	plugged/fzf/src/options.go	/^func defaultOptions() *Options {$/;"	f	package:fzf	typeref:typename:*Options
defaultPreviewOpts	plugged/fzf/src/options.go	/^func defaultPreviewOpts(command string) previewOpts {$/;"	f	package:fzf	typeref:typename:previewOpts
defaultScope	plugged/vim-go/test/parse.go	/^	defaultScope scope = iota$/;"	c	package:html	typeref:type:scope
defaultScopeStopTags	plugged/vim-go/test/parse.go	/^	defaultScopeStopTags = map[string][]a.Atom{$/;"	v	package:html
defaultTheme	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) defaultTheme() *ColorTheme {$/;"	f	unknown:tui.LightRenderer	typeref:typename:*ColorTheme
defaultTheme	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) defaultTheme() *ColorTheme {$/;"	f	unknown:tui.LightRenderer	typeref:typename:*ColorTheme
defaultTheme	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) defaultTheme() *ColorTheme {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:*ColorTheme
defaultWidth	plugged/fzf/src/tui/light.go	/^	defaultWidth  = 80$/;"	c	package:tui
default_grep	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let default_grep = 'grep'$/;"	v
defs4	plugged/vim-go/assets/vim-go.svg	/^     id="defs4">$/;"	i
delChar	plugged/fzf/src/terminal.go	/^func (t *Terminal) delChar() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
delimNil	plugged/fzf/src/reader.go	/^	delimNil bool$/;"	m	struct:fzf.Reader	typeref:typename:bool
delimiter	plugged/fzf/src/pattern.go	/^	delimiter     Delimiter$/;"	m	struct:fzf.Pattern	typeref:typename:Delimiter
delimiter	plugged/fzf/src/terminal.go	/^	delimiter    Delimiter$/;"	m	struct:fzf.Terminal	typeref:typename:Delimiter
delimiterRegexp	plugged/fzf/src/options.go	/^func delimiterRegexp(str string) Delimiter {$/;"	f	package:fzf	typeref:typename:Delimiter
description	plugged/vim-go/addon-info.json	/^  "description": "Full featured Go (golang) support for Vim.",$/;"	s
deselectItem	plugged/fzf/src/terminal.go	/^func (t *Terminal) deselectItem(item *Item) {$/;"	f	struct:fzf.Terminal
deselectItemChanged	plugged/fzf/src/terminal.go	/^func (t *Terminal) deselectItemChanged(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
devPrefixes	plugged/fzf/src/tui/ttyname_unix.go	/^var devPrefixes = [...]string{"\/dev\/pts\/", "\/dev\/"}$/;"	v	package:tui
displayWidth	plugged/fzf/src/terminal.go	/^func (t *Terminal) displayWidth(runes []rune) int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
displayWidth	plugged/fzf/src/tui/light.go	/^	displayWidth int$/;"	m	struct:tui.wrappedLine	typeref:typename:int
displayWidthWithLimit	plugged/fzf/src/terminal.go	/^func (t *Terminal) displayWidthWithLimit(runes []rune, prefixWidth int, limit int) int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
doc	plugged/vim-go/test/parse.go	/^	doc *Node$/;"	m	struct:html.parser	typeref:typename:*Node
docker	plugged/fzf/Makefile	/^docker:$/;"	t
docker	plugged/vim-go/Makefile	/^docker:$/;"	t
docker-body	plugged/vim-go/assets/vim-go.svg	/^       osb:paint="solid">$/;"	d
docker-body	plugged/vim-go/assets/vim-go.svg	/^       osb:paint="solid">$/;"	i
docker-eye	plugged/vim-go/assets/vim-go.svg	/^       osb:paint="solid">$/;"	d
docker-eye	plugged/vim-go/assets/vim-go.svg	/^       osb:paint="solid">$/;"	i
docker-iris	plugged/vim-go/assets/vim-go.svg	/^       osb:paint="solid">$/;"	d
docker-iris	plugged/vim-go/assets/vim-go.svg	/^       osb:paint="solid">$/;"	i
docker-jaw	plugged/vim-go/assets/vim-go.svg	/^       osb:paint="solid">$/;"	d
docker-jaw	plugged/vim-go/assets/vim-go.svg	/^       osb:paint="solid">$/;"	i
docker-line	plugged/vim-go/assets/vim-go.svg	/^       osb:paint="solid">$/;"	d
docker-line	plugged/vim-go/assets/vim-go.svg	/^       osb:paint="solid">$/;"	i
docker-test	plugged/fzf/Makefile	/^docker-test:$/;"	t
doubleClickDuration	plugged/fzf/src/tui/tui.go	/^	doubleClickDuration = 500 * time.Millisecond$/;"	c	package:tui
download	plugged/fzf/install	/^download() {$/;"	f
download	plugged/fzf/install.ps1	/^function download {$/;"	f
drawBorder	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorder() {$/;"	f	struct:tui.LightWindow
drawBorder	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) drawBorder() {$/;"	f	struct:tui.TcellWindow
drawBorderAround	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderAround() {$/;"	f	struct:tui.LightWindow
drawBorderHorizontal	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderHorizontal(top, bottom bool) {$/;"	f	struct:tui.LightWindow
drawBorderVertical	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderVertical(left, right bool) {$/;"	f	struct:tui.LightWindow
dupeTheme	plugged/fzf/src/options.go	/^func dupeTheme(theme *tui.ColorTheme) *tui.ColorTheme {$/;"	f	package:fzf	typeref:typename:*tui.ColorTheme
eachLine	plugged/fzf/src/terminal.go	/^type eachLine struct {$/;"	s	package:fzf
elementInScope	plugged/vim-go/test/parse.go	/^func (p *parser) elementInScope(s scope, matchTags ...a.Atom) bool {$/;"	f	struct:html.parser	typeref:typename:bool
ellipse4190	plugged/vim-go/assets/vim-go.svg	/^         sodipodi:nodetypes="sssssssssss" \/>$/;"	i
ellipse4523	plugged/vim-go/assets/vim-go.svg	/^         style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visib/;"	i
ellipse4590	plugged/vim-go/assets/vim-go.svg	/^         style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visib/;"	i
ellipse4650	plugged/vim-go/assets/vim-go.svg	/^       sodipodi:nodetypes="sssssssssssssssss" \/>$/;"	i
ellipse4652	plugged/vim-go/assets/vim-go.svg	/^       sodipodi:nodetypes="sssssssssssssssss" \/>$/;"	i
ellipse4814	plugged/vim-go/assets/vim-go.svg	/^         style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visib/;"	i
ellipsis	plugged/fzf/src/terminal.go	/^const ellipsis string = ".."$/;"	c	package:fzf	typeref:typename:string
emptyLine	plugged/fzf/src/terminal.go	/^var emptyLine = itemLine{}$/;"	v	package:fzf
enabled	plugged/fzf/src/terminal.go	/^	enabled    bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
encodePlaceholder	plugged/fzf/src/terminal_test.go	/^func (flags placeholderFlags) encodePlaceholder() string {$/;"	f	unknown:fzf.placeholderFlags	typeref:typename:string
end	plugged/fzf/src/tokenizer.go	/^	end   int$/;"	m	struct:fzf.Range	typeref:typename:int
equals	plugged/fzf/src/ansi.go	/^func (s *ansiState) equals(t *ansiState) bool {$/;"	f	struct:fzf.ansiState	typeref:typename:bool
err	plugged/fzf/src/terminal.go	/^	err  error$/;"	m	struct:fzf.eachLine	typeref:typename:error
errcheck	plugged/vim-go/autoload/go/test-fixtures/lint/src/errcheck/errcheck.go	/^package errcheck$/;"	p
errcheck	plugged/vim-go/autoload/go/test-fixtures/lint/src/errcheck/errcheck_test.go	/^package errcheck$/;"	p
errorExit	plugged/fzf/src/options.go	/^func errorExit(msg string) {$/;"	f	package:fzf
errorExit	plugged/fzf/src/tui/tui.go	/^func errorExit(message string) {$/;"	f	package:tui
escDelay	plugged/fzf/src/tui/light.go	/^	escDelay      int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
escPollInterval	plugged/fzf/src/tui/light.go	/^	escPollInterval = 5$/;"	c	package:tui
escSequence	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) escSequence(sz *int) Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
escapedColon	plugged/fzf/src/options.go	/^	escapedColon = 0$/;"	c	package:fzf
escapedComma	plugged/fzf/src/options.go	/^	escapedComma = 1$/;"	c	package:fzf
escapedPlus	plugged/fzf/src/options.go	/^	escapedPlus  = 2$/;"	c	package:fzf
evaluateScrollOffset	plugged/fzf/src/terminal.go	/^func (t *Terminal) evaluateScrollOffset(list []*Item, height int) int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
event	plugged/fzf/src/reader.go	/^	event    int32$/;"	m	struct:fzf.Reader	typeref:typename:int32
eventBox	plugged/fzf/src/matcher.go	/^	eventBox       *util.EventBox$/;"	m	struct:fzf.Matcher	typeref:typename:*util.EventBox
eventBox	plugged/fzf/src/reader.go	/^	eventBox *util.EventBox$/;"	m	struct:fzf.Reader	typeref:typename:*util.EventBox
eventBox	plugged/fzf/src/terminal.go	/^	eventBox     *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
events	plugged/fzf/src/util/eventbox.go	/^	events Events$/;"	m	struct:util.EventBox	typeref:typename:Events
exec	plugged/fzf/src/reader.go	/^	exec     *exec.Cmd$/;"	m	struct:fzf.Reader	typeref:typename:*exec.Cmd
executeCommand	plugged/fzf/src/terminal.go	/^func (t *Terminal) executeCommand(template string, forcePlus bool, background bool) {$/;"	f	struct:fzf.Terminal
executeRegexp	plugged/fzf/src/options.go	/^var executeRegexp *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
executing	plugged/fzf/src/terminal.go	/^	executing    *util.AtomicBool$/;"	m	struct:fzf.Terminal	typeref:typename:*util.AtomicBool
exitCancel	plugged/fzf/src/constants.go	/^	exitCancel    = -1$/;"	c	package:fzf
exitError	plugged/fzf/src/constants.go	/^	exitError     = 2$/;"	c	package:fzf
exitInterrupt	plugged/fzf/src/constants.go	/^	exitInterrupt = 130$/;"	c	package:fzf
exitNoMatch	plugged/fzf/src/constants.go	/^	exitNoMatch   = 1$/;"	c	package:fzf
exitOk	plugged/fzf/src/constants.go	/^	exitOk        = 0$/;"	c	package:fzf
expect	plugged/fzf/src/terminal.go	/^	expect       map[tui.Event]string$/;"	m	struct:fzf.Terminal	typeref:typename:map[tui.Event]string
extended	plugged/fzf/src/pattern.go	/^	extended      bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
extendedMatch	plugged/fzf/src/pattern.go	/^func (p *Pattern) extendedMatch(item *Item, withPos bool, slab *util.Slab) ([]Offset, int, *[]in/;"	f	struct:fzf.Pattern	typeref:typename:([]Offset, int, *[]int)
extractColor	plugged/fzf/src/ansi.go	/^func extractColor(str string, state *ansiState, proc func(string, *ansiState) bool) (string, *[]/;"	f	package:fzf	typeref:typename:(string, *[]ansiOffset, *ansiState)
fail	plugged/fzf/bin/fzf-tmux	/^fail() {$/;"	f
failed	plugged/fzf/src/terminal.go	/^	failed       *string$/;"	m	struct:fzf.Terminal	typeref:typename:*string
fd	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) fd() int {$/;"	f	unknown:tui.LightRenderer	typeref:typename:int
feed	plugged/fzf/src/reader.go	/^func (r *Reader) feed(src io.Reader) {$/;"	f	struct:fzf.Reader
fg	plugged/fzf/src/ansi.go	/^	fg   tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
fg	plugged/fzf/src/tui/light.go	/^	fg       Color$/;"	m	struct:tui.LightWindow	typeref:typename:Color
fg	plugged/fzf/src/tui/tui.go	/^	fg   Color$/;"	m	struct:tui.ColorPair	typeref:typename:Color
file	plugged/fzf/src/terminal.go	/^	file          bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
filetypedetect	autoload/plug.vim	/^        augroup filetypedetect$/;"	a
fill	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) fill(str string, onMove func()) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
fill	plugged/fzf/src/tui/tcell.go	/^func fill(x, y, w, h int, n ColorPair, r rune) {$/;"	f	package:tui
fillString	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) fillString(text string, pair ColorPair) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
filled	plugged/fzf/src/terminal.go	/^	filled   bool$/;"	m	struct:fzf.previewed	typeref:typename:bool
fin	plugged/fzf/src/reader.go	/^func (r *Reader) fin(success bool) {$/;"	f	struct:fzf.Reader
finChan	plugged/fzf/src/reader.go	/^	finChan  chan bool$/;"	m	struct:fzf.Reader	typeref:typename:chan bool
final	plugged/fzf/src/matcher.go	/^	final      bool$/;"	m	struct:fzf.MatchRequest	typeref:typename:bool
final	plugged/fzf/src/merger.go	/^	final   bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
final	plugged/fzf/src/terminal.go	/^	final      bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
findFirstMatch	plugged/fzf/src/terminal.go	/^func findFirstMatch(pattern string, str string) int {$/;"	f	package:fzf	typeref:typename:int
findLastMatch	plugged/fzf/src/terminal.go	/^func findLastMatch(pattern string, str string) int {$/;"	f	package:fzf	typeref:typename:int
findOffset	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) findOffset() (row int, col int) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(row int, col int)
findOffset	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) findOffset() (row int, col int) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(row int, col int)
firstKey	plugged/fzf/src/options.go	/^func firstKey(keymap map[tui.Event]string) tui.Event {$/;"	f	package:fzf	typeref:typename:tui.Event
fish	plugged/fzf/test/test_go.rb	/^    def fish$/;"	S	class:Shell
flush	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) flush() {$/;"	f	unknown:tui.LightRenderer
focus	plugged/fzf/test/test_go.rb	/^  def focus$/;"	f	class:Tmux
follow	plugged/fzf/src/options.go	/^	follow      bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
following	plugged/fzf/src/terminal.go	/^	following  bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
foo	plugged/vim-go/autoload/go/test-fixtures/config/buildtags/constrainedfoo.go	/^func foo() {$/;"	f	package:config
foo	plugged/vim-go/autoload/go/test-fixtures/config/buildtags/foo.go	/^func foo() {$/;"	f	package:config
foo	plugged/vim-go/autoload/go/test-fixtures/lint/src/errcheck/errcheck.go	/^func foo() {$/;"	f	package:errcheck
foo	plugged/vim-go/autoload/go/test-fixtures/lint/src/foo/foo.go	/^package foo$/;"	p
forceBlack	plugged/fzf/src/tui/light.go	/^	forceBlack    bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
forceBlack	plugged/fzf/src/tui/tui.go	/^	forceBlack   bool$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:bool
form	plugged/vim-go/test/parse.go	/^	head, form *Node$/;"	m	struct:html.parser	typeref:typename:*Node
forward	plugged/fzf/src/pattern.go	/^	forward       bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
fosterParent	plugged/vim-go/test/parse.go	/^func (p *parser) fosterParent(n *Node) {$/;"	f	struct:html.parser
fosterParenting	plugged/vim-go/test/parse.go	/^	fosterParenting bool$/;"	m	struct:html.parser	typeref:typename:bool
fragment	plugged/vim-go/test/parse.go	/^	fragment bool$/;"	m	struct:html.parser	typeref:typename:bool
framesetOK	plugged/vim-go/test/parse.go	/^	scripting, framesetOK bool$/;"	m	struct:html.parser	typeref:typename:bool
friendly_name	plugged/vim-gitgutter/test/runner.vim	/^  let friendly_name = FriendlyName(test)$/;"	v
fugitive	plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive$/;"	a
fugitive#Autowrite	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Autowrite() abort$/;"	f
fugitive#BlameComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameComplete(A, L, P) abort$/;"	f
fugitive#BlameFileType	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameFileType() abort$/;"	f
fugitive#BlameSyntax	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameSyntax() abort$/;"	f
fugitive#BrowseCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BrowseCommand(line1, count, range, bang, mods, arg, ...) abort$/;"	f
fugitive#BufReadCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadCmd(...) abort$/;"	f
fugitive#BufReadStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadStatus(...) abort$/;"	f
fugitive#BufWriteCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufWriteCmd(...) abort$/;"	f
fugitive#CanDiffoff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CanDiffoff(buf) abort$/;"	f
fugitive#CanPty	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CanPty() abort$/;"	f
fugitive#Cd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cd(path, ...) abort$/;"	f
fugitive#CdComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CdComplete(A, L, P) abort$/;"	f
fugitive#Cfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cfile() abort$/;"	f
fugitive#Command	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Command(line1, line2, range, bang, mods, arg) abort$/;"	f
fugitive#CommitComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CommitComplete(A, L, P, ...) abort$/;"	f
fugitive#CommonDir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CommonDir(dir) abort$/;"	f
fugitive#Complete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Complete(lead, ...) abort$/;"	f
fugitive#CompleteForWorkingDir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompleteForWorkingDir(A, L, P, ...) abort$/;"	f
fugitive#CompleteObject	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompleteObject(base, ...) abort$/;"	f
fugitive#CompletePath	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompletePath(base, ...) abort$/;"	f
fugitive#Config	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Config(...) abort$/;"	f
fugitive#ConfigGetAll	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ConfigGetAll(name, ...) abort$/;"	f
fugitive#ConfigGetRegexp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ConfigGetRegexp(pattern, ...) abort$/;"	f
fugitive#Cwindow	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cwindow() abort$/;"	f
fugitive#DeleteCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#DeleteCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#DidChange	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#DidChange(...) abort$/;"	f
fugitive#DiffClose	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#DiffClose() abort$/;"	f
fugitive#Diffsplit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Diffsplit(autodir, keepfocus, mods, arg, ...) abort$/;"	f
fugitive#EditComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#EditComplete(A, L, P) abort$/;"	f
fugitive#EfmDir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#EfmDir(...) abort$/;"	f
fugitive#Execute	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Execute(...) abort$/;"	f
fugitive#Expand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Expand(object) abort$/;"	f
fugitive#ExpireConfig	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ExpireConfig(...) abort$/;"	f
fugitive#FetchComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FetchComplete(A, L, P, ...) abort$/;"	f
fugitive#FileReadCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FileReadCmd(...) abort$/;"	f
fugitive#FileWriteCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FileWriteCmd(...) abort$/;"	f
fugitive#Find	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Find(object, ...) abort$/;"	f
fugitive#Foldtext	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Foldtext() abort$/;"	f
fugitive#GX	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GX() abort$/;"	f
fugitive#GitVersion	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GitVersion(...) abort$/;"	f
fugitive#GrepCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GrepCommand(line1, line2, range, bang, mods, arg) abort$/;"	f
fugitive#GrepComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GrepComplete(A, L, P) abort$/;"	f
fugitive#Head	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Head(...) abort$/;"	f
fugitive#Init	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Init() abort$/;"	f
fugitive#LogCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#LogCommand(line1, count, range, bang, mods, args, type) abort$/;"	f
fugitive#LogComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#LogComplete(A, L, P) abort$/;"	f
fugitive#MapCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MapCfile(...) abort$/;"	f
fugitive#MapJumps	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MapJumps(...) abort$/;"	f
fugitive#MergeComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MergeComplete(A, L, P, ...) abort$/;"	f
fugitive#MessageCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MessageCfile() abort$/;"	f
fugitive#MoveCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MoveCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#Object	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Object(...) abort$/;"	f
fugitive#Open	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Open(cmd, bang, mods, arg, ...) abort$/;"	f
fugitive#PagerFor	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PagerFor(argv, ...) abort$/;"	f
fugitive#Path	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Path(url, ...) abort$/;"	f
fugitive#PathComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PathComplete(...) abort$/;"	f
fugitive#PorcelainCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PorcelainCfile() abort$/;"	f
fugitive#Prepare	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Prepare(...) abort$/;"	f
fugitive#PrepareDirEnvGitFlagsArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PrepareDirEnvGitFlagsArgs(...) abort$/;"	f
fugitive#PrepareJob	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PrepareJob(...) abort$/;"	f
fugitive#PullComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PullComplete(A, L, P, ...) abort$/;"	f
fugitive#PushComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PushComplete(A, L, P, ...) abort$/;"	f
fugitive#ReadCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReadCommand(line1, count, range, bang, mods, arg, ...) abort$/;"	f
fugitive#ReadComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReadComplete(A, L, P) abort$/;"	f
fugitive#Real	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Real(url) abort$/;"	f
fugitive#RebaseComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RebaseComplete(A, L, P, ...) abort$/;"	f
fugitive#ReloadStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReloadStatus(...) abort$/;"	f
fugitive#Remote	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Remote(...) abort$/;"	f
fugitive#RemoteHttpHeaders	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RemoteHttpHeaders(remote) abort$/;"	f
fugitive#RemoteUrl	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RemoteUrl(...) abort$/;"	f
fugitive#RemoveCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RemoveCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#RenameCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RenameCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#RenameComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RenameComplete(A,L,P) abort$/;"	f
fugitive#Result	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Result(...) abort$/;"	f
fugitive#Resume	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Resume() abort$/;"	f
fugitive#RevParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RevParse(rev, ...) abort$/;"	f
fugitive#RevertComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RevertComplete(A, L, P, ...) abort$/;"	f
fugitive#ShellCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ShellCommand(...) abort$/;"	f
fugitive#SourceCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#SourceCmd(...) abort$/;"	f
fugitive#SshConfig	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#SshConfig(host, ...) abort$/;"	f
fugitive#SshHostAlias	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#SshHostAlias(authority) abort$/;"	f
fugitive#Statusline	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Statusline(...) abort$/;"	f
fugitive#Wait	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Wait(job_or_jobs, ...) abort$/;"	f
fugitive#WqCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#WqCommand(...) abort$/;"	f
fugitive#WriteCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#WriteCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#buffer	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#buffer(...) abort$/;"	f
fugitive#delete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#delete(url, ...) abort$/;"	f
fugitive#detect	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#detect(path) abort$/;"	f
fugitive#extract_git_dir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#extract_git_dir(path) abort$/;"	f
fugitive#filereadable	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#filereadable(url) abort$/;"	f
fugitive#filewritable	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#filewritable(url) abort$/;"	f
fugitive#foldtext	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#foldtext() abort$/;"	f
fugitive#getfperm	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getfperm(url) abort$/;"	f
fugitive#getfsize	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getfsize(url) abort$/;"	f
fugitive#getftime	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getftime(url) abort$/;"	f
fugitive#getftype	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getftype(url) abort$/;"	f
fugitive#glob	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#glob(url, ...) abort$/;"	f
fugitive#head	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#head(...) abort$/;"	f
fugitive#is_git_dir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#is_git_dir(path) abort$/;"	f
fugitive#isdirectory	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#isdirectory(url) abort$/;"	f
fugitive#readfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#readfile(url, ...) abort$/;"	f
fugitive#repo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#repo(...) abort$/;"	f
fugitive#resolve	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#resolve(url) abort$/;"	f
fugitive#setfperm	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#setfperm(url, perm) abort$/;"	f
fugitive#simplify	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#simplify(url) abort$/;"	f
fugitive#statusline	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#statusline(...) abort$/;"	f
fugitive#writefile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#writefile(lines, url, ...) abort$/;"	f
fugitive.vim	plugged/vim-fugitive/README.markdown	/^# fugitive.vim$/;"	c
fugitive_blame	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_blame$/;"	a
fugitive_diff	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_diff$/;"	a
fugitive_dummy_events	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_dummy_events$/;"	a
fugitive_job	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_job$/;"	a
fugitive_status	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_status$/;"	a
fugitive_temp	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_temp$/;"	a
fullscreen	plugged/fzf/src/terminal.go	/^	fullscreen   bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
fullscreen	plugged/fzf/src/tui/light.go	/^	fullscreen    bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
fuzzy	plugged/fzf/src/pattern.go	/^	fuzzy         bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
fuzzyAlgo	plugged/fzf/src/pattern.go	/^	fuzzyAlgo     algo.Algo$/;"	m	struct:fzf.Pattern	typeref:typename:algo.Algo
fzf	plugged/fzf/main.go	/^	fzf "github.com\/junegunn\/fzf\/src"$/;"	P	package:github.com/junegunn/fzf/src
fzf	plugged/fzf/man/man1/fzf.1	/^.TH fzf 1 "Nov 2021" "fzf 0.28.0" "fzf - a command-line fuzzy finder"$/;"	t
fzf	plugged/fzf/src/ansi.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/ansi_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/cache.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/cache_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/chunklist.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/chunklist_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/constants.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/core.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/history.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/history_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/item.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/item_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/matcher.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/merger.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/merger_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/options.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/options_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/pattern.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/pattern_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/reader.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/reader_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/result.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/result_others.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/result_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/result_x86.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/terminal.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/terminal_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/terminal_unix.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/terminal_windows.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/tokenizer.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/tokenizer_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/test/test_go.rb	/^  def fzf(*opts)$/;"	f	class:TestBase
fzf :heart: vim	plugged/fzf.vim/README.md	/^fzf :heart: vim$/;"	c
fzf inside terminal buffer	plugged/fzf/README-VIM.md	/^### fzf inside terminal buffer$/;"	S	section:FZF Vim integration""Tips
fzf!	plugged/fzf/test/test_go.rb	/^  def fzf!(*opts)$/;"	f	class:TestBase
fzf#complete	plugged/fzf.vim/plugin/fzf.vim	/^function! fzf#complete(...)$/;"	f
fzf#decls#cmd	plugged/vim-go/autoload/fzf/decls.vim	/^function! fzf#decls#cmd(...) abort$/;"	f
fzf#exec	plugged/fzf/plugin/fzf.vim	/^function! fzf#exec(...)$/;"	f
fzf#install	plugged/fzf/plugin/fzf.vim	/^function! fzf#install()$/;"	f
fzf#run	plugged/fzf/plugin/fzf.vim	/^function! fzf#run(...) abort$/;"	f
fzf#shellescape	plugged/fzf/plugin/fzf.vim	/^function! fzf#shellescape(arg, ...)$/;"	f
fzf#vim#_buflisted_sorted	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_buflisted_sorted()$/;"	f
fzf#vim#_format_buffer	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_format_buffer(b)$/;"	f
fzf#vim#_lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_lines(all)$/;"	f
fzf#vim#_recent_files	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_recent_files()$/;"	f
fzf#vim#_uniq	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_uniq(list)$/;"	f
fzf#vim#ag	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag(query, ...)$/;"	f
fzf#vim#ag_raw	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag_raw(command_suffix, ...)$/;"	f
fzf#vim#buffer_commits	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_commits(...) range$/;"	f
fzf#vim#buffer_lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_lines(...)$/;"	f
fzf#vim#buffer_tags	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_tags(query, ...)$/;"	f
fzf#vim#buffers	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffers(...)$/;"	f
fzf#vim#colors	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#colors(...)$/;"	f
fzf#vim#command_history	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#command_history(...)$/;"	f
fzf#vim#commands	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commands(...)$/;"	f
fzf#vim#commits	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commits(...) range$/;"	f
fzf#vim#complete	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#complete(...)$/;"	f
fzf#vim#complete#buffer_line	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#buffer_line(...)$/;"	f
fzf#vim#complete#line	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#line(...)$/;"	f
fzf#vim#complete#path	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#path(command, ...)$/;"	f
fzf#vim#complete#word	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#word(...)$/;"	f
fzf#vim#files	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#files(dir, ...)$/;"	f
fzf#vim#filetypes	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#filetypes(...)$/;"	f
fzf#vim#gitfiles	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#gitfiles(args, ...)$/;"	f
fzf#vim#grep	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#grep(grep_command, has_column, ...)$/;"	f
fzf#vim#helptags	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#helptags(...)$/;"	f
fzf#vim#history	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#history(...)$/;"	f
fzf#vim#lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#lines(...)$/;"	f
fzf#vim#locate	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#locate(query, ...)$/;"	f
fzf#vim#maps	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#maps(mode, ...)$/;"	f
fzf#vim#marks	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#marks(...)$/;"	f
fzf#vim#search_history	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#search_history(...)$/;"	f
fzf#vim#snippets	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#snippets(...)$/;"	f
fzf#vim#tags	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#tags(query, ...)$/;"	f
fzf#vim#windows	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#windows(...)$/;"	f
fzf#vim#with_preview	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#with_preview(...)$/;"	f
fzf#wrap	plugged/fzf/plugin/fzf.vim	/^function! fzf#wrap(...)$/;"	f
fzf-cd-widget	plugged/fzf/shell/key-bindings.zsh	/^fzf-cd-widget() {$/;"	f
fzf-completion	plugged/fzf/shell/completion.zsh	/^fzf-completion() {$/;"	f
fzf-file-widget	plugged/fzf/shell/key-bindings.bash	/^fzf-file-widget() {$/;"	f
fzf-file-widget	plugged/fzf/shell/key-bindings.zsh	/^fzf-file-widget() {$/;"	f
fzf-history-widget	plugged/fzf/shell/key-bindings.zsh	/^fzf-history-widget() {$/;"	f
fzf-tmux	plugged/fzf/man/man1/fzf-tmux.1	/^.TH fzf-tmux 1 "Nov 2021" "fzf 0.28.0" "fzf-tmux - open fzf in tmux split pane"$/;"	t
fzf.on_exit	plugged/fzf/plugin/fzf.vim	/^      function! fzf.on_exit(job_id, exit_status, event) dict$/;"	f
fzf.on_exit	plugged/fzf/plugin/fzf.vim	/^  function! fzf.on_exit(id, code, ...)$/;"	f
fzf.switch_back	plugged/fzf/plugin/fzf.vim	/^  function! fzf.switch_back(inplace)$/;"	f
fzf_base	plugged/fzf/install.ps1	/^$fzf_base=Split-Path -Parent $MyInvocation.MyCommand.Definition$/;"	v
fzf_buffers	plugged/fzf.vim/plugin/fzf.vim	/^augroup fzf_buffers$/;"	a
fzf_popd	plugged/fzf/plugin/fzf.vim	/^augroup fzf_popd$/;"	a
fzf_swap	plugged/fzf/plugin/fzf.vim	/^    augroup fzf_swap$/;"	a
g4198	plugged/vim-go/assets/vim-go.svg	/^       transform="matrix(0.69027452,0,0,0.73815345,642.18876,259.65104)">$/;"	i
g4330	plugged/vim-go/assets/vim-go.svg	/^       id="g4330">$/;"	i
g4376	plugged/vim-go/assets/vim-go.svg	/^       style="opacity:1">$/;"	i
g4404	plugged/vim-go/assets/vim-go.svg	/^       id="g4404">$/;"	i
g4533	plugged/vim-go/assets/vim-go.svg	/^       transform="matrix(-0.28489616,-0.34500545,-0.42832103,0.44649678,715.99765,474.46827)">$/;"	i
g4533-2	plugged/vim-go/assets/vim-go.svg	/^       transform="matrix(-0.60102903,0.32221978,0.53870829,0.77401445,526.12645,47.501077)" \/>$/;"	i
g4537	plugged/vim-go/assets/vim-go.svg	/^       id="g4537">$/;"	i
g4594	plugged/vim-go/assets/vim-go.svg	/^       transform="matrix(-0.13664232,-0.29657059,-0.88136995,0.09664282,727.56031,790.52022)">$/;"	i
g4634	plugged/vim-go/assets/vim-go.svg	/^       style="display:inline;opacity:1">$/;"	i
g4640	plugged/vim-go/assets/vim-go.svg	/^       style="display:inline;opacity:1">$/;"	i
g4818	plugged/vim-go/assets/vim-go.svg	/^       transform="matrix(-0.65610141,0,0,0.65610141,655.70091,210.42145)">$/;"	i
g4822	plugged/vim-go/assets/vim-go.svg	/^       id="g4822">$/;"	i
g:	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^            let g:[newname] = g:[key]$/;"	v
g:UltiSnipsSnippetDirectories	plugged/vim-go/ftplugin/go/snippets.vim	/^    let g:UltiSnipsSnippetDirectories += ["gosnippets\/UltiSnips"]$/;"	v
g:UltiSnipsSnippetDirectories	plugged/vim-go/ftplugin/go/snippets.vim	/^    let g:UltiSnipsSnippetDirectories = ["gosnippets\/UltiSnips"]$/;"	v
g:__fzf_command	plugged/fzf.vim/autoload/fzf/vim.vim	/^    let g:__fzf_command = "normal ".prefix.item."\\<cr>"$/;"	v
g:__gutentags_vim_is_leaving	plugged/vim-gutentags/autoload/gutentags.vim	/^    let g:__gutentags_vim_is_leaving = 1$/;"	v
g:__gutentags_vim_is_leaving	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:__gutentags_vim_is_leaving = 0$/;"	v
g:_fugitive_last_job	plugged/vim-fugitive/autoload/fugitive.vim	/^  let g:_fugitive_last_job = a:state$/;"	v
g:_plug_bang	autoload/plug.vim	/^    let g:_plug_bang = '!'.escape(cmd, '#!%')$/;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette = {}$/;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.inactive = airline#themes#generate_color_map(s:IAMain, s:IARig/;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.inactive.airline_error = s:IAError$/;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.inactive.airline_term = s:IAMiddle$/;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.inactive.airline_warning = s:IAWarn$/;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.insert = airline#themes#generate_color_map(s:IMain, s:IRight, /;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.insert.airline_error = s:IError$/;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.insert.airline_term = s:IMiddle$/;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.insert.airline_warning = s:IWarn$/;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.normal = airline#themes#generate_color_map(s:NMain, s:NRight, /;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.normal.airline_error = s:NError$/;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.normal.airline_term = s:NMiddle$/;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.normal.airline_warning = s:NWarn$/;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.replace = airline#themes#generate_color_map(s:RMain, s:RRight,/;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.replace.airline_error = s:RError$/;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.replace.airline_term = s:RMiddle$/;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.replace.airline_warning = s:RWarn$/;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.visual = airline#themes#generate_color_map(s:VMain, s:VRight, /;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.visual.airline_error = s:VError$/;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.visual.airline_term = s:VMiddle$/;"	v
g:airline#themes#nord#palette	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let g:airline#themes#nord#palette.visual.airline_warning = s:VWarn$/;"	v
g:airline#themes#twofirewatch#palette	plugged/vim-two-firewatch/autoload/airline/themes/twofirewatch.vim	/^  let g:airline#themes#twofirewatch#palette.accents = {$/;"	v
g:airline#themes#twofirewatch#palette	plugged/vim-two-firewatch/autoload/airline/themes/twofirewatch.vim	/^  let g:airline#themes#twofirewatch#palette.inactive = airline#themes#generate_color_map(s:IA, s/;"	v
g:airline#themes#twofirewatch#palette	plugged/vim-two-firewatch/autoload/airline/themes/twofirewatch.vim	/^  let g:airline#themes#twofirewatch#palette.inactive_modified = {$/;"	v
g:airline#themes#twofirewatch#palette	plugged/vim-two-firewatch/autoload/airline/themes/twofirewatch.vim	/^  let g:airline#themes#twofirewatch#palette.insert = airline#themes#generate_color_map(s:I1, s:I/;"	v
g:airline#themes#twofirewatch#palette	plugged/vim-two-firewatch/autoload/airline/themes/twofirewatch.vim	/^  let g:airline#themes#twofirewatch#palette.insert_modified = g:airline#themes#twofirewatch#pale/;"	v
g:airline#themes#twofirewatch#palette	plugged/vim-two-firewatch/autoload/airline/themes/twofirewatch.vim	/^  let g:airline#themes#twofirewatch#palette.normal = airline#themes#generate_color_map(s:N1, s:N/;"	v
g:airline#themes#twofirewatch#palette	plugged/vim-two-firewatch/autoload/airline/themes/twofirewatch.vim	/^  let g:airline#themes#twofirewatch#palette.normal_modified = {$/;"	v
g:airline#themes#twofirewatch#palette	plugged/vim-two-firewatch/autoload/airline/themes/twofirewatch.vim	/^  let g:airline#themes#twofirewatch#palette.replace = airline#themes#generate_color_map(s:R1, s:/;"	v
g:airline#themes#twofirewatch#palette	plugged/vim-two-firewatch/autoload/airline/themes/twofirewatch.vim	/^  let g:airline#themes#twofirewatch#palette.replace_modified = g:airline#themes#twofirewatch#pal/;"	v
g:airline#themes#twofirewatch#palette	plugged/vim-two-firewatch/autoload/airline/themes/twofirewatch.vim	/^  let g:airline#themes#twofirewatch#palette.visual = airline#themes#generate_color_map(s:V1, s:V/;"	v
g:airline#themes#twofirewatch#palette	plugged/vim-two-firewatch/autoload/airline/themes/twofirewatch.vim	/^  let g:airline#themes#twofirewatch#palette.visual_modified = g:airline#themes#twofirewatch#pale/;"	v
g:airline#themes#twofirewatch#palette	plugged/vim-two-firewatch/autoload/airline/themes/twofirewatch.vim	/^let g:airline#themes#twofirewatch#palette = {}$/;"	v
g:autoloaded_fugitive	plugged/vim-fugitive/autoload/fugitive.vim	/^let g:autoloaded_fugitive = 1$/;"	v
g:colors_name	plugged/nord-vim/colors/nord.vim	/^let g:colors_name = "nord"$/;"	v
g:colors_name	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^let g:colors_name = 'two-firewatch'$/;"	v
g:ctrlp_ext_vars	plugged/vim-go/autoload/ctrlp/decls.vim	/^  let g:ctrlp_ext_vars = [s:go_decls_var]$/;"	v
g:ctrlp_ext_vars	plugged/vim-go/autoload/ctrlp/decls.vim	/^  let g:ctrlp_ext_vars = add(g:ctrlp_ext_vars, s:go_decls_var)$/;"	v
g:current_compiler	plugged/vim-go/compiler/go.vim	/^let g:current_compiler = "go"$/;"	v
g:fugitive_event	plugged/vim-fugitive/autoload/fugitive.vim	/^      let g:fugitive_event = a:state.git_dir$/;"	v
g:fugitive_event	plugged/vim-fugitive/autoload/fugitive.vim	/^    let g:fugitive_event = dir$/;"	v
g:fugitive_result	plugged/vim-fugitive/autoload/fugitive.vim	/^      let g:fugitive_result = a:dir$/;"	v
g:fugitive_result	plugged/vim-fugitive/autoload/fugitive.vim	/^      let g:fugitive_result = a:state$/;"	v
g:fugitive_summary_format	plugged/vim-fugitive/autoload/fugitive.vim	/^  let g:fugitive_summary_format = '%s'$/;"	v
g:fzf#vim#buffers	plugged/fzf.vim/plugin/fzf.vim	/^  let g:fzf#vim#buffers = {}$/;"	v
g:fzf_layout	init.vim	/^let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6  }  }$/;"	v
g:fzf_preview_window	init.vim	/^let g:fzf_preview_window = 'right:50%'$/;"	v
g:gitgutter_async	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^    let g:gitgutter_async = async$/;"	v
g:gitgutter_async	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_async                        = get(g:, 'gitgutter_async', 1)$/;"	v
g:gitgutter_close_preview_on_escape	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_close_preview_on_escape      = get(g:, 'gitgutter_close_preview_on_escape', 0)$/;"	v
g:gitgutter_diff_args	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_diff_args                    = get(g:, 'gitgutter_diff_args', '')$/;"	v
g:gitgutter_diff_base	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_diff_base                    = get(g:, 'gitgutter_diff_base', '')$/;"	v
g:gitgutter_diff_relative_to	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_diff_relative_to             = get(g:, 'gitgutter_diff_relative_to', 'index')$/;"	v
g:gitgutter_enabled	plugged/vim-gitgutter/autoload/gitgutter.vim	/^  let g:gitgutter_enabled = 0$/;"	v
g:gitgutter_enabled	plugged/vim-gitgutter/autoload/gitgutter.vim	/^  let g:gitgutter_enabled = 1$/;"	v
g:gitgutter_enabled	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_enabled = get(g:, 'gitgutter_enabled', 1)$/;"	v
g:gitgutter_git_args	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_git_args                     = get(g:, 'gitgutter_git_args', '')$/;"	v
g:gitgutter_git_executable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_git_executable = get(g:, 'gitgutter_git_executable', 'git')$/;"	v
g:gitgutter_grep	plugged/vim-gitgutter/plugin/gitgutter.vim	/^      let g:gitgutter_grep .= ' --color=never'$/;"	v
g:gitgutter_grep	plugged/vim-gitgutter/plugin/gitgutter.vim	/^    let g:gitgutter_grep = ''$/;"	v
g:gitgutter_grep	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_grep = get(g:, 'gitgutter_grep', default_grep)$/;"	v
g:gitgutter_highlight_linenrs	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^  let g:gitgutter_highlight_linenrs = 0$/;"	v
g:gitgutter_highlight_linenrs	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^  let g:gitgutter_highlight_linenrs = 1$/;"	v
g:gitgutter_highlight_linenrs	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_highlight_linenrs = get(g:, 'gitgutter_highlight_linenrs', 0)$/;"	v
g:gitgutter_highlight_lines	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^  let g:gitgutter_highlight_lines = 0$/;"	v
g:gitgutter_highlight_lines	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^  let g:gitgutter_highlight_lines = 1$/;"	v
g:gitgutter_highlight_lines	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_highlight_lines   = get(g:, 'gitgutter_highlight_lines', 0)$/;"	v
g:gitgutter_hook_context	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^    let g:gitgutter_hook_context = {'bufnr': a:bufnr}$/;"	v
g:gitgutter_log	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_log                          = get(g:, 'gitgutter_log', 0)$/;"	v
g:gitgutter_map_keys	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_map_keys                     = get(g:, 'gitgutter_map_keys', 1)$/;"	v
g:gitgutter_max_signs	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_max_signs = get(g:, 'gitgutter_max_signs', -1)$/;"	v
g:gitgutter_max_signs	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_max_signs = get(g:, 'gitgutter_max_signs', 500)$/;"	v
g:gitgutter_preview_win_floating	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_preview_win_floating = get(g:, 'gitgutter_preview_win_floating', 1)$/;"	v
g:gitgutter_preview_win_floating	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_preview_win_floating = get(g:, 'gitgutter_preview_win_floating', default)$/;"	v
g:gitgutter_preview_win_location	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_preview_win_location = get(g:, 'gitgutter_preview_win_location', 'bo')$/;"	v
g:gitgutter_set_sign_backgrounds	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_set_sign_backgrounds = get(g:, 'gitgutter_set_sign_backgrounds', 0)$/;"	v
g:gitgutter_show_msg_on_hunk_jumping	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_show_msg_on_hunk_jumping     = get(g:, 'gitgutter_show_msg_on_hunk_jumping', 1)$/;"	v
g:gitgutter_sign_added	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_added           = get(g:, 'gitgutter_sign_added', '+')$/;"	v
g:gitgutter_sign_allow_clobber	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_sign_allow_clobber = 1$/;"	v
g:gitgutter_sign_allow_clobber	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_allow_clobber   = get(g:, 'gitgutter_sign_allow_clobber', 0)$/;"	v
g:gitgutter_sign_modified	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_modified        = get(g:, 'gitgutter_sign_modified', '~')$/;"	v
g:gitgutter_sign_modified_removed	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_modified_removed        = get(g:, 'gitgutter_sign_modified_removed', '~_')$/;"	v
g:gitgutter_sign_priority	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_priority     = get(g:, 'gitgutter_sign_priority', 10)$/;"	v
g:gitgutter_sign_priority	plugged/vim-gitgutter/test/test_gitgutter.vim	/^  let g:gitgutter_sign_priority = 10$/;"	v
g:gitgutter_sign_priority	plugged/vim-gitgutter/test/test_gitgutter.vim	/^  let g:gitgutter_sign_priority = 5$/;"	v
g:gitgutter_sign_removed	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_removed         = get(g:, 'gitgutter_sign_removed', '_')$/;"	v
g:gitgutter_sign_removed_above_and_below	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_removed_above_and_below = get(g:, 'gitgutter_sign_removed_above_and_below',/;"	v
g:gitgutter_sign_removed_first_line	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_sign_removed_first_line = get(g:, 'gitgutter_sign_removed_first_line', '_^')$/;"	v
g:gitgutter_sign_removed_first_line	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_sign_removed_first_line = get(g:, 'gitgutter_sign_removed_first_line', '‾')$/;"	v
g:gitgutter_signs	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^  let g:gitgutter_signs = 0$/;"	v
g:gitgutter_signs	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^  let g:gitgutter_signs = 1$/;"	v
g:gitgutter_signs	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_signs             = get(g:, 'gitgutter_signs', 1)$/;"	v
g:gitgutter_terminal_reports_focus	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_terminal_reports_focus       = get(g:, 'gitgutter_terminal_reports_focus', 1)$/;"	v
g:gitgutter_use_location_list	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_use_location_list            = get(g:, 'gitgutter_use_location_list', 0)$/;"	v
g:go_asmfmt_autosave	plugged/vim-go/autoload/go/config.vim	/^  let g:go_asmfmt_autosave = a:value$/;"	v
g:go_auto_sameids	plugged/vim-go/autoload/go/config.vim	/^  let g:go_auto_sameids = a:value$/;"	v
g:go_auto_type_info	plugged/vim-go/autoload/go/config.vim	/^  let g:go_auto_type_info = a:value$/;"	v
g:go_build_tags	plugged/vim-go/autoload/go/config.vim	/^  let g:go_build_tags = a:value$/;"	v
g:go_debug	plugged/vim-go/autoload/go/config_test.vim	/^    let g:go_debug=['lsp']$/;"	v
g:go_debug_commands	plugged/vim-go/autoload/go/config.vim	/^  let g:go_debug_commands = get(g:, 'go_debug_commands', [])$/;"	v
g:go_debug_commands	plugged/vim-go/autoload/go/debug.vim	/^      let g:go_debug_commands = add(go#config#DebugCommands(), {$/;"	v
g:go_debug_diag	plugged/vim-go/autoload/go/config.vim	/^  let g:go_debug_diag = a:value$/;"	v
g:go_debug_mappings	plugged/vim-go/autoload/go/debug_test.vim	/^    let g:go_debug_mappings = {'(go-debug-continue)': {'key': 'q', 'arguments': '<nowait>'}}$/;"	v
g:go_def_mode	plugged/vim-go/autoload/go/config_test.vim	/^    let g:go_def_mode = 'gopls'$/;"	v
g:go_def_mode	plugged/vim-go/autoload/go/def_test.vim	/^      let g:go_def_mode='godef'$/;"	v
g:go_def_mode	plugged/vim-go/autoload/go/def_test.vim	/^    let g:go_def_mode = 'gopls'$/;"	v
g:go_diagnostics_level	plugged/vim-go/autoload/go/highlight_test.vim	/^  let g:go_diagnostics_level = 2$/;"	v
g:go_diagnostics_level	plugged/vim-go/autoload/go/lint_test.vim	/^  let g:go_diagnostics_level = 2$/;"	v
g:go_echo_command_info	plugged/vim-go/scripts/runtest.vim	/^  let g:go_echo_command_info = 0$/;"	v
g:go_fillstruct_mode	plugged/vim-go/autoload/go/fillstruct_test.vim	/^    let g:go_fillstruct_mode = 'fillstruct'$/;"	v
g:go_fillstruct_mode	plugged/vim-go/autoload/go/fillstruct_test.vim	/^    let g:go_fillstruct_mode = 'gopls'$/;"	v
g:go_fmt_autosave	plugged/vim-go/autoload/go/config.vim	/^  let g:go_fmt_autosave = a:value$/;"	v
g:go_fmt_command	plugged/vim-go/autoload/go/highlight_test.vim	/^  let g:go_fmt_command = 'gofmt'$/;"	v
g:go_gopls_enabled	plugged/vim-go/autoload/go/config_test.vim	/^    let g:go_gopls_enabled = 0$/;"	v
g:go_gopls_options	plugged/vim-go/scripts/runtest.vim	/^  let g:go_gopls_options = []$/;"	v
g:go_gopls_staticcheck	plugged/vim-go/autoload/go/lint_test.vim	/^  let g:go_gopls_staticcheck = 1$/;"	v
g:go_gotags_bin	plugged/vim-go/ftplugin/go/tagbar.vim	/^  let g:go_gotags_bin = "gotags"$/;"	v
g:go_guru_scope	plugged/vim-go/autoload/go/config.vim	/^    let g:go_guru_scope = a:scope$/;"	v
g:go_highlight_function_parameters	plugged/vim-go/autoload/go/highlight_test.vim	/^  let g:go_highlight_function_parameters = 1$/;"	v
g:go_info_mode	plugged/vim-go/autoload/go/complete_test.vim	/^    let g:go_info_mode = 'gopls'$/;"	v
g:go_info_mode	plugged/vim-go/autoload/go/lsp_test.vim	/^    let g:go_info_mode = 'gopls'$/;"	v
g:go_jump_to_error	plugged/vim-go/ftplugin/go/mappings.vim	/^  let g:go_jump_to_error = 1$/;"	v
g:go_loaded_gosnippets	plugged/vim-go/ftplugin/go/snippets.vim	/^let g:go_loaded_gosnippets = 1$/;"	v
g:go_loaded_install	plugged/vim-go/plugin/go.vim	/^let g:go_loaded_install = 1$/;"	v
g:go_lsp_log	plugged/vim-go/autoload/go/config.vim	/^  let g:go_lsp_log = get(g:, 'go_lsp_log', [])$/;"	v
g:go_metalinter_autosave	plugged/vim-go/autoload/go/config.vim	/^  let g:go_metalinter_autosave = a:value$/;"	v
g:go_metalinter_autosave_enabled	plugged/vim-go/autoload/go/lint_test.vim	/^      let g:go_metalinter_autosave_enabled = ['revive']$/;"	v
g:go_metalinter_autosave_enabled	plugged/vim-go/autoload/go/lint_test.vim	/^    let g:go_metalinter_autosave_enabled = ['ST1000']$/;"	v
g:go_metalinter_autosave_enabled	plugged/vim-go/autoload/go/lint_test.vim	/^    let g:go_metalinter_autosave_enabled = ['golint']$/;"	v
g:go_metalinter_command	plugged/vim-go/autoload/go/lint_test.vim	/^    let g:go_metalinter_command = a:metalinter$/;"	v
g:go_metalinter_enabled	plugged/vim-go/autoload/go/lint_test.vim	/^      let g:go_metalinter_enabled = ['revive']$/;"	v
g:go_metalinter_enabled	plugged/vim-go/autoload/go/lint_test.vim	/^    let g:go_metalinter_enabled = ['ST1000']$/;"	v
g:go_metalinter_enabled	plugged/vim-go/autoload/go/lint_test.vim	/^    let g:go_metalinter_enabled = ['golint']$/;"	v
g:go_metalinter_enabled	plugged/vim-go/autoload/go/lint_test.vim	/^    let g:go_metalinter_enabled = ['revive']$/;"	v
g:go_mod_fmt_autosave	plugged/vim-go/autoload/go/config.vim	/^  let g:go_mod_fmt_autosave = a:value$/;"	v
g:go_template_autocreate	plugged/vim-go/autoload/go/config.vim	/^  let g:go_template_autocreate = a:value$/;"	v
g:go_template_use_pkg	plugged/vim-go/autoload/go/template_test.vim	/^    let g:go_template_use_pkg = 1$/;"	v
g:go_term_close_on_exit	plugged/vim-go/autoload/go/config.vim	/^  let g:go_term_close_on_exit = a:value$/;"	v
g:go_term_enabled	plugged/vim-go/autoload/go/config.vim	/^  let g:go_term_enabled = a:value$/;"	v
g:go_term_reuse	plugged/vim-go/autoload/go/term_test.vim	/^    let g:go_term_reuse = 1$/;"	v
g:go_test_show_name	plugged/vim-go/autoload/go/test_test.vim	/^  let g:go_test_show_name=1$/;"	v
g:go_test_timeout	plugged/vim-go/autoload/go/test_test.vim	/^  let g:go_test_timeout="500ms"$/;"	v
g:gutentags_add_ctrlp_root_markers	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_ctrlp_root_markers = get(g:, 'gutentags_add_ctrlp_root_markers', 1)$/;"	v
g:gutentags_add_default_project_roots	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)$/;"	v
g:gutentags_auto_add_cscope	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_auto_add_cscope = 1$/;"	v
g:gutentags_auto_add_gtags_cscope	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_auto_add_gtags_cscope = 1$/;"	v
g:gutentags_background_update	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)$/;"	v
g:gutentags_cache_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = ''$/;"	v
g:gutentags_cache_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')$/;"	v
g:gutentags_cache_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[\/\\\\]$??')$/;"	v
g:gutentags_cscope_build_inverted_index	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_build_inverted_index = 0$/;"	v
g:gutentags_cscope_executable	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_executable = 'cscope'$/;"	v
g:gutentags_ctags_auto_set_tags	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_auto_set_tags = get(g:, 'gutentags_ctags_auto_set_tags', 1)$/;"	v
g:gutentags_ctags_check_tagfile	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_check_tagfile = get(g:, 'gutentags_ctags_check_tagfile', 0)$/;"	v
g:gutentags_ctags_exclude	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude = get(g:, 'gutentags_ctags_exclude', [])$/;"	v
g:gutentags_ctags_exclude_wildignore	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude_wildignore = get(g:, 'gutentags_ctags_exclude_wildignore', 1)$/;"	v
g:gutentags_ctags_executable	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_executable = get(g:, 'gutentags_ctags_executable', 'ctags')$/;"	v
g:gutentags_ctags_extra_args	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_extra_args = get(g:, 'gutentags_ctags_extra_args', [])$/;"	v
g:gutentags_ctags_options_file	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_options_file = get(g:, 'gutentags_ctags_options_file', '.gutctags')$/;"	v
g:gutentags_ctags_post_process_cmd	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_post_process_cmd = get(g:, 'gutentags_ctags_post_process_cmd', '')$/;"	v
g:gutentags_ctags_tagfile	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_tagfile = get(g:, 'gutentags_ctags_tagfile', 'tags')$/;"	v
g:gutentags_debug	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_debug = get(g:, 'gutentags_debug', 0)$/;"	v
g:gutentags_define_advanced_commands	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)$/;"	v
g:gutentags_enabled	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^            let g:gutentags_enabled = 0$/;"	v
g:gutentags_enabled	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)$/;"	v
g:gutentags_exclude_filetypes	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_filetypes = get(g:, 'gutentags_exclude_filetypes', [])$/;"	v
g:gutentags_exclude_project_root	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', ['\/usr\/local'/;"	v
g:gutentags_fake	plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_fake = a:1$/;"	v
g:gutentags_fake	plugged/vim-gutentags/autoload/gutentags.vim	/^    let g:gutentags_fake = !g:gutentags_fake$/;"	v
g:gutentags_fake	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_fake = get(g:, 'gutentags_fake', 0)$/;"	v
g:gutentags_file_list_command	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_file_list_command = get(g:, 'gutentags_file_list_command', '')$/;"	v
g:gutentags_generate_on_empty_buffer	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_empty_buffer = get(g:, 'gutentags_generate_on_empty_buffer', 0)$/;"	v
g:gutentags_generate_on_missing	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)$/;"	v
g:gutentags_generate_on_new	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)$/;"	v
g:gutentags_generate_on_write	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)$/;"	v
g:gutentags_gtags_cscope_executable	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_cscope_executable = 'gtags-cscope'$/;"	v
g:gutentags_gtags_dbpath	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_dbpath = ''$/;"	v
g:gutentags_gtags_executable	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_executable = 'gtags'$/;"	v
g:gutentags_gtags_options_file	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_options_file = '.gutgtags'$/;"	v
g:gutentags_init_user_func	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_init_user_func = get(g:, 'gutentags_init_user_func', $/;"	v
g:gutentags_modules	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])$/;"	v
g:gutentags_pause_after_update	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)$/;"	v
g:gutentags_plat_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\\\plat\\\\win32\\\\"$/;"	v
g:gutentags_plat_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '\/plat\/unix\/'$/;"	v
g:gutentags_project_info	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])$/;"	v
g:gutentags_project_root	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslc/;"	v
g:gutentags_project_root	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])$/;"	v
g:gutentags_project_root_finder	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root_finder = get(g:, 'gutentags_project_root_finder', '')$/;"	v
g:gutentags_res_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\\\res\\\\"$/;"	v
g:gutentags_res_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '\/res\/'$/;"	v
g:gutentags_resolve_symlinks	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)$/;"	v
g:gutentags_scopefile	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_scopefile = 'cscope.out'$/;"	v
g:gutentags_script_ext	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.cmd'$/;"	v
g:gutentags_script_ext	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.sh'$/;"	v
g:gutentags_trace	plugged/vim-gutentags/autoload/gutentags.vim	/^            let g:gutentags_trace = l:prev_trace$/;"	v
g:gutentags_trace	plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = 1$/;"	v
g:gutentags_trace	plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = a:1$/;"	v
g:gutentags_trace	plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = l:trace_backup$/;"	v
g:gutentags_trace	plugged/vim-gutentags/autoload/gutentags.vim	/^    let g:gutentags_trace = !g:gutentags_trace$/;"	v
g:gutentags_trace	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_trace = get(g:, 'gutentags_trace', 0)$/;"	v
g:gutentags_use_jobs	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_use_jobs = get(g:, 'gutentags_use_jobs', has('job'))$/;"	v
g:io_fugitive	plugged/vim-fugitive/plugin/fugitive.vim	/^let g:io_fugitive = {$/;"	v
g:lightline#colorscheme#nord#palette	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let g:lightline#colorscheme#nord#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#twofirewatch#palette	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let g:lightline#colorscheme#twofirewatch#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:loaded_fugitive	plugged/vim-fugitive/plugin/fugitive.vim	/^let g:loaded_fugitive = 1$/;"	v
g:loaded_fzf	plugged/fzf/plugin/fzf.vim	/^let g:loaded_fzf = 1$/;"	v
g:loaded_fzf_vim	plugged/fzf.vim/plugin/fzf.vim	/^let g:loaded_fzf_vim = 1$/;"	v
g:loaded_gitgutter	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:loaded_gitgutter = 1$/;"	v
g:loaded_gutentags	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:loaded_gutentags = 1$/;"	v
g:loaded_plug	autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:main_syntax	plugged/vim-go/syntax/gohtmltmpl.vim	/^  let g:main_syntax = 'html'$/;"	v
g:minisnip_dir	plugged/vim-go/ftplugin/go/snippets.vim	/^    let g:minisnip_dir .= go#util#PathListSep() . globpath(&rtp, 'gosnippets\/minisnip')$/;"	v
g:minisnip_dir	plugged/vim-go/ftplugin/go/snippets.vim	/^    let g:minisnip_dir = globpath(&rtp, 'gosnippets\/minisnip')$/;"	v
g:neosnippet#enable_snipmate_compatibility	plugged/vim-go/ftplugin/go/snippets.vim	/^  let g:neosnippet#enable_snipmate_compatibility = 1$/;"	v
g:neosnippet#snippets_directory	plugged/vim-go/ftplugin/go/snippets.vim	/^      let g:neosnippet#snippets_directory = g:neosnippet#snippets_directory . "," . l:gosnippets/;"	v
g:neosnippet#snippets_directory	plugged/vim-go/ftplugin/go/snippets.vim	/^      let g:neosnippet#snippets_directory = l:gosnippets_dir$/;"	v
g:neosnippet#snippets_directory	plugged/vim-go/ftplugin/go/snippets.vim	/^    let g:neosnippet#snippets_directory += [l:gosnippets_dir]$/;"	v
g:nord_bold	plugged/nord-vim/colors/nord.vim	/^  let g:nord_bold = 1$/;"	v
g:nord_bold_vertical_split_line	plugged/nord-vim/colors/nord.vim	/^  let g:nord_bold_vertical_split_line = 0$/;"	v
g:nord_comment_brightness	plugged/nord-vim/colors/nord.vim	/^  let g:nord_comment_brightness = 10$/;"	v
g:nord_cursor_line_number_background	plugged/nord-vim/colors/nord.vim	/^  let g:nord_cursor_line_number_background = 0$/;"	v
g:nord_italic	plugged/nord-vim/colors/nord.vim	/^    let g:nord_italic = 0$/;"	v
g:nord_italic	plugged/nord-vim/colors/nord.vim	/^    let g:nord_italic = 1$/;"	v
g:nord_uniform_diff_background	plugged/nord-vim/colors/nord.vim	/^  let g:nord_uniform_diff_background = 0$/;"	v
g:nord_uniform_status_lines	plugged/nord-vim/colors/nord.vim	/^  let g:nord_uniform_status_lines = 0$/;"	v
g:plug_home	autoload/plug.vim	/^  let g:plug_home = home$/;"	v
g:plugs	autoload/plug.vim	/^    let g:plugs[name] = spec$/;"	v
g:plugs	autoload/plug.vim	/^  let g:plugs = {}$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = []$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:tagbar_type_go	plugged/vim-go/ftplugin/go/tagbar.vim	/^    let g:tagbar_type_go = {$/;"	v
g:terminal_ansi_colors	plugged/nord-vim/colors/nord.vim	/^  let g:terminal_ansi_colors = [s:nord1_gui, s:nord11_gui, s:nord14_gui, s:nord13_gui, s:nord9_g/;"	v
g:terminal_color_0	plugged/nord-vim/colors/nord.vim	/^  let g:terminal_color_0 = s:nord1_gui$/;"	v
g:terminal_color_0	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  let g:terminal_color_0 = "#282c34"$/;"	v
g:terminal_color_1	plugged/nord-vim/colors/nord.vim	/^  let g:terminal_color_1 = s:nord11_gui$/;"	v
g:terminal_color_1	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  let g:terminal_color_1 = "#e06c75"$/;"	v
g:terminal_color_10	plugged/nord-vim/colors/nord.vim	/^  let g:terminal_color_10 = s:nord14_gui$/;"	v
g:terminal_color_10	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  let g:terminal_color_10 = "#98c379"$/;"	v
g:terminal_color_11	plugged/nord-vim/colors/nord.vim	/^  let g:terminal_color_11 = s:nord13_gui$/;"	v
g:terminal_color_11	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  let g:terminal_color_11 = "#e5c07b"$/;"	v
g:terminal_color_12	plugged/nord-vim/colors/nord.vim	/^  let g:terminal_color_12 = s:nord9_gui$/;"	v
g:terminal_color_12	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  let g:terminal_color_12 = "#61afef"$/;"	v
g:terminal_color_13	plugged/nord-vim/colors/nord.vim	/^  let g:terminal_color_13 = s:nord15_gui$/;"	v
g:terminal_color_13	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  let g:terminal_color_13 = "#c678dd"$/;"	v
g:terminal_color_14	plugged/nord-vim/colors/nord.vim	/^  let g:terminal_color_14 = s:nord7_gui$/;"	v
g:terminal_color_14	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  let g:terminal_color_14 = "#56b6c2"$/;"	v
g:terminal_color_15	plugged/nord-vim/colors/nord.vim	/^  let g:terminal_color_15 = s:nord6_gui$/;"	v
g:terminal_color_15	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  let g:terminal_color_15 = "#dcdfe4"$/;"	v
g:terminal_color_2	plugged/nord-vim/colors/nord.vim	/^  let g:terminal_color_2 = s:nord14_gui$/;"	v
g:terminal_color_2	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  let g:terminal_color_2 = "#98c379"$/;"	v
g:terminal_color_3	plugged/nord-vim/colors/nord.vim	/^  let g:terminal_color_3 = s:nord13_gui$/;"	v
g:terminal_color_3	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  let g:terminal_color_3 = "#e5c07b"$/;"	v
g:terminal_color_4	plugged/nord-vim/colors/nord.vim	/^  let g:terminal_color_4 = s:nord9_gui$/;"	v
g:terminal_color_4	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  let g:terminal_color_4 = "#61afef"$/;"	v
g:terminal_color_5	plugged/nord-vim/colors/nord.vim	/^  let g:terminal_color_5 = s:nord15_gui$/;"	v
g:terminal_color_5	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  let g:terminal_color_5 = "#c678dd"$/;"	v
g:terminal_color_6	plugged/nord-vim/colors/nord.vim	/^  let g:terminal_color_6 = s:nord8_gui$/;"	v
g:terminal_color_6	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  let g:terminal_color_6 = "#56b6c2"$/;"	v
g:terminal_color_7	plugged/nord-vim/colors/nord.vim	/^  let g:terminal_color_7 = s:nord5_gui$/;"	v
g:terminal_color_7	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  let g:terminal_color_7 = "#dcdfe4"$/;"	v
g:terminal_color_8	plugged/nord-vim/colors/nord.vim	/^  let g:terminal_color_8 = s:nord3_gui$/;"	v
g:terminal_color_8	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  let g:terminal_color_8 = "#282c34"$/;"	v
g:terminal_color_9	plugged/nord-vim/colors/nord.vim	/^  let g:terminal_color_9 = s:nord11_gui$/;"	v
g:terminal_color_9	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  let g:terminal_color_9 = "#e06c75"$/;"	v
g:test_verbose	plugged/vim-go/scripts/runtest.vim	/^  let g:test_verbose = 0$/;"	v
g:testname	plugged/vim-gitgutter/test/runner.vim	/^let g:testname = expand('%')$/;"	v
g:two_firewatch_italics	init.vim	/^let g:two_firewatch_italics=1$/;"	v
g:two_firewatch_italics	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  let g:two_firewatch_italics = 0$/;"	v
g:vim_go_root	plugged/vim-go/scripts/runtest.vim	/^let g:vim_go_root = fnamemodify(getcwd(), ':p')$/;"	v
g:virtual_scriptnames	plugged/vim-fugitive/autoload/fugitive.vim	/^    let g:virtual_scriptnames = {}$/;"	v
g:virtual_scriptnames	plugged/vim-fugitive/autoload/fugitive.vim	/^  let g:virtual_scriptnames[temp] = amatch$/;"	v
g<LeftMouse>	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> g<LeftMouse> <LeftMouse>:GoDef<cr>$/;"	m
gather_candidates	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gd	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> gd :GoDef<cr>$/;"	m
generateImpliedEndTags	plugged/vim-go/test/parse.go	/^func (p *parser) generateImpliedEndTags(exceptions ...string) {$/;"	f	struct:html.parser
getBytes	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytes() []byte {$/;"	f	struct:tui.LightRenderer	typeref:typename:[]byte
getBytesInternal	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytesInternal(buffer []byte, nonblock bool) []byte {$/;"	f	struct:tui.LightRenderer	typeref:typename:[]byte
getEnv	plugged/fzf/src/tui/light.go	/^func getEnv(name string, defaultValue int) int {$/;"	f	package:tui	typeref:typename:int
getch	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) getch(nonblock bool) (int, bool) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(int, bool)
getch	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) getch(nonblock bool) (int, bool) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(int, bool)
gitgutter	plugged/vim-gitgutter/plugin/gitgutter.vim	/^augroup gitgutter$/;"	a
gitgutter#all	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#all(force) abort$/;"	f
gitgutter#async#available	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! gitgutter#async#available()$/;"	f
gitgutter#async#execute	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! gitgutter#async#execute(cmd, bufnr, handler) abort$/;"	f
gitgutter#buffer_disable	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#buffer_disable() abort$/;"	f
gitgutter#buffer_enable	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#buffer_enable() abort$/;"	f
gitgutter#buffer_toggle	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#buffer_toggle() abort$/;"	f
gitgutter#debug#debug	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#debug()$/;"	f
gitgutter#debug#log	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#log(message, ...) abort$/;"	f
gitgutter#diff#handler	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#handler(bufnr, diff) abort$/;"	f
gitgutter#diff#hunk_diff	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#hunk_diff(bufnr, full_diff, ...)$/;"	f
gitgutter#diff#parse_diff	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#parse_diff(diff) abort$/;"	f
gitgutter#diff#parse_hunk	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#parse_hunk(line) abort$/;"	f
gitgutter#diff#process_hunks	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_hunks(bufnr, hunks) abort$/;"	f
gitgutter#diff#run_diff	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#run_diff(bufnr, from, preserve_full_diff) abort$/;"	f
gitgutter#diff_highlight#common_prefix	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#common_prefix(a, b)$/;"	f
gitgutter#diff_highlight#common_suffix	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#common_suffix(a, b, start)$/;"	f
gitgutter#diff_highlight#lcs	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#lcs(s1, s2)$/;"	f
gitgutter#diff_highlight#process	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! gitgutter#diff_highlight#process(hunk_body)$/;"	f
gitgutter#diff_highlight#split	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#split(str, delimiter)$/;"	f
gitgutter#disable	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#disable() abort$/;"	f
gitgutter#enable	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#enable() abort$/;"	f
gitgutter#fold#disable	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#disable()$/;"	f
gitgutter#fold#enable	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#enable()$/;"	f
gitgutter#fold#foldtext	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#foldtext()$/;"	f
gitgutter#fold#is_changed	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#is_changed()$/;"	f
gitgutter#fold#level	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#level(lnum)$/;"	f
gitgutter#fold#toggle	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#toggle()$/;"	f
gitgutter#highlight#define_highlights	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_highlights() abort$/;"	f
gitgutter#highlight#define_sign_text_highlights	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_sign_text_highlights() abort$/;"	f
gitgutter#highlight#define_signs	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_signs() abort$/;"	f
gitgutter#highlight#line_disable	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#line_disable() abort$/;"	f
gitgutter#highlight#line_enable	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#line_enable() abort$/;"	f
gitgutter#highlight#line_toggle	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#line_toggle() abort$/;"	f
gitgutter#highlight#linenr_disable	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#linenr_disable() abort$/;"	f
gitgutter#highlight#linenr_enable	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#linenr_enable() abort$/;"	f
gitgutter#highlight#linenr_toggle	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#linenr_toggle() abort$/;"	f
gitgutter#hunk#close_hunk_preview_window	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#close_hunk_preview_window()$/;"	f
gitgutter#hunk#cursor_in_hunk	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#cursor_in_hunk(hunk) abort$/;"	f
gitgutter#hunk#fix_file_references	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^  function! gitgutter#hunk#fix_file_references(filepath, hunk_diff)$/;"	f
gitgutter#hunk#hunks	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#hunks(bufnr) abort$/;"	f
gitgutter#hunk#in_hunk	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#in_hunk(lnum)$/;"	f
gitgutter#hunk#increment_lines_added	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_added(bufnr, count) abort$/;"	f
gitgutter#hunk#increment_lines_modified	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_modified(bufnr, count) abort$/;"	f
gitgutter#hunk#increment_lines_removed	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_removed(bufnr, count) abort$/;"	f
gitgutter#hunk#is_preview_window_open	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function gitgutter#hunk#is_preview_window_open()$/;"	f
gitgutter#hunk#next_hunk	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#next_hunk(count) abort$/;"	f
gitgutter#hunk#prev_hunk	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#prev_hunk(count) abort$/;"	f
gitgutter#hunk#preview	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#preview() abort$/;"	f
gitgutter#hunk#reset	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#reset(bufnr) abort$/;"	f
gitgutter#hunk#set_hunks	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#set_hunks(bufnr, hunks) abort$/;"	f
gitgutter#hunk#stage	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#stage(...) abort$/;"	f
gitgutter#hunk#summary	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#summary(bufnr) abort$/;"	f
gitgutter#hunk#text_object	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#text_object(inner) abort$/;"	f
gitgutter#hunk#undo	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#undo() abort$/;"	f
gitgutter#process_buffer	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#process_buffer(bufnr, force) abort$/;"	f
gitgutter#quickfix	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#quickfix(current_file)$/;"	f
gitgutter#setup_maps	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#setup_maps()$/;"	f
gitgutter#sign#clear_signs	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#clear_signs(bufnr) abort$/;"	f
gitgutter#sign#disable	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#disable() abort$/;"	f
gitgutter#sign#enable	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#enable() abort$/;"	f
gitgutter#sign#reset	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#reset()$/;"	f
gitgutter#sign#toggle	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#toggle() abort$/;"	f
gitgutter#sign#update_signs	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#update_signs(bufnr, modified_lines) abort$/;"	f
gitgutter#toggle	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#toggle() abort$/;"	f
gitgutter#utility#cd_cmd	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#cd_cmd(bufnr, cmd) abort$/;"	f
gitgutter#utility#extension	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#extension(bufnr) abort$/;"	f
gitgutter#utility#file	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#file(bufnr)$/;"	f
gitgutter#utility#get_diff_base	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#get_diff_base(bufnr)$/;"	f
gitgutter#utility#getbufvar	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#getbufvar(buffer, varname, ...)$/;"	f
gitgutter#utility#has_repo_path	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#has_repo_path(bufnr)$/;"	f
gitgutter#utility#is_active	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#is_active(bufnr) abort$/;"	f
gitgutter#utility#repo_path	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#repo_path(bufnr, shellesc) abort$/;"	f
gitgutter#utility#set_repo_path	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#set_repo_path(bufnr, continuation) abort$/;"	f
gitgutter#utility#setbufvar	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#setbufvar(buffer, varname, val)$/;"	f
gitgutter#utility#shellescape	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#shellescape(arg) abort$/;"	f
gitgutter#utility#supports_overscore_sign	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#supports_overscore_sign()$/;"	f
gitgutter#utility#system	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#system(cmd, ...) abort$/;"	f
gitgutter#utility#warn	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#warn(message) abort$/;"	f
gitgutter#utility#warn_once	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#warn_once(bufnr, message, key) abort$/;"	f
gitgutter#utility#windows	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#windows()$/;"	f
gitgutter_hunk_preview	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^  augroup gitgutter_hunk_preview$/;"	a
give	plugged/fzf/src/terminal_test.go	/^	give$/;"	M	struct:fzf.testCase	typeref:typename:give
give	plugged/fzf/src/terminal_test.go	/^type give struct {$/;"	s	package:fzf
go	plugged/fzf/test/test_go.rb	/^  def go(args)$/;"	f	class:Tmux
go#alternate#Switch	plugged/vim-go/autoload/go/alternate.vim	/^function! go#alternate#Switch(bang, cmd) abort$/;"	f
go#asmfmt#Format	plugged/vim-go/autoload/go/asmfmt.vim	/^function! go#asmfmt#Format() abort$/;"	f
go#asmfmt#ToggleAsmFmtAutoSave	plugged/vim-go/autoload/go/asmfmt.vim	/^function! go#asmfmt#ToggleAsmFmtAutoSave() abort$/;"	f
go#auto#asmfmt_autosave	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#asmfmt_autosave()$/;"	f
go#auto#complete_done	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#complete_done()$/;"	f
go#auto#fmt_autosave	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#fmt_autosave()$/;"	f
go#auto#metalinter_autosave	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#metalinter_autosave()$/;"	f
go#auto#modfmt_autosave	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#modfmt_autosave()$/;"	f
go#auto#template_autocreate	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#template_autocreate()$/;"	f
go#auto#update_autocmd	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#update_autocmd()$/;"	f
go#calls#Callers	plugged/vim-go/autoload/go/calls.vim	/^function! go#calls#Callers() abort$/;"	f
go#cmd#Build	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#Build(bang, ...) abort$/;"	f
go#cmd#BuildTags	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#BuildTags(bang, ...) abort$/;"	f
go#cmd#Generate	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#Generate(bang, ...) abort$/;"	f
go#cmd#Install	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#Install(bang, ...) abort$/;"	f
go#cmd#Run	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#Run(bang, ...) abort$/;"	f
go#cmd#RunTerm	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#RunTerm(bang, mode, files) abort$/;"	f
go#cmd#autowrite	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#autowrite() abort$/;"	f
go#complete#Complete	plugged/vim-go/autoload/go/complete.vim	/^function! go#complete#Complete(findstart, base) abort$/;"	f
go#complete#GetInfo	plugged/vim-go/autoload/go/complete.vim	/^function! go#complete#GetInfo() abort$/;"	f
go#complete#ToggleAutoTypeInfo	plugged/vim-go/autoload/go/complete.vim	/^function! go#complete#ToggleAutoTypeInfo() abort$/;"	f
go#config#AddtagsSkipUnexported	plugged/vim-go/autoload/go/config.vim	/^function! go#config#AddtagsSkipUnexported() abort$/;"	f
go#config#AddtagsTransform	plugged/vim-go/autoload/go/config.vim	/^function! go#config#AddtagsTransform() abort$/;"	f
go#config#AlternateMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#AlternateMode() abort$/;"	f
go#config#AsmfmtAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#AsmfmtAutosave() abort$/;"	f
go#config#AutoSameids	plugged/vim-go/autoload/go/config.vim	/^function! go#config#AutoSameids() abort$/;"	f
go#config#AutoTypeInfo	plugged/vim-go/autoload/go/config.vim	/^function! go#config#AutoTypeInfo() abort$/;"	f
go#config#BinPath	plugged/vim-go/autoload/go/config.vim	/^function! go#config#BinPath() abort$/;"	f
go#config#BuildTags	plugged/vim-go/autoload/go/config.vim	/^function! go#config#BuildTags() abort$/;"	f
go#config#CodeCompletionEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#CodeCompletionEnabled() abort$/;"	f
go#config#CodeCompletionIcase	plugged/vim-go/autoload/go/config.vim	/^function! go#config#CodeCompletionIcase() abort$/;"	f
go#config#Debug	plugged/vim-go/autoload/go/config.vim	/^function! go#config#Debug() abort$/;"	f
go#config#DebugAddress	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugAddress() abort$/;"	f
go#config#DebugBreakpointSignText	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugBreakpointSignText() abort$/;"	f
go#config#DebugCommands	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugCommands() abort$/;"	f
go#config#DebugLogOutput	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugLogOutput() abort$/;"	f
go#config#DebugMappings	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugMappings() abort$/;"	f
go#config#DebugPreserveLayout	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugPreserveLayout() abort$/;"	f
go#config#DebugSubstitutePaths	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugSubstitutePaths() abort$/;"	f
go#config#DebugWindows	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugWindows() abort$/;"	f
go#config#DeclsIncludes	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DeclsIncludes() abort$/;"	f
go#config#DeclsMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DeclsMode() abort$/;"	f
go#config#DefMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DefMode() abort$/;"	f
go#config#DefReuseBuffer	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DefReuseBuffer() abort$/;"	f
go#config#DiagnosticsEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DiagnosticsEnabled() abort$/;"	f
go#config#DiagnosticsLevel	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DiagnosticsLevel() abort$/;"	f
go#config#DocBalloon	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DocBalloon() abort$/;"	f
go#config#DocMaxHeight	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DocMaxHeight() abort$/;"	f
go#config#DocPopupWindow	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DocPopupWindow() abort$/;"	f
go#config#DocUrl	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DocUrl() abort$/;"	f
go#config#EchoCommandInfo	plugged/vim-go/autoload/go/config.vim	/^function! go#config#EchoCommandInfo() abort$/;"	f
go#config#EchoGoInfo	plugged/vim-go/autoload/go/config.vim	/^function! go#config#EchoGoInfo() abort$/;"	f
go#config#ErrcheckBin	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ErrcheckBin() abort$/;"	f
go#config#FillStructMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FillStructMode() abort$/;"	f
go#config#FmtAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FmtAutosave() abort$/;"	f
go#config#FmtCommand	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FmtCommand() abort$/;"	f
go#config#FmtExperimental	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FmtExperimental() abort$/;"	f
go#config#FmtFailSilently	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FmtFailSilently() abort$/;"	f
go#config#FmtOptions	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FmtOptions() abort$/;"	f
go#config#FoldEnable	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FoldEnable(...) abort$/;"	f
go#config#GolintBin	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GolintBin() abort$/;"	f
go#config#GoplsAnalyses	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsAnalyses() abort$/;"	f
go#config#GoplsCompleteUnimported	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsCompleteUnimported() abort$/;"	f
go#config#GoplsDeepCompletion	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsDeepCompletion() abort$/;"	f
go#config#GoplsEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsEnabled() abort$/;"	f
go#config#GoplsGofumpt	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsGofumpt() abort$/;"	f
go#config#GoplsLocal	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsLocal() abort$/;"	f
go#config#GoplsMatcher	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsMatcher() abort$/;"	f
go#config#GoplsOptions	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsOptions() abort$/;"	f
go#config#GoplsSettings	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsSettings() abort$/;"	f
go#config#GoplsStaticCheck	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsStaticCheck() abort$/;"	f
go#config#GoplsTempModfile	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsTempModfile() abort$/;"	f
go#config#GoplsUsePlaceholders	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsUsePlaceholders() abort$/;"	f
go#config#GorenameBin	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GorenameBin() abort$/;"	f
go#config#GorenamePrefill	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GorenamePrefill() abort$/;"	f
go#config#GuruScope	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GuruScope() abort$/;"	f
go#config#HighlightArrayWhitespaceError	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightArrayWhitespaceError() abort$/;"	f
go#config#HighlightBuildConstraints	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightBuildConstraints() abort$/;"	f
go#config#HighlightChanWhitespaceError	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightChanWhitespaceError() abort$/;"	f
go#config#HighlightDebug	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightDebug() abort$/;"	f
go#config#HighlightDiagnosticErrors	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightDiagnosticErrors() abort$/;"	f
go#config#HighlightDiagnosticWarnings	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightDiagnosticWarnings() abort$/;"	f
go#config#HighlightExtraTypes	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightExtraTypes() abort$/;"	f
go#config#HighlightFields	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightFields() abort$/;"	f
go#config#HighlightFormatStrings	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightFormatStrings() abort$/;"	f
go#config#HighlightFunctionCalls	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightFunctionCalls() abort$/;"	f
go#config#HighlightFunctionParameters	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightFunctionParameters() abort$/;"	f
go#config#HighlightFunctions	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightFunctions() abort$/;"	f
go#config#HighlightGenerateTags	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightGenerateTags() abort$/;"	f
go#config#HighlightOperators	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightOperators() abort$/;"	f
go#config#HighlightSpaceTabError	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightSpaceTabError() abort$/;"	f
go#config#HighlightStringSpellcheck	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightStringSpellcheck() abort$/;"	f
go#config#HighlightTrailingWhitespaceError	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightTrailingWhitespaceError() abort$/;"	f
go#config#HighlightTypes	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightTypes() abort$/;"	f
go#config#HighlightVariableAssignments	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightVariableAssignments() abort$/;"	f
go#config#HighlightVariableDeclarations	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightVariableDeclarations() abort$/;"	f
go#config#ImplementsMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ImplementsMode() abort$/;"	f
go#config#ImportsAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ImportsAutosave() abort$/;"	f
go#config#ImportsMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ImportsMode() abort$/;"	f
go#config#InfoMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#InfoMode() abort$/;"	f
go#config#ListAutoclose	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ListAutoclose() abort$/;"	f
go#config#ListHeight	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ListHeight() abort$/;"	f
go#config#ListType	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ListType() abort$/;"	f
go#config#ListTypeCommands	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ListTypeCommands() abort$/;"	f
go#config#LspLog	plugged/vim-go/autoload/go/config.vim	/^function! go#config#LspLog() abort$/;"	f
go#config#MetalinterAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#MetalinterAutosave() abort$/;"	f
go#config#MetalinterAutosaveEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#MetalinterAutosaveEnabled() abort$/;"	f
go#config#MetalinterCommand	plugged/vim-go/autoload/go/config.vim	/^function! go#config#MetalinterCommand() abort$/;"	f
go#config#MetalinterDeadline	plugged/vim-go/autoload/go/config.vim	/^function! go#config#MetalinterDeadline() abort$/;"	f
go#config#MetalinterEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#MetalinterEnabled() abort$/;"	f
go#config#ModFmtAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ModFmtAutosave() abort$/;"	f
go#config#PlayBrowserCommand	plugged/vim-go/autoload/go/config.vim	/^function! go#config#PlayBrowserCommand() abort$/;"	f
go#config#PlayOpenBrowser	plugged/vim-go/autoload/go/config.vim	/^function! go#config#PlayOpenBrowser() abort$/;"	f
go#config#ReferrersMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ReferrersMode() abort$/;"	f
go#config#RenameCommand	plugged/vim-go/autoload/go/config.vim	/^function! go#config#RenameCommand() abort$/;"	f
go#config#SearchBinPathFirst	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SearchBinPathFirst() abort$/;"	f
go#config#SetAsmfmtAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetAsmfmtAutosave(value) abort$/;"	f
go#config#SetAutoSameids	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetAutoSameids(value) abort$/;"	f
go#config#SetAutoTypeInfo	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetAutoTypeInfo(value) abort$/;"	f
go#config#SetBuildTags	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetBuildTags(value) abort$/;"	f
go#config#SetDebugDiag	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetDebugDiag(value) abort$/;"	f
go#config#SetFmtAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetFmtAutosave(value) abort$/;"	f
go#config#SetGuruScope	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetGuruScope(scope) abort$/;"	f
go#config#SetMetalinterAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetMetalinterAutosave(value) abort$/;"	f
go#config#SetModFmtAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetModFmtAutosave(value) abort$/;"	f
go#config#SetTemplateAutocreate	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetTemplateAutocreate(value) abort$/;"	f
go#config#SetTermCloseOnExit	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetTermCloseOnExit(value) abort$/;"	f
go#config#SetTermEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetTermEnabled(value) abort$/;"	f
go#config#SnippetEngine	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SnippetEngine() abort$/;"	f
go#config#StatuslineDuration	plugged/vim-go/autoload/go/config.vim	/^function! go#config#StatuslineDuration() abort$/;"	f
go#config#TemplateAutocreate	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TemplateAutocreate() abort$/;"	f
go#config#TemplateFile	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TemplateFile() abort$/;"	f
go#config#TemplateTestFile	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TemplateTestFile() abort$/;"	f
go#config#TemplateUsePkg	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TemplateUsePkg() abort$/;"	f
go#config#TermCloseOnExit	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TermCloseOnExit() abort$/;"	f
go#config#TermEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TermEnabled() abort$/;"	f
go#config#TermHeight	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TermHeight() abort$/;"	f
go#config#TermMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TermMode() abort$/;"	f
go#config#TermReuse	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TermReuse() abort$/;"	f
go#config#TermWidth	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TermWidth() abort$/;"	f
go#config#TestShowName	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TestShowName() abort$/;"	f
go#config#TestTimeout	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TestTimeout() abort$/;"	f
go#config#TextobjIncludeFunctionDoc	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TextobjIncludeFunctionDoc() abort$/;"	f
go#config#TextobjIncludeVariable	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TextobjIncludeVariable() abort$/;"	f
go#config#Updatetime	plugged/vim-go/autoload/go/config.vim	/^function! go#config#Updatetime() abort$/;"	f
go#config#VersionWarning	plugged/vim-go/autoload/go/config.vim	/^function! go#config#VersionWarning() abort$/;"	f
go#coverage#Browser	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#Browser(bang, ...) abort$/;"	f
go#coverage#Buffer	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#Buffer(bang, ...) abort$/;"	f
go#coverage#BufferToggle	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#BufferToggle(bang, ...) abort$/;"	f
go#coverage#Clear	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#Clear() abort$/;"	f
go#coverage#genmatch	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#genmatch(cov) abort$/;"	f
go#coverage#overlay	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#overlay(file) abort$/;"	f
go#coverage#parsegocoverline	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#parsegocoverline(line) abort$/;"	f
go#debug#BalloonExpr	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#BalloonExpr() abort$/;"	f
go#debug#Breakpoint	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Breakpoint(...) abort$/;"	f
go#debug#Goroutine	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Goroutine() abort$/;"	f
go#debug#Print	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Print(arg) abort$/;"	f
go#debug#Restart	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Restart() abort$/;"	f
go#debug#Set	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Set(symbol, value) abort$/;"	f
go#debug#Stack	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Stack(name) abort$/;"	f
go#debug#Start	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Start(mode, ...) abort$/;"	f
go#debug#Stop	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Stop() abort$/;"	f
go#debug#TestFunc	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#TestFunc(...) abort$/;"	f
go#decls#Decls	plugged/vim-go/autoload/go/decls.vim	/^function! go#decls#Decls(mode, ...) abort$/;"	f
go#def#Jump	plugged/vim-go/autoload/go/def.vim	/^function! go#def#Jump(mode, type) abort$/;"	f
go#def#SelectStackEntry	plugged/vim-go/autoload/go/def.vim	/^function! go#def#SelectStackEntry() abort$/;"	f
go#def#Stack	plugged/vim-go/autoload/go/def.vim	/^function! go#def#Stack(...) abort$/;"	f
go#def#StackClear	plugged/vim-go/autoload/go/def.vim	/^function! go#def#StackClear(...) abort$/;"	f
go#def#StackPop	plugged/vim-go/autoload/go/def.vim	/^function! go#def#StackPop(...) abort$/;"	f
go#def#StackUI	plugged/vim-go/autoload/go/def.vim	/^function! go#def#StackUI() abort$/;"	f
go#def#jump_to_declaration	plugged/vim-go/autoload/go/def.vim	/^function! go#def#jump_to_declaration(out, mode, bin_name) abort$/;"	f
go#doc#Open	plugged/vim-go/autoload/go/doc.vim	/^function! go#doc#Open(newmode, mode, ...) abort$/;"	f
go#doc#OpenBrowser	plugged/vim-go/autoload/go/doc.vim	/^function! go#doc#OpenBrowser(...) abort$/;"	f
go#fillstruct#FillStruct	plugged/vim-go/autoload/go/fillstruct.vim	/^function! go#fillstruct#FillStruct() abort$/;"	f
go#fmt#CleanErrors	plugged/vim-go/autoload/go/fmt.vim	/^function! go#fmt#CleanErrors() abort$/;"	f
go#fmt#Format	plugged/vim-go/autoload/go/fmt.vim	/^function! go#fmt#Format(withGoimport) abort$/;"	f
go#fmt#ShowErrors	plugged/vim-go/autoload/go/fmt.vim	/^function! go#fmt#ShowErrors(errors) abort$/;"	f
go#fmt#ToggleFmtAutoSave	plugged/vim-go/autoload/go/fmt.vim	/^function! go#fmt#ToggleFmtAutoSave() abort$/;"	f
go#fmt#run	plugged/vim-go/autoload/go/fmt.vim	/^function! go#fmt#run(bin_name, source, target)$/;"	f
go#fmt#update_file	plugged/vim-go/autoload/go/fmt.vim	/^function! go#fmt#update_file(source, target)$/;"	f
go#guru#AutoToggleSameIds	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#AutoToggleSameIds() abort$/;"	f
go#guru#Callees	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Callees(selected) abort$/;"	f
go#guru#Callstack	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Callstack(selected) abort$/;"	f
go#guru#ChannelPeers	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#ChannelPeers(selected) abort$/;"	f
go#guru#ClearSameIds	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#ClearSameIds() abort$/;"	f
go#guru#Describe	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Describe(selected) abort$/;"	f
go#guru#DescribeInfo	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#DescribeInfo(showstatus) abort$/;"	f
go#guru#Freevars	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Freevars(selected) abort$/;"	f
go#guru#Implements	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Implements(selected) abort$/;"	f
go#guru#PointsTo	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#PointsTo(selected) abort$/;"	f
go#guru#Referrers	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Referrers(selected) abort$/;"	f
go#guru#SameIds	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#SameIds(showstatus) abort$/;"	f
go#guru#Scope	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Scope(...) abort$/;"	f
go#guru#ToggleSameIds	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#ToggleSameIds() abort$/;"	f
go#guru#Whicherrs	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Whicherrs(selected) abort$/;"	f
go#iferr#Generate	plugged/vim-go/autoload/go/iferr.vim	/^function! go#iferr#Generate()$/;"	f
go#impl#Complete	plugged/vim-go/autoload/go/impl.vim	/^function! go#impl#Complete(arglead, cmdline, cursorpos) abort$/;"	f
go#impl#Impl	plugged/vim-go/autoload/go/impl.vim	/^function! go#impl#Impl(...) abort$/;"	f
go#implements#Implements	plugged/vim-go/autoload/go/implements.vim	/^function! go#implements#Implements(selected) abort$/;"	f
go#import#SwitchImport	plugged/vim-go/autoload/go/import.vim	/^function! go#import#SwitchImport(enabled, localname, path, bang) abort$/;"	f
go#issue#New	plugged/vim-go/autoload/go/issue.vim	/^function! go#issue#New() abort$/;"	f
go#job#Options	plugged/vim-go/autoload/go/job.vim	/^function! go#job#Options(args)$/;"	f
go#job#Spawn	plugged/vim-go/autoload/go/job.vim	/^function! go#job#Spawn(cmd, args)$/;"	f
go#job#Start	plugged/vim-go/autoload/go/job.vim	/^function! go#job#Start(cmd, options)$/;"	f
go#job#Stop	plugged/vim-go/autoload/go/job.vim	/^function! go#job#Stop(job) abort$/;"	f
go#job#Wait	plugged/vim-go/autoload/go/job.vim	/^function! go#job#Wait(job) abort$/;"	f
go#keyify#Keyify	plugged/vim-go/autoload/go/keyify.vim	/^function! go#keyify#Keyify()$/;"	f
go#lint#Diagnostics	plugged/vim-go/autoload/go/lint.vim	/^function! go#lint#Diagnostics(bang, ...) abort$/;"	f
go#lint#Errcheck	plugged/vim-go/autoload/go/lint.vim	/^function! go#lint#Errcheck(bang, ...) abort$/;"	f
go#lint#Golint	plugged/vim-go/autoload/go/lint.vim	/^function! go#lint#Golint(bang, ...) abort$/;"	f
go#lint#Gometa	plugged/vim-go/autoload/go/lint.vim	/^function! go#lint#Gometa(bang, autosave, ...) abort$/;"	f
go#lint#ToggleMetaLinterAutoSave	plugged/vim-go/autoload/go/lint.vim	/^function! go#lint#ToggleMetaLinterAutoSave() abort$/;"	f
go#lint#Vet	plugged/vim-go/autoload/go/lint.vim	/^function! go#lint#Vet(bang, ...) abort$/;"	f
go#list#Clean	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Clean(listtype) abort$/;"	f
go#list#Close	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Close(listtype) abort$/;"	f
go#list#Get	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Get(listtype) abort$/;"	f
go#list#JumpToFirst	plugged/vim-go/autoload/go/list.vim	/^function! go#list#JumpToFirst(listtype) abort$/;"	f
go#list#Parse	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Parse(listtype, items, title, add) abort$/;"	f
go#list#ParseFormat	plugged/vim-go/autoload/go/list.vim	/^function! go#list#ParseFormat(listtype, errformat, items, title, add) abort$/;"	f
go#list#Populate	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Populate(listtype, items, title) abort$/;"	f
go#list#Type	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Type(for) abort$/;"	f
go#list#Window	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Window(listtype, ...) abort$/;"	f
go#lsp#AddWorkspaceDirectory	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#AddWorkspaceDirectory(...) abort$/;"	f
go#lsp#AnalyzeFile	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#AnalyzeFile(fname) abort$/;"	f
go#lsp#Callers	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Callers(fname, line, col, handler) abort$/;"	f
go#lsp#CleanWorkspaces	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#CleanWorkspaces() abort$/;"	f
go#lsp#ClearDiagnosticHighlights	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#ClearDiagnosticHighlights() abort$/;"	f
go#lsp#Completion	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Completion(fname, line, col, handler) abort$/;"	f
go#lsp#DebugBrowser	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#DebugBrowser() abort$/;"	f
go#lsp#Definition	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Definition(fname, line, col, handler) abort$/;"	f
go#lsp#Diagnostics	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Diagnostics(...) abort$/;"	f
go#lsp#DidChange	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#DidChange(fname) abort$/;"	f
go#lsp#DidClose	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#DidClose(fname) abort$/;"	f
go#lsp#DidOpen	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#DidOpen(fname) abort$/;"	f
go#lsp#Doc	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Doc() abort$/;"	f
go#lsp#DocLink	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#DocLink() abort$/;"	f
go#lsp#Exit	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Exit() abort$/;"	f
go#lsp#FillStruct	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#FillStruct() abort$/;"	f
go#lsp#Format	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Format() abort$/;"	f
go#lsp#GetInfo	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#GetInfo()$/;"	f
go#lsp#Hover	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Hover(fname, line, col, handler) abort$/;"	f
go#lsp#Implements	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Implements(fname, line, col, handler) abort$/;"	f
go#lsp#Imports	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Imports() abort$/;"	f
go#lsp#Info	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Info(showstatus)$/;"	f
go#lsp#Referrers	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Referrers(fname, line, col, handler) abort$/;"	f
go#lsp#Rename	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Rename(newName) abort$/;"	f
go#lsp#ResetWorkspaceDirectories	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#ResetWorkspaceDirectories() abort$/;"	f
go#lsp#Restart	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Restart() abort$/;"	f
go#lsp#SameIDs	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#SameIDs(showstatus, fname, line, col, handler) abort$/;"	f
go#lsp#TypeDef	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#TypeDef(fname, line, col, handler) abort$/;"	f
go#lsp#completionitemkind#IsFunction	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^function! go#lsp#completionitemkind#IsFunction(kind) abort$/;"	f
go#lsp#completionitemkind#IsMethod	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^function! go#lsp#completionitemkind#IsMethod(kind) abort$/;"	f
go#lsp#completionitemkind#Vim	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^function! go#lsp#completionitemkind#Vim(kind) abort$/;"	f
go#lsp#lsp#Position	plugged/vim-go/autoload/go/lsp/lsp.vim	/^function! go#lsp#lsp#Position(...)$/;"	f
go#lsp#lsp#PositionOf	plugged/vim-go/autoload/go/lsp/lsp.vim	/^function! go#lsp#lsp#PositionOf(content, units, ...) abort$/;"	f
go#lsp#lsp#SeverityToErrorType	plugged/vim-go/autoload/go/lsp/lsp.vim	/^function! go#lsp#lsp#SeverityToErrorType(severity) abort$/;"	f
go#lsp#message#ApplyWorkspaceEditResponse	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#ApplyWorkspaceEditResponse(ok) abort$/;"	f
go#lsp#message#ChangeWorkspaceFolders	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#ChangeWorkspaceFolders(add, remove) abort$/;"	f
go#lsp#message#CodeActionFillStruct	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#CodeActionFillStruct(file, line, col) abort$/;"	f
go#lsp#message#CodeActionImports	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#CodeActionImports(file) abort$/;"	f
go#lsp#message#CodeActionRefactorRewrite	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#CodeActionRefactorRewrite(file, startline, startcol, endline, endcol) a/;"	f
go#lsp#message#Completion	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Completion(file, line, col) abort$/;"	f
go#lsp#message#ConfigurationResult	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#ConfigurationResult(items) abort$/;"	f
go#lsp#message#Definition	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Definition(file, line, col) abort$/;"	f
go#lsp#message#DidChange	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#DidChange(file, content, version) abort$/;"	f
go#lsp#message#DidClose	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#DidClose(file) abort$/;"	f
go#lsp#message#DidOpen	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#DidOpen(file, content, version) abort$/;"	f
go#lsp#message#ExecuteCommand	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#ExecuteCommand(cmd, args) abort$/;"	f
go#lsp#message#Exit	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Exit() abort$/;"	f
go#lsp#message#Format	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Format(file) abort$/;"	f
go#lsp#message#Hover	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Hover(file, line, col) abort$/;"	f
go#lsp#message#Implementation	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Implementation(file, line, col) abort$/;"	f
go#lsp#message#IncomingCalls	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#IncomingCalls(item) abort$/;"	f
go#lsp#message#Initialize	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Initialize(wd) abort$/;"	f
go#lsp#message#Initialized	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Initialized() abort$/;"	f
go#lsp#message#PrepareCallHierarchy	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#PrepareCallHierarchy(file, line, col) abort$/;"	f
go#lsp#message#PrepareRename	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#PrepareRename(file, line, col) abort$/;"	f
go#lsp#message#References	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#References(file, line, col) abort$/;"	f
go#lsp#message#Rename	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Rename(file, line, col, newName) abort$/;"	f
go#lsp#message#Shutdown	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Shutdown() abort$/;"	f
go#lsp#message#TypeDefinition	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#TypeDefinition(file, line, col) abort$/;"	f
go#lsp#message#WorkspaceFoldersResult	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#WorkspaceFoldersResult(dirs) abort$/;"	f
go#mod#Format	plugged/vim-go/autoload/go/mod.vim	/^function! go#mod#Format() abort$/;"	f
go#mod#ToggleModFmtAutoSave	plugged/vim-go/autoload/go/mod.vim	/^function! go#mod#ToggleModFmtAutoSave() abort$/;"	f
go#mod#update_file	plugged/vim-go/autoload/go/mod.vim	/^function! go#mod#update_file(source, target)$/;"	f
go#package#Complete	plugged/vim-go/autoload/go/package.vim	/^function! go#package#Complete(ArgLead, CmdLine, CursorPos) abort$/;"	f
go#package#CompleteMembers	plugged/vim-go/autoload/go/package.vim	/^function! go#package#CompleteMembers(package, member) abort$/;"	f
go#package#FromPath	plugged/vim-go/autoload/go/package.vim	/^function! go#package#FromPath(arg) abort$/;"	f
go#package#ImportPath	plugged/vim-go/autoload/go/package.vim	/^function! go#package#ImportPath() abort$/;"	f
go#package#InGOPATH	plugged/vim-go/autoload/go/package.vim	/^function! go#package#InGOPATH() abort$/;"	f
go#path#BinPath	plugged/vim-go/autoload/go/path.vim	/^function! go#path#BinPath() abort$/;"	f
go#path#CheckBinPath	plugged/vim-go/autoload/go/path.vim	/^function! go#path#CheckBinPath(binpath) abort$/;"	f
go#path#Default	plugged/vim-go/autoload/go/path.vim	/^function! go#path#Default() abort$/;"	f
go#path#FromURI	plugged/vim-go/autoload/go/path.vim	/^function! go#path#FromURI(uri) abort$/;"	f
go#path#GoPath	plugged/vim-go/autoload/go/path.vim	/^function! go#path#GoPath(...) abort$/;"	f
go#path#ToURI	plugged/vim-go/autoload/go/path.vim	/^function! go#path#ToURI(path)$/;"	f
go#play#Share	plugged/vim-go/autoload/go/play.vim	/^function! go#play#Share(count, line1, line2) abort$/;"	f
go#promise#New	plugged/vim-go/autoload/go/promise.vim	/^function! go#promise#New(fn, timeout, default) abort$/;"	f
go#referrers#Referrers	plugged/vim-go/autoload/go/referrers.vim	/^function! go#referrers#Referrers(selected) abort$/;"	f
go#rename#Complete	plugged/vim-go/autoload/go/rename.vim	/^function! go#rename#Complete(lead, cmdline, cursor)$/;"	f
go#rename#Rename	plugged/vim-go/autoload/go/rename.vim	/^function! go#rename#Rename(bang, ...) abort$/;"	f
go#statusline#Clear	plugged/vim-go/autoload/go/statusline.vim	/^function! go#statusline#Clear(timer_id) abort$/;"	f
go#statusline#Show	plugged/vim-go/autoload/go/statusline.vim	/^function! go#statusline#Show() abort$/;"	f
go#statusline#Update	plugged/vim-go/autoload/go/statusline.vim	/^function! go#statusline#Update(status_dir, status) abort$/;"	f
go#tags#Add	plugged/vim-go/autoload/go/tags.vim	/^function! go#tags#Add(start, end, count, ...) abort$/;"	f
go#tags#Remove	plugged/vim-go/autoload/go/tags.vim	/^function! go#tags#Remove(start, end, count, ...) abort$/;"	f
go#tags#run	plugged/vim-go/autoload/go/tags.vim	/^function! go#tags#run(start, end, offset, mode, fname, test_mode, ...) abort$/;"	f
go#template#ToggleAutoCreate	plugged/vim-go/autoload/go/template.vim	/^function! go#template#ToggleAutoCreate() abort$/;"	f
go#template#create	plugged/vim-go/autoload/go/template.vim	/^function! go#template#create() abort$/;"	f
go#term#ToggleCloseOnExit	plugged/vim-go/autoload/go/term.vim	/^function! go#term#ToggleCloseOnExit() abort$/;"	f
go#term#new	plugged/vim-go/autoload/go/term.vim	/^function! go#term#new(bang, cmd, errorformat) abort$/;"	f
go#term#newmode	plugged/vim-go/autoload/go/term.vim	/^function! go#term#newmode(bang, cmd, errorformat, mode) abort$/;"	f
go#test#Func	plugged/vim-go/autoload/go/test.vim	/^function! go#test#Func(bang, ...) abort$/;"	f
go#test#Test	plugged/vim-go/autoload/go/test.vim	/^function! go#test#Test(bang, compile, ...) abort$/;"	f
go#textobj#Comment	plugged/vim-go/autoload/go/textobj.vim	/^function! go#textobj#Comment(mode) abort$/;"	f
go#textobj#Function	plugged/vim-go/autoload/go/textobj.vim	/^function! go#textobj#Function(mode) abort$/;"	f
go#textobj#FunctionJump	plugged/vim-go/autoload/go/textobj.vim	/^function! go#textobj#FunctionJump(mode, direction) abort$/;"	f
go#textobj#FunctionLocation	plugged/vim-go/autoload/go/textobj.vim	/^function! go#textobj#FunctionLocation(direction, cnt) abort$/;"	f
go#tool#Deps	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#Deps() abort$/;"	f
go#tool#DescribeBalloon	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#DescribeBalloon()$/;"	f
go#tool#Exists	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#Exists(importpath) abort$/;"	f
go#tool#Files	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#Files(...) abort$/;"	f
go#tool#Imports	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#Imports() abort$/;"	f
go#tool#Info	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#Info(showstatus) abort$/;"	f
go#tool#List	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#List(package_path) abort$/;"	f
go#tool#PackageName	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#PackageName() abort$/;"	f
go#tool#ValidFiles	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#ValidFiles(...)$/;"	f
go#ui#CloseWindow	plugged/vim-go/autoload/go/ui.vim	/^function! go#ui#CloseWindow() abort$/;"	f
go#ui#GetReturnWindow	plugged/vim-go/autoload/go/ui.vim	/^function! go#ui#GetReturnWindow() abort$/;"	f
go#ui#OpenDefinition	plugged/vim-go/autoload/go/ui.vim	/^function! go#ui#OpenDefinition(filter) abort$/;"	f
go#ui#OpenWindow	plugged/vim-go/autoload/go/ui.vim	/^function! go#ui#OpenWindow(title, content, filetype) abort$/;"	f
go#uri#Decode	plugged/vim-go/autoload/go/uri.vim	/^function! go#uri#Decode(value) abort$/;"	f
go#uri#Encode	plugged/vim-go/autoload/go/uri.vim	/^function! go#uri#Encode(value) abort$/;"	f
go#uri#EncodePath	plugged/vim-go/autoload/go/uri.vim	/^function! go#uri#EncodePath(value) abort$/;"	f
go#util#Chdir	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Chdir(dir) abort$/;"	f
go#util#ClearHighlights	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ClearHighlights(group) abort$/;"	f
go#util#EchoError	plugged/vim-go/autoload/go/util.vim	/^function! go#util#EchoError(msg)$/;"	f
go#util#EchoInfo	plugged/vim-go/autoload/go/util.vim	/^function! go#util#EchoInfo(msg)$/;"	f
go#util#EchoProgress	plugged/vim-go/autoload/go/util.vim	/^function! go#util#EchoProgress(msg)$/;"	f
go#util#EchoSuccess	plugged/vim-go/autoload/go/util.vim	/^function! go#util#EchoSuccess(msg)$/;"	f
go#util#EchoWarning	plugged/vim-go/autoload/go/util.vim	/^function! go#util#EchoWarning(msg)$/;"	f
go#util#Exec	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Exec(cmd, ...) abort$/;"	f
go#util#ExecInDir	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ExecInDir(cmd, ...) abort$/;"	f
go#util#ExecInWorkDir	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ExecInWorkDir(cmd, wd, ...) abort$/;"	f
go#util#ExpandPattern	plugged/vim-go/autoload/go/util.vim	/^function go#util#ExpandPattern(...) abort$/;"	f
go#util#GetLines	plugged/vim-go/autoload/go/util.vim	/^function! go#util#GetLines()$/;"	f
go#util#HasDebug	plugged/vim-go/autoload/go/util.vim	/^function! go#util#HasDebug(flag)$/;"	f
go#util#HighlightPositions	plugged/vim-go/autoload/go/util.vim	/^function! go#util#HighlightPositions(group, pos) abort$/;"	f
go#util#IsMac	plugged/vim-go/autoload/go/util.vim	/^function! go#util#IsMac() abort$/;"	f
go#util#IsUsingCygwinShell	plugged/vim-go/autoload/go/util.vim	/^function! go#util#IsUsingCygwinShell()$/;"	f
go#util#IsWin	plugged/vim-go/autoload/go/util.vim	/^function! go#util#IsWin() abort$/;"	f
go#util#Join	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Join(...) abort$/;"	f
go#util#LineEnding	plugged/vim-go/autoload/go/util.vim	/^function! go#util#LineEnding() abort$/;"	f
go#util#ModuleRoot	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ModuleRoot(...) abort$/;"	f
go#util#Offset	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Offset(line, col) abort$/;"	f
go#util#OffsetCursor	plugged/vim-go/autoload/go/util.vim	/^function! go#util#OffsetCursor() abort$/;"	f
go#util#OpenBrowser	plugged/vim-go/autoload/go/util.vim	/^function! go#util#OpenBrowser(url) abort$/;"	f
go#util#ParseErrors	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ParseErrors(lines) abort$/;"	f
go#util#PathListSep	plugged/vim-go/autoload/go/util.vim	/^function! go#util#PathListSep() abort$/;"	f
go#util#PathSep	plugged/vim-go/autoload/go/util.vim	/^function! go#util#PathSep() abort$/;"	f
go#util#SetEnv	plugged/vim-go/autoload/go/util.vim	/^function! go#util#SetEnv(name, value) abort$/;"	f
go#util#ShellError	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ShellError() abort$/;"	f
go#util#Shellescape	plugged/vim-go/autoload/go/util.vim	/^fu! go#util#Shellescape(arg)$/;"	f
go#util#Shelljoin	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Shelljoin(arglist, ...) abort$/;"	f
go#util#Shelllist	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Shelllist(arglist, ...) abort$/;"	f
go#util#ShowInfo	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ShowInfo(info)$/;"	f
go#util#StripPathSep	plugged/vim-go/autoload/go/util.vim	/^function! go#util#StripPathSep(path) abort$/;"	f
go#util#StripTrailingSlash	plugged/vim-go/autoload/go/util.vim	/^function! go#util#StripTrailingSlash(paths) abort$/;"	f
go#util#System	plugged/vim-go/autoload/go/util.vim	/^function! go#util#System(str, ...) abort$/;"	f
go#util#TestName	plugged/vim-go/autoload/go/util.vim	/^function go#util#TestName() abort$/;"	f
go#util#Windo	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Windo(command) abort$/;"	f
go#util#archive	plugged/vim-go/autoload/go/util.vim	/^function! go#util#archive()$/;"	f
go#util#camelcase	plugged/vim-go/autoload/go/util.vim	/^function! go#util#camelcase(word) abort$/;"	f
go#util#env	plugged/vim-go/autoload/go/util.vim	/^function! go#util#env(key) abort$/;"	f
go#util#goarch	plugged/vim-go/autoload/go/util.vim	/^function! go#util#goarch() abort$/;"	f
go#util#gobin	plugged/vim-go/autoload/go/util.vim	/^function! go#util#gobin() abort$/;"	f
go#util#gomod	plugged/vim-go/autoload/go/util.vim	/^function! go#util#gomod() abort$/;"	f
go#util#gomodcache	plugged/vim-go/autoload/go/util.vim	/^function! go#util#gomodcache() abort$/;"	f
go#util#goos	plugged/vim-go/autoload/go/util.vim	/^function! go#util#goos() abort$/;"	f
go#util#gopath	plugged/vim-go/autoload/go/util.vim	/^function! go#util#gopath() abort$/;"	f
go#util#goroot	plugged/vim-go/autoload/go/util.vim	/^function! go#util#goroot() abort$/;"	f
go#util#has_job	plugged/vim-go/autoload/go/util.vim	/^function! go#util#has_job(...) abort$/;"	f
go#util#hostosarch	plugged/vim-go/autoload/go/util.vim	/^function! go#util#hostosarch() abort$/;"	f
go#util#pascalcase	plugged/vim-go/autoload/go/util.vim	/^function! go#util#pascalcase(word) abort$/;"	f
go#util#snakecase	plugged/vim-go/autoload/go/util.vim	/^function! go#util#snakecase(word) abort$/;"	f
go#util#snippetcase	plugged/vim-go/autoload/go/util.vim	/^function! go#util#snippetcase(word) abort$/;"	f
go#util#tempdir	plugged/vim-go/autoload/go/util.vim	/^function! go#util#tempdir(prefix) abort$/;"	f
gopher-body	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(-0.18574987,-0.98259706,0.98259706,-0.18574987,-1213.2665,1828./;"	d
gopher-body	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(-0.18574987,-0.98259706,0.98259706,-0.18574987,-1213.2665,1828./;"	i
gopher-eye	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="translate(381.30424,802.02286)">$/;"	d
gopher-eye	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="translate(381.30424,802.02286)">$/;"	i
gopher-iris	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="translate(-9.2596241,38.869516)">$/;"	d
gopher-iris	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="translate(-9.2596241,38.869516)">$/;"	i
gopher-limbs	plugged/vim-go/assets/vim-go.svg	/^       osb:paint="solid">$/;"	d
gopher-limbs	plugged/vim-go/assets/vim-go.svg	/^       osb:paint="solid">$/;"	i
gopher-lines	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(2.0620253,3.9293227,1.3839016,-0.24027903,2506.9621,8572.3972)"/;"	d
gopher-lines	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(2.0620253,3.9293227,1.3839016,-0.24027903,2506.9621,8572.3972)"/;"	i
gopher-nose	plugged/vim-go/assets/vim-go.svg	/^       osb:paint="solid">$/;"	d
gopher-nose	plugged/vim-go/assets/vim-go.svg	/^       osb:paint="solid">$/;"	i
gopls version	plugged/vim-go/.github/ISSUE_TEMPLATE.md	/^#### gopls version$/;"	t	subsection:Configuration (**MUST** fill this out):
gotest#assert_buffer	plugged/vim-go/autoload/gotest.vim	/^fun! gotest#assert_buffer(skipHeader, want) abort$/;"	f
gotest#assert_fixture	plugged/vim-go/autoload/gotest.vim	/^fun! gotest#assert_fixture(path) abort$/;"	f
gotest#assert_quickfix	plugged/vim-go/autoload/gotest.vim	/^func! gotest#assert_quickfix(got, want) abort$/;"	f
gotest#load_fixture	plugged/vim-go/autoload/gotest.vim	/^fun! gotest#load_fixture(path) abort$/;"	f
gotest#write_file	plugged/vim-go/autoload/gotest.vim	/^fun! gotest#write_file(path, contents) abort$/;"	f
grey_color	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  fun <SID>grey_color(n)$/;"	f
grey_level	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  fun <SID>grey_level(n)$/;"	f
grey_number	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  fun <SID>grey_number(x)$/;"	f
grid4305	plugged/vim-go/assets/vim-go.svg	/^       originy="-274.01154" \/>$/;"	i
gutentags#add_job	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#add_job(module, tags_file, data) abort$/;"	f
gutentags#build_default_job_options	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#build_default_job_options(module) abort$/;"	f
gutentags#chdir	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#chdir(path)$/;"	f
gutentags#cscope#generate	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope#init	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#init(project_root) abort$/;"	f
gutentags#cscope#on_job_exit	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#ctags#generate	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#ctags#init	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#init(project_root) abort$/;"	f
gutentags#ctags#on_job_exit	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#on_job_exit(job, exit_val) abort$/;"	f
gutentags#default_get_project_root	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_get_project_root(path) abort$/;"	f
gutentags#default_stderr_cb	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stderr_cb(chan, msg) abort$/;"	f
gutentags#default_stdout_cb	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stdout_cb(chan, msg) abort$/;"	f
gutentags#error	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#error(message)$/;"	f
gutentags#fake	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#fake(...)$/;"	f
gutentags#find_job_index_by_data	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_data(module, data) abort$/;"	f
gutentags#find_job_index_by_tags_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_tags_file(module, tags_file) abort$/;"	f
gutentags#get_cachefile	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_cachefile(root_dir, filename) abort$/;"	f
gutentags#get_job_data	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_data(module, job_idx) abort$/;"	f
gutentags#get_job_tags_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_tags_file(module, job_idx) abort$/;"	f
gutentags#get_plat_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_plat_file(filename) abort$/;"	f
gutentags#get_project_file_list_cmd	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_file_list_cmd(path) abort$/;"	f
gutentags#get_project_info	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_info(path) abort$/;"	f
gutentags#get_project_root	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_root(path) abort$/;"	f
gutentags#get_res_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_res_file(filename) abort$/;"	f
gutentags#gtags_cscope#generate	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#gtags_cscope#init	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#init(project_root) abort$/;"	f
gutentags#gtags_cscope#on_job_exit	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#inprogress	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#inprogress()$/;"	f
gutentags#is_path_rooted	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#is_path_rooted(path) abort$/;"	f
gutentags#make_args	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#make_args(cmd) abort$/;"	f
gutentags#normalizepath	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#normalizepath(path)$/;"	f
gutentags#on_vim_leave_pre	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#on_vim_leave_pre() abort$/;"	f
gutentags#remove_job	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job(module, job_idx) abort$/;"	f
gutentags#remove_job_by_data	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job_by_data(module, data) abort$/;"	f
gutentags#rescan	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#rescan(...)$/;"	f
gutentags#setup_gutentags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#setup_gutentags() abort$/;"	f
gutentags#shellslash	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#shellslash(path)$/;"	f
gutentags#start_job	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#start_job(cmd, opts) abort$/;"	f
gutentags#statusline	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline(...) abort$/;"	f
gutentags#statusline_cb	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline_cb(fmt_cb, ...) abort$/;"	f
gutentags#stripslash	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#stripslash(path)$/;"	f
gutentags#throw	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throw(message)$/;"	f
gutentags#toggletrace	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#toggletrace(...)$/;"	f
gutentags#trace	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#trace(message, ...)$/;"	f
gutentags#validate_cmd	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#validate_cmd(cmd) abort$/;"	f
gutentags#warning	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#warning(message)$/;"	f
gutentags_detect	plugged/vim-gutentags/plugin/gutentags.vim	/^augroup gutentags_detect$/;"	a
hasPreviewAction	plugged/fzf/src/terminal.go	/^func hasPreviewAction(opts *Options) bool {$/;"	f	package:fzf	typeref:typename:bool
hasPreviewFlags	plugged/fzf/src/terminal.go	/^func hasPreviewFlags(template string) (slot bool, plus bool, query bool) {$/;"	f	package:fzf	typeref:typename:(slot bool, plus bool, query bool)
hasPreviewWindow	plugged/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewWindow() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
hasPreviewer	plugged/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewer() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
hasSelfClosingToken	plugged/vim-go/test/parse.go	/^	hasSelfClosingToken bool$/;"	m	struct:html.parser	typeref:typename:bool
head	plugged/vim-go/test/parse.go	/^	head, form *Node$/;"	m	struct:html.parser	typeref:typename:*Node
header	plugged/fzf/src/terminal.go	/^	header       []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
header0	plugged/fzf/src/terminal.go	/^	header0      []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
headerFirst	plugged/fzf/src/terminal.go	/^	headerFirst  bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
headerLines	plugged/fzf/src/options.go	/^	headerLines int$/;"	m	struct:fzf.previewOpts	typeref:typename:int
headerLines	plugged/fzf/src/terminal.go	/^	headerLines  int$/;"	m	struct:fzf.Terminal	typeref:typename:int
height	plugged/fzf/src/tui/light.go	/^	height        int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
height	plugged/fzf/src/tui/light.go	/^	height   int$/;"	m	struct:tui.LightWindow	typeref:typename:int
height	plugged/fzf/src/tui/tcell.go	/^	height      int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
help	plugged/fzf/bin/fzf-tmux	/^help() {$/;"	f
help	plugged/fzf/install	/^help() {$/;"	f
help	plugged/fzf/src/options.go	/^func help(code int) {$/;"	f	package:fzf
help	plugged/fzf/uninstall	/^help() {$/;"	f
helper	plugged/vim-go/autoload/go/test-fixtures/test/src/play/play_test.go	/^func helper(t *testing.T) {$/;"	f	package:play
hidden	plugged/fzf/src/options.go	/^	hidden      bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
highlight	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^    def highlight(self):$/;"	m	class:Source
history	plugged/fzf/src/terminal.go	/^	history      *History$/;"	m	struct:fzf.Terminal	typeref:typename:*History
horizontal	plugged/fzf/src/tui/tui.go	/^	horizontal  rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
hscroll	plugged/fzf/src/terminal.go	/^	hscroll      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
hscrollOff	plugged/fzf/src/terminal.go	/^	hscrollOff   int$/;"	m	struct:fzf.Terminal	typeref:typename:int
html	plugged/vim-go/test/parse.go	/^package html$/;"	p
i	plugged/vim-gitgutter/test/runner.vim	/^      let i += 1$/;"	v
i	plugged/vim-gitgutter/test/runner.vim	/^    let i = 0$/;"	v
iTerm2 Theme	plugged/vim-two-firewatch/README.md	/^## iTerm2 Theme$/;"	s	chapter:Vim-Two-Firewatch Colorscheme
ic	plugged/vim-gitgutter/autoload/gitgutter.vim	/^    omap <buffer> ic <Plug>(GitGutterTextObjectInnerPending)$/;"	m
ic	plugged/vim-gitgutter/autoload/gitgutter.vim	/^    xmap <buffer> ic <Plug>(GitGutterTextObjectInnerVisual)$/;"	m
ic	plugged/vim-go/ftplugin/go.vim	/^  onoremap <buffer> <silent> ic :<c-u>call go#textobj#Comment('i')<cr>$/;"	m
ic	plugged/vim-go/ftplugin/go.vim	/^  xnoremap <buffer> <silent> ic :<c-u>call go#textobj#Comment('i')<cr>$/;"	m
if	plugged/vim-go/ftplugin/go.vim	/^  onoremap <buffer> <silent> if :<c-u>call go#textobj#Function('i')<cr>$/;"	m
if	plugged/vim-go/ftplugin/go.vim	/^  xnoremap <buffer> <silent> if :<c-u>call go#textobj#Function('i')<cr>$/;"	m
ignore	plugged/fzf/src/util/eventbox.go	/^	ignore map[EventType]bool$/;"	m	struct:util.EventBox	typeref:typename:map[EventType]bool
im	plugged/vim-go/test/parse.go	/^	im insertionMode$/;"	m	struct:html.parser	typeref:typename:insertionMode
inBodyEndTagFormatting	plugged/vim-go/test/parse.go	/^func (p *parser) inBodyEndTagFormatting(tagAtom a.Atom) {$/;"	f	struct:html.parser
inBodyEndTagOther	plugged/vim-go/test/parse.go	/^func (p *parser) inBodyEndTagOther(tagAtom a.Atom) {$/;"	f	struct:html.parser
inBodyIM	plugged/vim-go/test/parse.go	/^func inBodyIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
inBytes	plugged/fzf/src/util/chars.go	/^	inBytes         bool$/;"	m	struct:util.Chars	typeref:typename:bool
inCaptionIM	plugged/vim-go/test/parse.go	/^func inCaptionIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
inCellIM	plugged/vim-go/test/parse.go	/^func inCellIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
inColumnGroupIM	plugged/vim-go/test/parse.go	/^func inColumnGroupIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
inForeignContent	plugged/vim-go/test/parse.go	/^func (p *parser) inForeignContent() bool {$/;"	f	struct:html.parser	typeref:typename:bool
inFramesetIM	plugged/vim-go/test/parse.go	/^func inFramesetIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
inHandle	plugged/fzf/src/tui/light.go	/^	inHandle        uintptr$/;"	m	struct:tui.LightRenderer	typeref:typename:uintptr
inHeadIM	plugged/vim-go/test/parse.go	/^func inHeadIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
inRowIM	plugged/vim-go/test/parse.go	/^func inRowIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
inSelectIM	plugged/vim-go/test/parse.go	/^func inSelectIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
inSelectInTableIM	plugged/vim-go/test/parse.go	/^func inSelectInTableIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
inTableBodyIM	plugged/vim-go/test/parse.go	/^func inTableBodyIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
inTableIM	plugged/vim-go/test/parse.go	/^func inTableIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
index	plugged/fzf/src/matcher.go	/^	index   int$/;"	m	struct:fzf.partialResult	typeref:typename:int
indexAt	plugged/fzf/src/algo/algo.go	/^func indexAt(index int, max int, forward bool) int {$/;"	f	package:algo	typeref:typename:int
indexOfElementInScope	plugged/vim-go/test/parse.go	/^func (p *parser) indexOfElementInScope(s scope, matchTags ...a.Atom) int {$/;"	f	struct:html.parser	typeref:typename:int
infoDefault	plugged/fzf/src/options.go	/^	infoDefault infoStyle = iota$/;"	c	package:fzf	typeref:type:infoStyle
infoHidden	plugged/fzf/src/options.go	/^	infoHidden$/;"	c	package:fzf
infoInline	plugged/fzf/src/options.go	/^	infoInline$/;"	c	package:fzf
infoStyle	plugged/fzf/src/options.go	/^type infoStyle int$/;"	t	package:fzf	typeref:typename:int
infoStyle	plugged/fzf/src/terminal.go	/^	infoStyle    infoStyle$/;"	m	struct:fzf.Terminal	typeref:typename:infoStyle
init	plugged/fzf/src/constants.go	/^func init() {$/;"	f	package:fzf
init	plugged/fzf/src/options.go	/^func init() {$/;"	f	package:fzf
init	plugged/fzf/src/pattern.go	/^func init() {$/;"	f	package:fzf
init	plugged/fzf/src/pattern_test.go	/^func init() {$/;"	f	package:fzf
init	plugged/fzf/src/terminal.go	/^func init() {$/;"	f	package:fzf
init	plugged/fzf/src/tui/tui.go	/^func init() {$/;"	f	package:tui
initDelay	plugged/fzf/src/terminal.go	/^	initDelay    time.Duration$/;"	m	struct:fzf.Terminal	typeref:typename:time.Duration
initFunc	plugged/fzf/src/terminal.go	/^	initFunc     func()$/;"	m	struct:fzf.Terminal	typeref:typename:func()
initPalette	plugged/fzf/src/tui/tui.go	/^func initPalette(theme *ColorTheme) {$/;"	f	package:tui
initPlatform	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) initPlatform() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
initPlatform	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) initPlatform() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
initScreen	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) initScreen() {$/;"	f	unknown:tui.FullscreenRenderer
initTheme	plugged/fzf/src/tui/tui.go	/^func initTheme(theme *ColorTheme, baseTheme *ColorTheme, forceBlack bool) {$/;"	f	package:tui
initialDelay	plugged/fzf/src/constants.go	/^	initialDelay      = 20 * time.Millisecond$/;"	c	package:fzf
initialDelayTac	plugged/fzf/src/constants.go	/^	initialDelayTac   = 100 * time.Millisecond$/;"	c	package:fzf
initialIM	plugged/vim-go/test/parse.go	/^func initialIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
initialize	plugged/fzf/test/test_go.rb	/^  def initialize(shell = :bash)$/;"	f	class:Tmux
inkscape	plugged/vim-go/assets/vim-go.svg	/^   inkscape:export-ydpi="46.84">$/;"	n	uri:http://www.inkscape.org/namespaces/inkscape
input	plugged/fzf/src/terminal.go	/^	input        []rune$/;"	m	struct:fzf.Terminal	typeref:typename:[]rune
insertionMode	plugged/vim-go/test/parse.go	/^type insertionMode func(*parser) bool$/;"	t	package:html	typeref:typename:func(*parser) bool
install	plugged/fzf/Makefile	/^install: bin\/fzf$/;"	t
install	plugged/vim-go/Makefile	/^install:$/;"	t
interpretCode	plugged/fzf/src/ansi.go	/^func interpretCode(ansiCode string, prevState *ansiState) ansiState {$/;"	f	package:fzf	typeref:typename:ansiState
inv	plugged/fzf/src/pattern.go	/^	inv           bool$/;"	m	struct:fzf.term	typeref:typename:bool
is24	plugged/fzf/src/tui/tui.go	/^func (c Color) is24() bool {$/;"	f	type:tui.Color	typeref:typename:bool
isAlphabet	plugged/fzf/src/options.go	/^func isAlphabet(char uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isAscii	plugged/fzf/src/algo/algo.go	/^func isAscii(runes []rune) bool {$/;"	f	package:algo	typeref:typename:bool
isCtrlSeqStart	plugged/fzf/src/ansi.go	/^func isCtrlSeqStart(c uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isExecuteAction	plugged/fzf/src/options.go	/^func isExecuteAction(str string) actionType {$/;"	f	package:fzf	typeref:typename:actionType
isNumeric	plugged/fzf/src/options.go	/^func isNumeric(char uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isPreviewEnabled	plugged/fzf/src/terminal.go	/^func (t *Terminal) isPreviewEnabled() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
isPrint	plugged/fzf/src/ansi.go	/^func isPrint(c uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
item	plugged/fzf/src/result.go	/^	item   *Item$/;"	m	struct:fzf.Result	typeref:typename:*Item
item	plugged/fzf/src/terminal.go	/^	item *Item$/;"	m	struct:fzf.selectedItem	typeref:typename:*Item
itemLine	plugged/fzf/src/terminal.go	/^type itemLine struct {$/;"	s	package:fzf
item_count	plugged/fzf/test/test_go.rb	/^          def item_count$/;"	f	method:Tmux.until
items	plugged/fzf/src/chunklist.go	/^	items [chunkSize]Item$/;"	m	struct:fzf.Chunk	typeref:typename:[chunkSize]Item
iter	plugged/fzf/src/pattern.go	/^func (p *Pattern) iter(pfun algo.Algo, tokens []Token, caseSensitive bool, normalize bool, forwa/;"	f	struct:fzf.Pattern	typeref:typename:(Offset, int, *[]int)
joinTokens	plugged/fzf/src/tokenizer.go	/^func joinTokens(tokens []Token) string {$/;"	f	package:fzf	typeref:typename:string
jumpAcceptEnabled	plugged/fzf/src/terminal.go	/^	jumpAcceptEnabled$/;"	c	package:fzf
jumpDisabled	plugged/fzf/src/terminal.go	/^	jumpDisabled jumpMode = iota$/;"	c	package:fzf	typeref:type:jumpMode
jumpEnabled	plugged/fzf/src/terminal.go	/^	jumpEnabled$/;"	c	package:fzf
jumpLabels	plugged/fzf/src/terminal.go	/^	jumpLabels   string$/;"	m	struct:fzf.Terminal	typeref:typename:string
jumpMode	plugged/fzf/src/terminal.go	/^type jumpMode int$/;"	t	package:fzf	typeref:typename:int
jumping	plugged/fzf/src/terminal.go	/^	jumping      jumpMode$/;"	m	struct:fzf.Terminal	typeref:typename:jumpMode
keepRight	plugged/fzf/src/terminal.go	/^	keepRight    bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
keyMatch	plugged/fzf/src/terminal.go	/^func keyMatch(key tui.Event, event tui.Event) bool {$/;"	f	package:fzf	typeref:typename:bool
keymap	plugged/fzf/src/terminal.go	/^	keymap       map[tui.Event][]action$/;"	m	struct:fzf.Terminal	typeref:typename:map[tui.Event][]action
kill	plugged/fzf/test/test_go.rb	/^  def kill$/;"	f	class:Tmux
killChan	plugged/fzf/src/terminal.go	/^	killChan     chan int$/;"	m	struct:fzf.Terminal	typeref:typename:chan int
killPreview	plugged/fzf/src/terminal.go	/^func (t *Terminal) killPreview(code int) {$/;"	f	struct:fzf.Terminal
killed	plugged/fzf/src/reader.go	/^	killed   bool$/;"	m	struct:fzf.Reader	typeref:typename:bool
label	plugged/fzf/src/terminal.go	/^	label    string$/;"	m	struct:fzf.itemLine	typeref:typename:string
lastChunk	plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) lastChunk() *Chunk {$/;"	f	struct:fzf.ChunkList	typeref:typename:*Chunk
lastX	plugged/fzf/src/tui/tcell.go	/^	lastX       int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
lastY	plugged/fzf/src/tui/tcell.go	/^	lastY       int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
layer1	plugged/vim-go/assets/vim-go.svg	/^     transform="translate(-15.732722,-256.54886)">$/;"	i
layer11	plugged/vim-go/assets/vim-go.svg	/^     transform="translate(-15.732722,-256.54886)">$/;"	i
layer12	plugged/vim-go/assets/vim-go.svg	/^     transform="translate(-15.732722,-256.54886)">$/;"	i
layer2	plugged/vim-go/assets/vim-go.svg	/^     transform="translate(-15.732722,-256.54886)">$/;"	i
layer3	plugged/vim-go/assets/vim-go.svg	/^     transform="translate(-15.732722,-256.54886)">$/;"	i
layer4	plugged/vim-go/assets/vim-go.svg	/^     transform="translate(-15.732722,-256.54886)">$/;"	i
layer5	plugged/vim-go/assets/vim-go.svg	/^     transform="translate(-15.732722,-256.54886)">$/;"	i
layer6	plugged/vim-go/assets/vim-go.svg	/^     transform="translate(-15.732722,-256.54886)">$/;"	i
layer7	plugged/vim-go/assets/vim-go.svg	/^     transform="translate(-15.732722,-256.54886)">$/;"	i
layer8	plugged/vim-go/assets/vim-go.svg	/^     transform="translate(-15.732722,-256.54886)">$/;"	i
layer9	plugged/vim-go/assets/vim-go.svg	/^     transform="translate(-15.732722,-256.54886)">$/;"	i
layout	plugged/fzf/src/terminal.go	/^	layout       layoutType$/;"	m	struct:fzf.Terminal	typeref:typename:layoutType
layoutDefault	plugged/fzf/src/options.go	/^	layoutDefault layoutType = iota$/;"	c	package:fzf	typeref:type:layoutType
layoutReverse	plugged/fzf/src/options.go	/^	layoutReverse$/;"	c	package:fzf
layoutReverseList	plugged/fzf/src/options.go	/^	layoutReverseList$/;"	c	package:fzf
layoutType	plugged/fzf/src/options.go	/^type layoutType int$/;"	t	package:fzf	typeref:typename:int
lbg	plugged/fzf/src/ansi.go	/^	lbg  tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
left	plugged/fzf/src/tui/light.go	/^	left     int$/;"	m	struct:tui.LightWindow	typeref:typename:int
left	plugged/fzf/src/tui/tcell.go	/^	left        int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
line	plugged/fzf/src/terminal.go	/^	line string$/;"	m	struct:fzf.eachLine	typeref:typename:string
linearGradient4168	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(0.92105265,0,0,0.92105265,79.548449,262.52483)" \/>$/;"	d
linearGradient4168	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(0.92105265,0,0,0.92105265,79.548449,262.52483)" \/>$/;"	i
linearGradient4180	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(0.92105266,0,0,0.92105266,124.54841,215.30684)" \/>$/;"	d
linearGradient4180	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(0.92105266,0,0,0.92105266,124.54841,215.30684)" \/>$/;"	i
linearGradient4182	plugged/vim-go/assets/vim-go.svg	/^       id="linearGradient4182">$/;"	d
linearGradient4182	plugged/vim-go/assets/vim-go.svg	/^       id="linearGradient4182">$/;"	i
linearGradient4253	plugged/vim-go/assets/vim-go.svg	/^       id="linearGradient4253">$/;"	d
linearGradient4253	plugged/vim-go/assets/vim-go.svg	/^       id="linearGradient4253">$/;"	i
linearGradient4265	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(0.65610141,0,0,0.65610141,185.97779,480.81383)" \/>$/;"	d
linearGradient4265	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(0.65610141,0,0,0.65610141,185.97779,480.81383)" \/>$/;"	i
linearGradient4271	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(0.90381797,-0.29515654,-0.62039307,-0.90381797,-597.71307,820.3/;"	d
linearGradient4271	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(0.90381797,-0.29515654,-0.62039307,-0.90381797,-597.71307,820.3/;"	i
linearGradient4273	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(-0.54351115,-0.65417141,-1.0770811,0.54351115,655.01412,667.672/;"	d
linearGradient4273	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(-0.54351115,-0.65417141,-1.0770811,0.54351115,655.01412,667.672/;"	i
linearGradient4275	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(-0.94401471,-0.3302474,-0.32955964,0.94401471,1151.0861,721.505/;"	d
linearGradient4275	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(-0.94401471,-0.3302474,-0.32955964,0.94401471,1151.0861,721.505/;"	i
linearGradient4279	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(0.89463991,0.4064691,0.49110603,-0.89463991,-749.6705,579.40921/;"	d
linearGradient4279	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(0.89463991,0.4064691,0.49110603,-0.89463991,-749.6705,579.40921/;"	i
linearGradient4281	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(0.49170605,0.377674,2.0076181,-0.49170605,229.12024,357.65841)"/;"	d
linearGradient4281	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(0.49170605,0.377674,2.0076181,-0.49170605,229.12024,357.65841)"/;"	i
linearGradient4319	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(-1,0,0,1,744.54563,401.01143)" \/>$/;"	d
linearGradient4319	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(-1,0,0,1,744.54563,401.01143)" \/>$/;"	i
linearGradient4321	plugged/vim-go/assets/vim-go.svg	/^       gradientUnits="userSpaceOnUse" \/>$/;"	d
linearGradient4321	plugged/vim-go/assets/vim-go.svg	/^       gradientUnits="userSpaceOnUse" \/>$/;"	i
linearGradient4336	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(-1,0,0,1,-681.83098,347.55492)" \/>$/;"	d
linearGradient4336	plugged/vim-go/assets/vim-go.svg	/^       gradientTransform="matrix(-1,0,0,1,-681.83098,347.55492)" \/>$/;"	i
lines	plugged/fzf/src/history.go	/^	lines    []string$/;"	m	struct:fzf.History	typeref:typename:[]string
lines	plugged/fzf/src/terminal.go	/^	lines      []string$/;"	m	struct:fzf.previewer	typeref:typename:[]string
lines	plugged/fzf/src/terminal.go	/^	lines   []string$/;"	m	struct:fzf.previewResult	typeref:typename:[]string
link_fzf_in_path	plugged/fzf/install	/^link_fzf_in_path() {$/;"	f
lint	plugged/vim-go/Makefile	/^lint:$/;"	t
lint	plugged/vim-go/autoload/go/test-fixtures/lint/src/lint/baz.go	/^package lint$/;"	p
lint	plugged/vim-go/autoload/go/test-fixtures/lint/src/lint/lint.go	/^package lint$/;"	p
lint	plugged/vim-go/autoload/go/test-fixtures/lint/src/lint/quux.go	/^package lint$/;"	p
list	plugged/fzf/src/terminal.go	/^	list     []*Item$/;"	m	struct:fzf.previewRequest	typeref:typename:[]*Item
listItemScope	plugged/vim-go/test/parse.go	/^	listItemScope$/;"	c	package:html
lists	plugged/fzf/src/merger.go	/^	lists   [][]Result$/;"	m	struct:fzf.Merger	typeref:typename:[][]Result
logging	plugged/vim-go/autoload/go/test-fixtures/fmt/src/imports/goimports_golden.go	/^	logging "gh.com\/gi\/foo-logging"$/;"	P	package:gh.com/gi/foo-logging
logging	plugged/vim-go/autoload/go/test-fixtures/fmt/src/imports/vendor/gh.com/gi/foo-logging/logger.go	/^package logging$/;"	p
main	plugged/fzf/main.go	/^func main() {$/;"	f	package:main
main	plugged/fzf/main.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/cmd/bad.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/cmd/bad.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/debug/compilerror/main.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/debug/compilerror/main.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/debug/debugmain/debugmain.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/debug/debugmain/debugmain.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/def/jump.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/def/jump.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/fmt/hello.go	/^  func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/fmt/hello.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/fmt/hello_golden.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/fmt/hello_golden.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/fmt/src/imports/goimports.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/fmt/src/imports/goimports.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/fmt/src/imports/goimports_golden.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/fmt/src/imports/goimports_golden.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/job/dir has spaces/main.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/job/dir has spaces/main.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/lint/src/errcheck/compilererror/compilererror.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/lint/src/errcheck/compilererror/compilererror.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/lint/src/vet/compilererror/compilererror.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/lint/src/vet/compilererror/compilererror.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/lint/src/vet/vet.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/lint/src/vet/vet.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/lsp/fmt/format.go	/^  func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/lsp/fmt/format.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/lsp/fmt/format_golden.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/lsp/fmt/format_golden.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/lsp/fmt/newline.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/lsp/fmt/newline.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/lsp/imports/imports.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/lsp/imports/imports.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/lsp/imports/imports_golden.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/lsp/imports/imports_golden.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/package/src/package/package.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/package/src/package/package.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_golden_options.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/tags/add_all_input.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_golden.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/tags/remove_all_input.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/term/term.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/term/term.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/test/src/compilerror/compilerror.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/test/src/compilerror/compilerror.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/test/src/example/example_test.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/test/src/showname/showname_test.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/test/src/testcompilerror/testcompilerror_test.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/test/src/timeout/timeout_test.go	/^package main$/;"	p
main	plugged/vim-go/autoload/go/test-fixtures/test/src/veterror/veterror.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/autoload/go/test-fixtures/test/src/veterror/veterror.go	/^package main$/;"	p
main	plugged/vim-go/templates/hello_world.go	/^func main() {$/;"	f	package:main
main	plugged/vim-go/templates/hello_world.go	/^package main$/;"	p
main	plugged/vim-go/templates/hello_world_test.go	/^package main$/;"	p
makeSpace	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) makeSpace() {$/;"	f	struct:tui.LightRenderer
makeSpinner	plugged/fzf/src/terminal.go	/^func makeSpinner(unicode bool) []string {$/;"	f	package:fzf	typeref:typename:[]string
make_candidates	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^        def make_candidates(row):$/;"	f	member:Source.gather_candidates	file:
mapleader	init.vim	/^let mapleader = "ñ"$/;"	v
margin	plugged/fzf/src/terminal.go	/^	margin       [4]sizeSpec$/;"	m	struct:fzf.Terminal	typeref:typename:[4]sizeSpec
marker	plugged/fzf/src/terminal.go	/^	marker       string$/;"	m	struct:fzf.Terminal	typeref:typename:string
markerEmpty	plugged/fzf/src/terminal.go	/^	markerEmpty  string$/;"	m	struct:fzf.Terminal	typeref:typename:string
markerLen	plugged/fzf/src/terminal.go	/^	markerLen    int$/;"	m	struct:fzf.Terminal	typeref:typename:int
match	plugged/fzf/src/terminal_test.go	/^	match  string \/\/ output is matched against this regex (when output is empty string)$/;"	m	struct:fzf.want	typeref:typename:string
matchChunk	plugged/fzf/src/pattern.go	/^func (p *Pattern) matchChunk(chunk *Chunk, space []Result, slab *util.Slab) []Result {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Result
matchControlSequence	plugged/fzf/src/ansi.go	/^func matchControlSequence(s string) int {$/;"	f	package:fzf	typeref:typename:int
matchOperatingSystemCommand	plugged/fzf/src/ansi.go	/^func matchOperatingSystemCommand(s string) int {$/;"	f	package:fzf	typeref:typename:int
match_count	plugged/fzf/test/test_go.rb	/^          def match_count$/;"	f	method:Tmux.until
matches	plugged/fzf/src/matcher.go	/^	matches []Result$/;"	m	struct:fzf.partialResult	typeref:typename:[]Result
maxHeightFunc	plugged/fzf/src/tui/light.go	/^	maxHeightFunc func(int) int$/;"	m	struct:tui.LightRenderer	typeref:typename:func(int) int
maxInputBuffer	plugged/fzf/src/tui/light.go	/^	maxInputBuffer  = 10 * 1024$/;"	c	package:tui
maxItems	plugged/fzf/src/terminal.go	/^func (t *Terminal) maxItems() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
maxMulti	plugged/fzf/src/constants.go	/^	maxMulti          = math.MaxInt32$/;"	c	package:fzf
maxPartitions	plugged/fzf/src/constants.go	/^	maxPartitions           = 32$/;"	c	package:fzf
maxPatternLength	plugged/fzf/src/constants.go	/^	maxPatternLength  = 300$/;"	c	package:fzf
maxSize	plugged/fzf/src/history.go	/^	maxSize  int$/;"	m	struct:fzf.History	typeref:typename:int
merge	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) merge(other ColorPair, except Color) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
merged	plugged/fzf/src/merger.go	/^	merged  []Result$/;"	m	struct:fzf.Merger	typeref:typename:[]Result
mergedGet	plugged/fzf/src/merger.go	/^func (mg *Merger) mergedGet(idx int) Result {$/;"	f	struct:fzf.Merger	typeref:typename:Result
merger	plugged/fzf/src/terminal.go	/^	merger       *Merger$/;"	m	struct:fzf.Terminal	typeref:typename:*Merger
mergerCache	plugged/fzf/src/matcher.go	/^	mergerCache    map[string]*Merger$/;"	m	struct:fzf.Matcher	typeref:typename:map[string]*Merger
mergerCacheMax	plugged/fzf/src/constants.go	/^	mergerCacheMax int = 100000$/;"	c	package:fzf	typeref:typename:int
metadata7	plugged/vim-go/assets/vim-go.svg	/^     id="metadata7">$/;"	i
minHeight	plugged/fzf/src/terminal.go	/^	minHeight = 4$/;"	c	package:fzf
minItem	plugged/fzf/src/item.go	/^var minItem = Item{text: util.Chars{Index: -1}}$/;"	v	package:fzf
minRank	plugged/fzf/src/result.go	/^func minRank() Result {$/;"	f	package:fzf	typeref:typename:Result
minWidth	plugged/fzf/src/terminal.go	/^	minWidth  = 4$/;"	c	package:fzf
mock	plugged/vim-go/autoload/go/test-fixtures/test/src/play/mock/controller.go	/^package mock$/;"	p
modified	plugged/fzf/src/history.go	/^	modified map[int]string$/;"	m	struct:fzf.History	typeref:typename:map[int]string
mouse	plugged/fzf/src/tui/light.go	/^	mouse         bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
mouse	plugged/fzf/src/tui/tui.go	/^	mouse        bool$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:bool
mouseSequence	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) mouseSequence(sz *int) Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
move	plugged/fzf/src/terminal.go	/^func (t *Terminal) move(y int, x int, clear bool) {$/;"	f	struct:fzf.Terminal
move	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) move(y int, x int) {$/;"	f	struct:tui.LightRenderer
moveCursor	plugged/fzf/src/tui/tcell.go	/^	moveCursor  bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
multi	plugged/fzf/src/terminal.go	/^	multi        int$/;"	m	struct:fzf.Terminal	typeref:typename:int
mutex	plugged/fzf/src/cache.go	/^	mutex sync.Mutex$/;"	m	struct:fzf.ChunkCache	typeref:typename:sync.Mutex
mutex	plugged/fzf/src/chunklist.go	/^	mutex  sync.Mutex$/;"	m	struct:fzf.ChunkList	typeref:typename:sync.Mutex
mutex	plugged/fzf/src/reader.go	/^	mutex    sync.Mutex$/;"	m	struct:fzf.Reader	typeref:typename:sync.Mutex
mutex	plugged/fzf/src/terminal.go	/^	mutex        sync.Mutex$/;"	m	struct:fzf.Terminal	typeref:typename:sync.Mutex
mySleep	plugged/vim-go/autoload/go/test-fixtures/lint/src/lint/golangci-lint/problems/multiple/problems.go	/^func mySleep(time int) {$/;"	f	package:problems
mySleep	plugged/vim-go/autoload/go/test-fixtures/lint/src/lint/golangci-lint/problems/shadow/problems.go	/^func mySleep(time int) {$/;"	f	package:problems
name	plugged/vim-go/addon-info.json	/^  "name": "vim-go",$/;"	s
neovimfiles	README.md	/^# neovimfiles$/;"	c
newItem	plugged/fzf/src/terminal_test.go	/^func newItem(str string) *Item {$/;"	f	package:fzf	typeref:typename:*Item
newItems	plugged/fzf/src/terminal_test.go	/^func newItems(str ...string) []*Item {$/;"	f	package:fzf	typeref:typename:[]*Item
newRange	plugged/fzf/src/tokenizer.go	/^func newRange(begin int, end int) Range {$/;"	f	package:fzf	typeref:typename:Range
new_shell	plugged/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestBash
new_shell	plugged/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestFish
new_shell	plugged/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestZsh
next	plugged/fzf/src/history.go	/^func (h *History) next() string {$/;"	f	struct:fzf.History	typeref:typename:string
nextAnsiEscapeSequence	plugged/fzf/src/ansi.go	/^func nextAnsiEscapeSequence(s string) (int, int) {$/;"	f	package:fzf	typeref:typename:(int, int)
nextInt	plugged/fzf/src/options.go	/^func nextInt(args []string, i *int, message string) int {$/;"	f	package:fzf	typeref:typename:int
nextString	plugged/fzf/src/options.go	/^func nextString(args []string, i *int, message string) string {$/;"	f	package:fzf	typeref:typename:string
noInfoLine	plugged/fzf/src/terminal.go	/^func (t *Terminal) noInfoLine() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
normal	plugged/fzf/src/tui/tcell.go	/^	normal      ColorPair$/;"	m	struct:tui.TcellWindow	typeref:typename:ColorPair
normalize	plugged/fzf/src/pattern.go	/^	normalize     bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
normalize	plugged/fzf/src/pattern.go	/^	normalize     bool$/;"	m	struct:fzf.term	typeref:typename:bool
normalizeRune	plugged/fzf/src/algo/algo.go	/^func normalizeRune(r rune) rune {$/;"	f	package:algo	typeref:typename:rune
normalized	plugged/fzf/src/algo/normalize.go	/^var normalized map[rune]rune = map[rune]rune{$/;"	v	package:algo	typeref:typename:map[rune]rune
notifyOnCont	plugged/fzf/src/terminal_unix.go	/^func notifyOnCont(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnCont	plugged/fzf/src/terminal_windows.go	/^func notifyOnCont(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnResize	plugged/fzf/src/terminal_unix.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnResize	plugged/fzf/src/terminal_windows.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyStop	plugged/fzf/src/terminal_unix.go	/^func notifyStop(p *os.Process) {$/;"	f	package:fzf
notifyStop	plugged/fzf/src/terminal_windows.go	/^func notifyStop(p *os.Process) {$/;"	f	package:fzf
ns5ab9b4690101	plugged/vim-go/assets/vim-go.svg	/^   inkscape:export-ydpi="46.84">$/;"	n	uri:http://www.w3.org/2000/svg
nth	plugged/fzf/src/pattern.go	/^	nth           []Range$/;"	m	struct:fzf.Pattern	typeref:typename:[]Range
numLines	plugged/fzf/src/terminal.go	/^	numLines int$/;"	m	struct:fzf.previewed	typeref:typename:int
numPartitionsMultiplier	plugged/fzf/src/constants.go	/^	numPartitionsMultiplier = 8$/;"	c	package:fzf
number	plugged/fzf/src/terminal.go	/^	number        bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
o	autoload/plug.vim	/^    nnoremap <silent> <buffer> o    :silent! call <SID>preview_commit()<cr>$/;"	m
oe	plugged/vim-go/test/parse.go	/^	oe, afe nodeStack$/;"	m	struct:html.parser	typeref:typename:nodeStack
offset	plugged/fzf/src/ansi.go	/^	offset [2]int32$/;"	m	struct:fzf.ansiOffset	typeref:typename:[2]int32
offset	plugged/fzf/src/result.go	/^	offset [2]int32$/;"	m	struct:fzf.colorOffset	typeref:typename:[2]int32
offset	plugged/fzf/src/terminal.go	/^	offset       int$/;"	m	struct:fzf.Terminal	typeref:typename:int
offset	plugged/fzf/src/terminal.go	/^	offset     int$/;"	m	struct:fzf.previewer	typeref:typename:int
offset	plugged/fzf/src/terminal.go	/^	offset   int$/;"	m	struct:fzf.previewed	typeref:typename:int
offset	plugged/fzf/src/terminal.go	/^	offset  int$/;"	m	struct:fzf.previewResult	typeref:typename:int
offsetComponentRegex	plugged/fzf/src/terminal.go	/^var offsetComponentRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
offsetPollTries	plugged/fzf/src/tui/light.go	/^	offsetPollTries = 10$/;"	c	package:tui
offsetRegexp	plugged/fzf/src/tui/light.go	/^var offsetRegexp *regexp.Regexp = regexp.MustCompile("(.*)\\x1b\\\\[([0-9]+);([0-9]+)R")$/;"	v	package:tui	typeref:typename:*regexp.Regexp
offsetRegexpBegin	plugged/fzf/src/tui/light.go	/^var offsetRegexpBegin *regexp.Regexp = regexp.MustCompile("^\\x1b\\\\[[0-9]+;[0-9]+R")$/;"	v	package:tui	typeref:typename:*regexp.Regexp
offsetTrimCharsRegex	plugged/fzf/src/terminal.go	/^var offsetTrimCharsRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
openTtyIn	plugged/fzf/src/tui/light_unix.go	/^func openTtyIn() *os.File {$/;"	f	package:tui	typeref:typename:*os.File
openTtyIn	plugged/fzf/src/tui/light_windows.go	/^func openTtyIn() *os.File {$/;"	f	package:tui	typeref:typename:*os.File
optString	plugged/fzf/src/options.go	/^func optString(arg string, prefixes ...string) (bool, string) {$/;"	f	package:fzf	typeref:typename:(bool, string)
optionalNextString	plugged/fzf/src/options.go	/^func optionalNextString(args []string, i *int) (bool, string) {$/;"	f	package:fzf	typeref:typename:(bool, string)
optionalNumeric	plugged/fzf/src/options.go	/^func optionalNumeric(args []string, i *int, defaultValue int) int {$/;"	f	package:fzf	typeref:typename:int
optionalRunes	plugged/fzf/src/util/chars.go	/^func (chars *Chars) optionalRunes() []rune {$/;"	f	struct:util.Chars	typeref:typename:[]rune
opts.sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! opts.sink(lines)$/;"	f
opts.sinklist	plugged/fzf/plugin/fzf.vim	/^    function! opts.sinklist(lines) abort$/;"	f
optsFor	plugged/fzf/src/options_test.go	/^func optsFor(words ...string) *Options {$/;"	f	package:fzf	typeref:typename:*Options
origState	plugged/fzf/src/tui/light.go	/^	origState     *term.State$/;"	m	struct:tui.LightRenderer	typeref:typename:*term.State
origStateInput	plugged/fzf/src/tui/light.go	/^	origStateInput  uint32$/;"	m	struct:tui.LightRenderer	typeref:typename:uint32
origStateOutput	plugged/fzf/src/tui/light.go	/^	origStateOutput uint32$/;"	m	struct:tui.LightRenderer	typeref:typename:uint32
origText	plugged/fzf/src/item.go	/^	origText    *[]byte       \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]byte
origin	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) origin() {$/;"	f	struct:tui.LightRenderer
originalIM	plugged/vim-go/test/parse.go	/^	originalIM insertionMode$/;"	m	struct:html.parser	typeref:typename:insertionMode
osb	plugged/vim-go/assets/vim-go.svg	/^   inkscape:export-ydpi="46.84">$/;"	n	uri:http://www.openswatchbook.org/uri/2009/osb
outHandle	plugged/fzf/src/tui/light.go	/^	outHandle       uintptr$/;"	m	struct:tui.LightRenderer	typeref:typename:uintptr
output	plugged/fzf/src/terminal.go	/^func (t *Terminal) output() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
output	plugged/fzf/src/terminal_test.go	/^	output string \/\/ literal output$/;"	m	struct:fzf.want	typeref:typename:string
overflow	plugged/fzf/src/terminal.go	/^func (t *Terminal) overflow(runes []rune, max int) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
overflow32	plugged/fzf/src/util/chars.go	/^	overflow32 uint32 = 0x80808080$/;"	c	package:util	typeref:typename:uint32
overflow64	plugged/fzf/src/util/chars.go	/^	overflow64 uint64 = 0x8080808080808080$/;"	c	package:util	typeref:typename:uint64
override	plugged/fzf/src/history.go	/^func (h *History) override(str string) {$/;"	f	struct:fzf.History
padding	plugged/fzf/src/terminal.go	/^	padding      [4]sizeSpec$/;"	m	struct:fzf.Terminal	typeref:typename:[4]sizeSpec
parse	plugged/vim-go/test/parse.go	/^func (p *parser) parse() error {$/;"	f	struct:html.parser	typeref:typename:error
parseAlgo	plugged/fzf/src/options.go	/^func parseAlgo(str string) algo.Algo {$/;"	f	package:fzf	typeref:typename:algo.Algo
parseAnsiCode	plugged/fzf/src/ansi.go	/^func parseAnsiCode(s string) (int, string) {$/;"	f	package:fzf	typeref:typename:(int, string)
parseBorder	plugged/fzf/src/options.go	/^func parseBorder(str string, optional bool) tui.BorderShape {$/;"	f	package:fzf	typeref:typename:tui.BorderShape
parseCurrentToken	plugged/vim-go/test/parse.go	/^func (p *parser) parseCurrentToken() {$/;"	f	struct:html.parser
parseForeignContent	plugged/vim-go/test/parse.go	/^func parseForeignContent(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
parseHeight	plugged/fzf/src/options.go	/^func parseHeight(str string) sizeSpec {$/;"	f	package:fzf	typeref:typename:sizeSpec
parseImpliedToken	plugged/vim-go/test/parse.go	/^func (p *parser) parseImpliedToken(t TokenType, dataAtom a.Atom, data string) {$/;"	f	struct:html.parser
parseInfoStyle	plugged/fzf/src/options.go	/^func parseInfoStyle(str string) infoStyle {$/;"	f	package:fzf	typeref:typename:infoStyle
parseKeyChords	plugged/fzf/src/options.go	/^func parseKeyChords(str string, message string) map[tui.Event]string {$/;"	f	package:fzf	typeref:typename:map[tui.Event]string
parseKeymap	plugged/fzf/src/options.go	/^func parseKeymap(keymap map[tui.Event][]action, str string) {$/;"	f	package:fzf
parseLayout	plugged/fzf/src/options.go	/^func parseLayout(str string) layoutType {$/;"	f	package:fzf	typeref:typename:layoutType
parseMargin	plugged/fzf/src/options.go	/^func parseMargin(opt string, margin string) [4]sizeSpec {$/;"	f	package:fzf	typeref:typename:[4]sizeSpec
parseOptions	plugged/fzf/src/options.go	/^func parseOptions(opts *Options, allArgs []string) {$/;"	f	package:fzf
parsePlaceholder	plugged/fzf/src/terminal.go	/^func parsePlaceholder(match string) (bool, string, placeholderFlags) {$/;"	f	package:fzf	typeref:typename:(bool, string, placeholderFlags)
parsePreviewWindow	plugged/fzf/src/options.go	/^func parsePreviewWindow(opts *previewOpts, input string) {$/;"	f	package:fzf
parsePrompt	plugged/fzf/src/terminal.go	/^func (t *Terminal) parsePrompt(prompt string) (func(), int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(func(), int)
parseSize	plugged/fzf/src/options.go	/^func parseSize(str string, maxPercent float64, label string) sizeSpec {$/;"	f	package:fzf	typeref:typename:sizeSpec
parseTerms	plugged/fzf/src/pattern.go	/^func parseTerms(fuzzy bool, caseMode Case, normalize bool, str string) []termSet {$/;"	f	package:fzf	typeref:typename:[]termSet
parseTheme	plugged/fzf/src/options.go	/^func parseTheme(defaultTheme *tui.ColorTheme, str string) *tui.ColorTheme {$/;"	f	package:fzf	typeref:typename:*tui.ColorTheme
parseTiebreak	plugged/fzf/src/options.go	/^func parseTiebreak(str string) []criterion {$/;"	f	package:fzf	typeref:typename:[]criterion
parseToggleSort	plugged/fzf/src/options.go	/^func parseToggleSort(keymap map[tui.Event][]action, str string) {$/;"	f	package:fzf
parser	plugged/vim-go/test/parse.go	/^type parser struct {$/;"	s	package:html
partialResult	plugged/fzf/src/matcher.go	/^type partialResult struct {$/;"	s	package:fzf
partitions	plugged/fzf/src/matcher.go	/^	partitions     int$/;"	m	struct:fzf.Matcher	typeref:typename:int
paste	plugged/fzf/test/test_go.rb	/^  def paste(str)$/;"	f	class:Tmux
path	plugged/fzf/src/history.go	/^	path     string$/;"	m	struct:fzf.History	typeref:typename:string
path4188	plugged/vim-go/assets/vim-go.svg	/^         sodipodi:nodetypes="sssssssssss" \/>$/;"	i
path4248	plugged/vim-go/assets/vim-go.svg	/^       style="display:inline;fill:#019833;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-wi/;"	i
path4265	plugged/vim-go/assets/vim-go.svg	/^       sodipodi:nodetypes="ccscsc" \/>$/;"	i
path4267	plugged/vim-go/assets/vim-go.svg	/^       sodipodi:nodetypes="sssssssccssssssss" \/>$/;"	i
path4271	plugged/vim-go/assets/vim-go.svg	/^       sodipodi:nodetypes="sssssssscssssssssssscsccsscscssssssscsssscscsssscccccccc" \/>$/;"	i
path4275	plugged/vim-go/assets/vim-go.svg	/^       sodipodi:nodetypes="ccsssccc" \/>$/;"	i
path4280	plugged/vim-go/assets/vim-go.svg	/^       sodipodi:nodetypes="cssscsssscccc" \/>$/;"	i
path4321	plugged/vim-go/assets/vim-go.svg	/^       sodipodi:nodetypes="sssscsscs" \/>$/;"	i
path4324	plugged/vim-go/assets/vim-go.svg	/^           d="m 202.34975,1029.0537 -56.02157,-157.11507 -17.82505,-3.05571 0.25466,-14.0054 89./;"	i
path4340	plugged/vim-go/assets/vim-go.svg	/^       sodipodi:nodetypes="csssssscccsssc" \/>$/;"	i
path4349	plugged/vim-go/assets/vim-go.svg	/^       sodipodi:nodetypes="csssssssc" \/>$/;"	i
path4365-1	plugged/vim-go/assets/vim-go.svg	/^         sodipodi:nodetypes="cssscsssc" \/>$/;"	i
path4365-1-2	plugged/vim-go/assets/vim-go.svg	/^         sodipodi:nodetypes="cssscsssc" \/>$/;"	i
path4367-9	plugged/vim-go/assets/vim-go.svg	/^         sodipodi:nodetypes="sssssssss" \/>$/;"	i
path4367-9-2	plugged/vim-go/assets/vim-go.svg	/^         sodipodi:nodetypes="sssssssss" \/>$/;"	i
path4369	plugged/vim-go/assets/vim-go.svg	/^         transform="matrix(13.851095,0,0,13.851095,10133.213,-6001.611)" \/>$/;"	i
path4398	plugged/vim-go/assets/vim-go.svg	/^         sodipodi:nodetypes="sssssssssssssssss" \/>$/;"	i
path4406	plugged/vim-go/assets/vim-go.svg	/^         style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visib/;"	i
path4408	plugged/vim-go/assets/vim-go.svg	/^         transform="matrix(13.851095,0,0,13.851095,10133.213,-6001.611)" \/>$/;"	i
path4521	plugged/vim-go/assets/vim-go.svg	/^         style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visib/;"	i
path4539	plugged/vim-go/assets/vim-go.svg	/^         sodipodi:nodetypes="cssssssssssssssssc" \/>$/;"	i
path4541	plugged/vim-go/assets/vim-go.svg	/^         sodipodi:nodetypes="csscsscssssssssssssssssssssccsssc" \/>$/;"	i
path4544	plugged/vim-go/assets/vim-go.svg	/^       transform="scale(-1,1)" \/>$/;"	i
path4588	plugged/vim-go/assets/vim-go.svg	/^         style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visib/;"	i
path4636	plugged/vim-go/assets/vim-go.svg	/^         style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visib/;"	i
path4638	plugged/vim-go/assets/vim-go.svg	/^         style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visib/;"	i
path4642	plugged/vim-go/assets/vim-go.svg	/^         sodipodi:nodetypes="sssssssssssssssss" \/>$/;"	i
path4644	plugged/vim-go/assets/vim-go.svg	/^         sodipodi:nodetypes="sssssssssssssssss" \/>$/;"	i
path4648	plugged/vim-go/assets/vim-go.svg	/^       sodipodi:nodetypes="sssssssssssssssss" \/>$/;"	i
path4812	plugged/vim-go/assets/vim-go.svg	/^         style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visib/;"	i
path4824	plugged/vim-go/assets/vim-go.svg	/^         sodipodi:nodetypes="sssssssssssssssss" \/>$/;"	i
path4826	plugged/vim-go/assets/vim-go.svg	/^         sodipodi:nodetypes="sssssssssssssssss" \/>$/;"	i
path4828	plugged/vim-go/assets/vim-go.svg	/^         r="30.809652" \/>$/;"	i
path4828-0	plugged/vim-go/assets/vim-go.svg	/^         transform="matrix(0.98640333,0.16434257,-0.16434257,0.98640333,0,0)" \/>$/;"	i
pattern	plugged/fzf/src/matcher.go	/^	pattern    *Pattern$/;"	m	struct:fzf.MatchRequest	typeref:typename:*Pattern
pattern	plugged/fzf/src/merger.go	/^	pattern *Pattern$/;"	m	struct:fzf.Merger	typeref:typename:*Pattern
patternBuilder	plugged/fzf/src/matcher.go	/^	patternBuilder func([]rune) *Pattern$/;"	m	struct:fzf.Matcher	typeref:typename:func([]rune) *Pattern
paused	plugged/fzf/src/terminal.go	/^	paused       bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
pborder	plugged/fzf/src/terminal.go	/^	pborder      tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
percent	plugged/fzf/src/options.go	/^	percent bool$/;"	m	struct:fzf.sizeSpec	typeref:typename:bool
placeCursor	plugged/fzf/src/terminal.go	/^func (t *Terminal) placeCursor() {$/;"	f	struct:fzf.Terminal
placeholder	plugged/fzf/src/terminal.go	/^var placeholder *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
placeholderFlags	plugged/fzf/src/terminal.go	/^type placeholderFlags struct {$/;"	s	package:fzf
play	plugged/vim-go/autoload/go/test-fixtures/test/src/play/play_test.go	/^package play$/;"	p
plug#	autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	autoload/plug.vim	/^function! plug#load(...)$/;"	f
plus	plugged/fzf/src/terminal.go	/^	plus          bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
pointer	plugged/fzf/src/terminal.go	/^	pointer      string$/;"	m	struct:fzf.Terminal	typeref:typename:string
pointerEmpty	plugged/fzf/src/terminal.go	/^	pointerEmpty string$/;"	m	struct:fzf.Terminal	typeref:typename:string
pointerLen	plugged/fzf/src/terminal.go	/^	pointerLen   int$/;"	m	struct:fzf.Terminal	typeref:typename:int
points	plugged/fzf/src/result.go	/^	points [4]uint16$/;"	m	struct:fzf.Result	typeref:typename:[4]uint16
popUntil	plugged/vim-go/test/parse.go	/^func (p *parser) popUntil(s scope, matchTags ...a.Atom) bool {$/;"	f	struct:html.parser	typeref:typename:bool
posArray	plugged/fzf/src/algo/algo.go	/^func posArray(withPos bool, len int) *[]int {$/;"	f	package:algo	typeref:typename:*[]int
posDown	plugged/fzf/src/options.go	/^	posDown$/;"	c	package:fzf
posLeft	plugged/fzf/src/options.go	/^	posLeft$/;"	c	package:fzf
posRight	plugged/fzf/src/options.go	/^	posRight$/;"	c	package:fzf
posUp	plugged/fzf/src/options.go	/^	posUp windowPosition = iota$/;"	c	package:fzf	typeref:type:windowPosition
position	plugged/fzf/src/options.go	/^	position    windowPosition$/;"	m	struct:fzf.previewOpts	typeref:typename:windowPosition
postProcessOptions	plugged/fzf/src/options.go	/^func postProcessOptions(opts *Options) {$/;"	f	package:fzf
posx	plugged/fzf/src/tui/light.go	/^	posx     int$/;"	m	struct:tui.LightWindow	typeref:typename:int
posy	plugged/fzf/src/tui/light.go	/^	posy     int$/;"	m	struct:tui.LightWindow	typeref:typename:int
prefixLength	plugged/fzf/src/tokenizer.go	/^	prefixLength int32$/;"	m	struct:fzf.Token	typeref:typename:int32
prepare	plugged/fzf/test/test_go.rb	/^  def prepare$/;"	f	class:Tmux
preserveSpace	plugged/fzf/src/terminal.go	/^	preserveSpace bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
pressed	plugged/fzf/src/terminal.go	/^	pressed      string$/;"	m	struct:fzf.Terminal	typeref:typename:string
prevDownTime	plugged/fzf/src/tui/light.go	/^	prevDownTime  time.Time$/;"	m	struct:tui.LightRenderer	typeref:typename:time.Time
prevDownTime	plugged/fzf/src/tui/tui.go	/^	prevDownTime time.Time$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:time.Time
prevLines	plugged/fzf/src/terminal.go	/^	prevLines    []itemLine$/;"	m	struct:fzf.Terminal	typeref:typename:[]itemLine
preview	plugged/fzf/src/tui/light.go	/^	preview  bool$/;"	m	struct:tui.LightWindow	typeref:typename:bool
preview	plugged/fzf/src/tui/tcell.go	/^	preview     bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
previewBox	plugged/fzf/src/terminal.go	/^	previewBox   *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
previewCancelWait	plugged/fzf/src/constants.go	/^	previewCancelWait = 500 * time.Millisecond$/;"	c	package:fzf
previewChunkDelay	plugged/fzf/src/constants.go	/^	previewChunkDelay = 100 * time.Millisecond$/;"	c	package:fzf
previewDelayed	plugged/fzf/src/constants.go	/^	previewDelayed    = 500 * time.Millisecond$/;"	c	package:fzf
previewOpts	plugged/fzf/src/options.go	/^type previewOpts struct {$/;"	s	package:fzf
previewOpts	plugged/fzf/src/terminal.go	/^	previewOpts  previewOpts$/;"	m	struct:fzf.Terminal	typeref:typename:previewOpts
previewRequest	plugged/fzf/src/terminal.go	/^type previewRequest struct {$/;"	s	package:fzf
previewResult	plugged/fzf/src/terminal.go	/^type previewResult struct {$/;"	s	package:fzf
previewed	plugged/fzf/src/terminal.go	/^	previewed    previewed$/;"	m	struct:fzf.Terminal	typeref:typename:previewed
previewed	plugged/fzf/src/terminal.go	/^type previewed struct {$/;"	s	package:fzf
previewer	plugged/fzf/src/terminal.go	/^	previewer    previewer$/;"	m	struct:fzf.Terminal	typeref:typename:previewer
previewer	plugged/fzf/src/terminal.go	/^type previewer struct {$/;"	s	package:fzf
previous	plugged/fzf/src/history.go	/^func (h *History) previous() string {$/;"	f	struct:fzf.History	typeref:typename:string
printAll	plugged/fzf/src/terminal.go	/^func (t *Terminal) printAll() {$/;"	f	struct:fzf.Terminal
printHeader	plugged/fzf/src/terminal.go	/^func (t *Terminal) printHeader() {$/;"	f	struct:fzf.Terminal
printHighlighted	plugged/fzf/src/terminal.go	/^func (t *Terminal) printHighlighted(result Result, colBase tui.ColorPair, colMatch tui.ColorPair/;"	f	struct:fzf.Terminal	typeref:typename:int
printInfo	plugged/fzf/src/terminal.go	/^func (t *Terminal) printInfo() {$/;"	f	struct:fzf.Terminal
printItem	plugged/fzf/src/terminal.go	/^func (t *Terminal) printItem(result Result, line int, i int, current bool) {$/;"	f	struct:fzf.Terminal
printList	plugged/fzf/src/terminal.go	/^func (t *Terminal) printList() {$/;"	f	struct:fzf.Terminal
printPreview	plugged/fzf/src/terminal.go	/^func (t *Terminal) printPreview() {$/;"	f	struct:fzf.Terminal
printPreviewDelayed	plugged/fzf/src/terminal.go	/^func (t *Terminal) printPreviewDelayed() {$/;"	f	struct:fzf.Terminal
printPrompt	plugged/fzf/src/terminal.go	/^func (t *Terminal) printPrompt() {$/;"	f	struct:fzf.Terminal
printQuery	plugged/fzf/src/terminal.go	/^	printQuery   bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
printString	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) printString(text string, pair ColorPair) {$/;"	f	struct:tui.TcellWindow
printer	plugged/fzf/src/terminal.go	/^	printer      func(string)$/;"	m	struct:fzf.Terminal	typeref:typename:func(string)
printsep	plugged/fzf/src/terminal.go	/^	printsep     string$/;"	m	struct:fzf.Terminal	typeref:typename:string
problems	plugged/vim-go/autoload/go/test-fixtures/lint/src/lint/golangci-lint/problems/importabs/ok.go	/^package problems$/;"	p
problems	plugged/vim-go/autoload/go/test-fixtures/lint/src/lint/golangci-lint/problems/importabs/problems.go	/^package problems$/;"	p
problems	plugged/vim-go/autoload/go/test-fixtures/lint/src/lint/golangci-lint/problems/multiple/problems.go	/^package problems$/;"	p
problems	plugged/vim-go/autoload/go/test-fixtures/lint/src/lint/golangci-lint/problems/shadow/problems.go	/^package problems$/;"	p
procFun	plugged/fzf/src/pattern.go	/^	procFun       map[termType]algo.Algo$/;"	m	struct:fzf.Pattern	typeref:typename:map[termType]algo.Algo
processTabs	plugged/fzf/src/terminal.go	/^func (t *Terminal) processTabs(runes []rune, prefixWidth int) (string, int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(string, int)
progress	plugged/fzf/src/terminal.go	/^	progress     int$/;"	m	struct:fzf.Terminal	typeref:typename:int
progressMinDuration	plugged/fzf/src/constants.go	/^	progressMinDuration     = 200 * time.Millisecond$/;"	c	package:fzf
prompt	plugged/fzf/src/terminal.go	/^	prompt       func()$/;"	m	struct:fzf.Terminal	typeref:typename:func()
promptLen	plugged/fzf/src/terminal.go	/^	promptLen    int$/;"	m	struct:fzf.Terminal	typeref:typename:int
promptLine	plugged/fzf/src/terminal.go	/^func (t *Terminal) promptLine() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
protector	plugged/fzf/src/protector/protector.go	/^package protector$/;"	p
protector	plugged/fzf/src/protector/protector_openbsd.go	/^package protector$/;"	p
push	plugged/fzf/src/chunklist.go	/^func (c *Chunk) push(trans ItemBuilder, data []byte) bool {$/;"	f	struct:fzf.Chunk	typeref:typename:bool
pusher	plugged/fzf/src/reader.go	/^	pusher   func([]byte) bool$/;"	m	struct:fzf.Reader	typeref:typename:func([]byte) bool
pwindow	plugged/fzf/src/terminal.go	/^	pwindow      tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
pwindow	plugged/fzf/src/terminal.go	/^	pwindow  tui.Window$/;"	m	struct:fzf.previewRequest	typeref:typename:tui.Window
q	autoload/plug.vim	/^  nnoremap <silent> <buffer> q  :if b:plug_preview==1<bar>pc<bar>endif<bar>bd<cr>$/;"	m
q	autoload/plug.vim	/^  nnoremap <silent> <buffer> q :q<cr>$/;"	m
q	plugged/vim-fugitive/autoload/fugitive.vim	/^        nnoremap <buffer> <silent> q    :<C-U>echoerr "fugitive: q is removed in favor of gq (or/;"	m
q	plugged/vim-fugitive/autoload/fugitive.vim	/^      nnoremap <buffer> <silent> q :<C-U>echoerr "fugitive: q is removed in favor of gq (or :q)"/;"	m
q	plugged/vim-fugitive/autoload/fugitive.vim	/^    nnoremap <buffer> <silent> q :<C-U>echoerr "fugitive: q removed in favor of gq (or :q)"<CR>$/;"	m
q	plugged/vim-go/autoload/go/debug.vim	/^    nmap <buffer> q <Plug>(go-debug-stop)$/;"	m
q	plugged/vim-go/autoload/go/def.vim	/^  noremap <buffer> <silent> q     :<C-U>call go#ui#CloseWindow()<CR>$/;"	m
q	plugged/vim-go/autoload/go/doc.vim	/^      noremap <buffer> <silent> q :<C-U>close<CR>$/;"	m
query	plugged/fzf/src/terminal.go	/^	query         bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
query	plugged/fzf/src/terminal_test.go	/^	query    string$/;"	m	struct:fzf.give	typeref:typename:string
queryCache	plugged/fzf/src/cache.go	/^type queryCache map[string][]Result$/;"	t	package:fzf	typeref:typename:map[string][]Result
queryCacheMax	plugged/fzf/src/constants.go	/^	queryCacheMax int = chunkSize \/ 5$/;"	c	package:fzf	typeref:typename:int
queryLen	plugged/fzf/src/terminal.go	/^	queryLen     [2]int$/;"	m	struct:fzf.Terminal	typeref:typename:[2]int
queryLen	plugged/fzf/src/terminal.go	/^	queryLen int$/;"	m	struct:fzf.itemLine	typeref:typename:int
queued	plugged/fzf/src/tui/light.go	/^	queued        strings.Builder$/;"	m	struct:tui.LightRenderer	typeref:typename:strings.Builder
quirks	plugged/vim-go/test/parse.go	/^	quirks bool$/;"	m	struct:html.parser	typeref:typename:bool
quoteEntry	plugged/fzf/src/terminal_unix.go	/^func quoteEntry(entry string) string {$/;"	f	package:fzf	typeref:typename:string
quoteEntry	plugged/fzf/src/terminal_windows.go	/^func quoteEntry(entry string) string {$/;"	f	package:fzf	typeref:typename:string
randResult	plugged/fzf/src/merger_test.go	/^func randResult() Result {$/;"	f	package:fzf	typeref:typename:Result
rangeEllipsis	plugged/fzf/src/tokenizer.go	/^const rangeEllipsis = 0$/;"	c	package:fzf
rdf	plugged/vim-go/assets/vim-go.svg	/^   inkscape:export-ydpi="46.84">$/;"	n	uri:http://www.w3.org/1999/02/22-rdf-syntax-ns#
readFile	plugged/fzf/src/terminal_test.go	/^func readFile(path string) ([]byte, error) {$/;"	f	package:fzf	typeref:typename:([]byte, error)
readFiles	plugged/fzf/src/reader.go	/^func (r *Reader) readFiles() bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readFromCommand	plugged/fzf/src/reader.go	/^func (r *Reader) readFromCommand(shell *string, command string) bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readFromStdin	plugged/fzf/src/reader.go	/^func (r *Reader) readFromStdin() bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readerBufferSize	plugged/fzf/src/constants.go	/^	readerBufferSize       = 64 * 1024$/;"	c	package:fzf
readerPollIntervalMax	plugged/fzf/src/constants.go	/^	readerPollIntervalMax  = 50 * time.Millisecond$/;"	c	package:fzf
readerPollIntervalMin	plugged/fzf/src/constants.go	/^	readerPollIntervalMin  = 10 * time.Millisecond$/;"	c	package:fzf
readerPollIntervalStep	plugged/fzf/src/constants.go	/^	readerPollIntervalStep = 5 * time.Millisecond$/;"	c	package:fzf
reading	plugged/fzf/src/terminal.go	/^	reading      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
readonce	plugged/fzf/test/test_go.rb	/^  def readonce$/;"	f	class:TestBase
reconstructActiveFormattingElements	plugged/vim-go/test/parse.go	/^func (p *parser) reconstructActiveFormattingElements() {$/;"	f	struct:html.parser
rect4162	plugged/vim-go/assets/vim-go.svg	/^       y="21.967466" \/>$/;"	i
rect4170	plugged/vim-go/assets/vim-go.svg	/^       style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible/;"	i
rect4208	plugged/vim-go/assets/vim-go.svg	/^       y="86.967468" \/>$/;"	i
rect4223	plugged/vim-go/assets/vim-go.svg	/^       transform="scale(1,-1)" \/>$/;"	i
rect4227	plugged/vim-go/assets/vim-go.svg	/^       y="131.96747" \/>$/;"	i
rect4231	plugged/vim-go/assets/vim-go.svg	/^       style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible/;"	i
rect4233	plugged/vim-go/assets/vim-go.svg	/^       y="131.96747" \/>$/;"	i
rect4248	plugged/vim-go/assets/vim-go.svg	/^       style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible/;"	i
rect4263	plugged/vim-go/assets/vim-go.svg	/^       y="-127.75694" \/>$/;"	i
rect4267	plugged/vim-go/assets/vim-go.svg	/^       y="176.96747" \/>$/;"	i
rect4280	plugged/vim-go/assets/vim-go.svg	/^       transform="scale(1,-1)" \/>$/;"	i
rect4283	plugged/vim-go/assets/vim-go.svg	/^         style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visib/;"	i
rect4284	plugged/vim-go/assets/vim-go.svg	/^       y="286.96747" \/>$/;"	i
rect4293	plugged/vim-go/assets/vim-go.svg	/^         transform="matrix(0.70710678,0.70710678,-0.70710678,0.70710678,0,0)" \/>$/;"	i
rect4297	plugged/vim-go/assets/vim-go.svg	/^       style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible/;"	i
rect4301	plugged/vim-go/assets/vim-go.svg	/^       y="241.96747" \/>$/;"	i
rect4303	plugged/vim-go/assets/vim-go.svg	/^       y="331.96747" \/>$/;"	i
rect4347	plugged/vim-go/assets/vim-go.svg	/^       inkscape:export-ydpi="46.84" \/>$/;"	i
rect4659	plugged/vim-go/assets/vim-go.svg	/^       sodipodi:nodetypes="scssscssscssscsss" \/>$/;"	i
rect4661	plugged/vim-go/assets/vim-go.svg	/^       sodipodi:nodetypes="scssscssscssscsss" \/>$/;"	i
redraw	plugged/fzf/src/terminal.go	/^func (t *Terminal) redraw() {$/;"	f	struct:fzf.Terminal
refresh	plugged/fzf/src/terminal.go	/^func (t *Terminal) refresh() {$/;"	f	struct:fzf.Terminal
regex	plugged/fzf/src/tokenizer.go	/^	regex *regexp.Regexp$/;"	m	struct:fzf.Delimiter	typeref:typename:*regexp.Regexp
release	plugged/fzf/Makefile	/^release:$/;"	t
remove	plugged/fzf/uninstall	/^remove() {$/;"	f
remove_line	plugged/fzf/uninstall	/^remove_line() {$/;"	f
renderPreviewArea	plugged/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewArea(unchanged bool) {$/;"	f	struct:fzf.Terminal
renderPreviewSpinner	plugged/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewSpinner() {$/;"	f	struct:fzf.Terminal
renderPreviewText	plugged/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewText(height int, lines []string, lineNo int, unchanged bool) {$/;"	f	struct:fzf.Terminal
renderer	plugged/fzf/src/tui/light.go	/^	renderer *LightRenderer$/;"	m	struct:tui.LightWindow	typeref:typename:*LightRenderer
repeat	plugged/fzf/src/tui/light.go	/^func repeat(r rune, times int) string {$/;"	f	package:tui	typeref:typename:string
replacePlaceholder	plugged/fzf/src/terminal.go	/^func (t *Terminal) replacePlaceholder(template string, forcePlus bool, input string, list []*Ite/;"	f	struct:fzf.Terminal	typeref:typename:string
replacePlaceholder	plugged/fzf/src/terminal.go	/^func replacePlaceholder(template string, stripAnsi bool, delimiter Delimiter, printsep string, f/;"	f	package:fzf	typeref:typename:string
repository	plugged/vim-go/addon-info.json	/^  "repository" : {"type": "git", "url": "https:\/\/github.com\/fatih\/vim-go.git"}$/;"	o
reqBox	plugged/fzf/src/matcher.go	/^	reqBox         *util.EventBox$/;"	m	struct:fzf.Matcher	typeref:typename:*util.EventBox
reqBox	plugged/fzf/src/terminal.go	/^	reqBox       *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
reqClose	plugged/fzf/src/terminal.go	/^	reqClose$/;"	c	package:fzf
reqHeader	plugged/fzf/src/terminal.go	/^	reqHeader$/;"	c	package:fzf
reqInfo	plugged/fzf/src/terminal.go	/^	reqInfo$/;"	c	package:fzf
reqJump	plugged/fzf/src/terminal.go	/^	reqJump$/;"	c	package:fzf
reqList	plugged/fzf/src/terminal.go	/^	reqList$/;"	c	package:fzf
reqPreviewDelayed	plugged/fzf/src/terminal.go	/^	reqPreviewDelayed$/;"	c	package:fzf
reqPreviewDisplay	plugged/fzf/src/terminal.go	/^	reqPreviewDisplay$/;"	c	package:fzf
reqPreviewEnqueue	plugged/fzf/src/terminal.go	/^	reqPreviewEnqueue$/;"	c	package:fzf
reqPreviewRefresh	plugged/fzf/src/terminal.go	/^	reqPreviewRefresh$/;"	c	package:fzf
reqPrintQuery	plugged/fzf/src/terminal.go	/^	reqPrintQuery$/;"	c	package:fzf
reqPrompt	plugged/fzf/src/terminal.go	/^	reqPrompt util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
reqQuit	plugged/fzf/src/terminal.go	/^	reqQuit$/;"	c	package:fzf
reqRedraw	plugged/fzf/src/terminal.go	/^	reqRedraw$/;"	c	package:fzf
reqRefresh	plugged/fzf/src/terminal.go	/^	reqRefresh$/;"	c	package:fzf
reqReinit	plugged/fzf/src/terminal.go	/^	reqReinit$/;"	c	package:fzf
reqReset	plugged/fzf/src/matcher.go	/^	reqReset$/;"	c	package:fzf
reqRetry	plugged/fzf/src/matcher.go	/^	reqRetry util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
resetInsertionMode	plugged/vim-go/test/parse.go	/^func (p *parser) resetInsertionMode() {$/;"	f	struct:html.parser
resizeWindows	plugged/fzf/src/terminal.go	/^func (t *Terminal) resizeWindows() {$/;"	f	struct:fzf.Terminal
restart	plugged/fzf/src/reader.go	/^func (r *Reader) restart(command string) {$/;"	f	struct:fzf.Reader
restoreTerminal	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) restoreTerminal() {$/;"	f	unknown:tui.LightRenderer
restoreTerminal	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) restoreTerminal() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
result	plugged/fzf/src/terminal.go	/^	result   Result$/;"	m	struct:fzf.itemLine	typeref:typename:Result
reverseStringArray	plugged/fzf/src/terminal.go	/^func reverseStringArray(input []string) []string {$/;"	f	package:fzf	typeref:typename:[]string
revision	plugged/fzf/main.go	/^var revision string = "devel"$/;"	v	package:main	typeref:typename:string
rgb	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  fun <SID>rgb(rgb)$/;"	f
rgb_color	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  fun <SID>rgb_color(x, y, z)$/;"	f
rgb_level	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  fun <SID>rgb_level(n)$/;"	f
rgb_number	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^  fun <SID>rgb_number(x)$/;"	f
rmcup	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) rmcup() {$/;"	f	struct:tui.LightRenderer
rubout	plugged/fzf/src/terminal.go	/^func (t *Terminal) rubout(pattern string) {$/;"	f	struct:fzf.Terminal
running	plugged/fzf/src/terminal.go	/^	running      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
s:AddHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AddHeader(key, value) abort$/;"	f
s:AddLogSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AddLogSection(label, a, b) abort$/;"	f
s:AddSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AddSection(label, lines, ...) abort$/;"	f
s:ArgSplit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ArgSplit(string) abort$/;"	f
s:AskPassArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AskPassArgs(dir) abort$/;"	f
s:BlameBufnr	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameBufnr(...) abort$/;"	f
s:BlameCommit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameCommit(cmd, ...) abort$/;"	f
s:BlameCommitFileLnum	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameCommitFileLnum(...) abort$/;"	f
s:BlameJump	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameJump(suffix, ...) abort$/;"	f
s:BlameLeave	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameLeave() abort$/;"	f
s:BlameMaps	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameMaps(is_ftplugin) abort$/;"	f
s:BlameQuit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameQuit() abort$/;"	f
s:BlameRehighlight	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameRehighlight() abort$/;"	f
s:BlameSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameSubcommand(line1, count, range, bang, mods, options) abort$/;"	f
s:BlobTemp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlobTemp(url) abort$/;"	f
s:BlurStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlurStatus() abort$/;"	f
s:BranchCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BranchCfile(result) abort$/;"	f
s:BrowserOpen	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BrowserOpen(url, mods, echo_copy) abort$/;"	f
s:BufName	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BufName(var) abort$/;"	f
s:BuildEnvPrefix	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BuildEnvPrefix(env) abort$/;"	f
s:BuildShell	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BuildShell(dir, env, git, args) abort$/;"	f
s:CeilingDirectories	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:CeilingDirectories() abort$/;"	f
s:CfilePorcelain	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CfilePorcelain(...) abort$/;"	f
s:CheckBinaries	plugged/vim-go/plugin/go.vim	/^function! s:CheckBinaries()$/;"	f
s:ChompDefault	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ChompDefault(default, ...) abort$/;"	f
s:ChompStderr	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ChompStderr(...) abort$/;"	f
s:Class	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Class = 7$/;"	v
s:Color	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Color = 16$/;"	v
s:CommitInteractive	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CommitInteractive(line1, line2, range, bang, mods, options, patch) abort$/;"	f
s:CommitSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CommitSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:CompletableSubcommands	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompletableSubcommands(dir) abort$/;"	f
s:CompleteHeads	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteHeads(dir) abort$/;"	f
s:CompletePush	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompletePush(A, L, P, ...) abort$/;"	f
s:CompleteRemote	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteRemote(A, L, P, ...) abort$/;"	f
s:CompleteRevision	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteRevision(A, L, P, ...) abort$/;"	f
s:CompleteSub	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteSub(subcommand, A, L, P, ...) abort$/;"	f
s:ConfigCallback	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ConfigCallback(r, into) abort$/;"	f
s:ConfigLengthSort	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ConfigLengthSort(i1, i2) abort$/;"	f
s:ConfigTimestamps	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ConfigTimestamps(dir, dict) abort$/;"	f
s:Constant	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Constant = 21$/;"	v
s:Constructor	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Constructor = 4$/;"	v
s:ContainingCommit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ContainingCommit() abort$/;"	f
s:CurlResponse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CurlResponse(result) abort$/;"	f
s:CygwinPath	plugged/vim-go/autoload/go/path.vim	/^function! s:CygwinPath(path)$/;"	f
s:DiffModifier	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DiffModifier(count, default) abort$/;"	f
s:DifftoolSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DifftoolSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:Dir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Dir(...) abort$/;"	f
s:DirCheck	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirCheck(...) abort$/;"	f
s:DirCommitFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirCommitFile(path) abort$/;"	f
s:DirRev	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirRev(url) abort$/;"	f
s:DirUrlPrefix	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirUrlPrefix(...) abort$/;"	f
s:Do	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Do(action, visual) abort$/;"	f
s:DoAutocmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoAutocmd(...) abort$/;"	f
s:DoAutocmdChanged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoAutocmdChanged(dir) abort$/;"	f
s:DoStagePushHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStagePushHeader(value) abort$/;"	f
s:DoStageUnpushed	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushed(record) abort$/;"	f
s:DoStageUnpushedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushedHeading(heading) abort$/;"	f
s:DoStageUnstaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstaged(record) abort$/;"	f
s:DoStageUnstagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstagedHeading(heading) abort$/;"	f
s:DoStageUntracked	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUntracked(record) abort$/;"	f
s:DoStageUntrackedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUntrackedHeading(heading) abort$/;"	f
s:DoToggleHeadHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleHeadHeader(value) abort$/;"	f
s:DoToggleHelpHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleHelpHeader(value) abort$/;"	f
s:DoTogglePushHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoTogglePushHeader(value) abort$/;"	f
s:DoToggleStaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleStaged(record) abort$/;"	f
s:DoToggleStagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleStagedHeading(...) abort$/;"	f
s:DoToggleUnpulled	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulled(record) abort$/;"	f
s:DoToggleUnpulledHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulledHeading(heading) abort$/;"	f
s:DoToggleUnpushed	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushed(record) abort$/;"	f
s:DoToggleUnpushedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushedHeading(heading) abort$/;"	f
s:DoToggleUnstaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstaged(record) abort$/;"	f
s:DoToggleUnstagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstagedHeading(...) abort$/;"	f
s:DoToggleUntracked	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntracked(record) abort$/;"	f
s:DoToggleUntrackedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntrackedHeading(...) abort$/;"	f
s:DoUnstageStaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStaged(record) abort$/;"	f
s:DoUnstageStagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStagedHeading(heading) abort$/;"	f
s:DoUnstageUnpulled	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulled(record) abort$/;"	f
s:DoUnstageUnpulledHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulledHeading(heading) abort$/;"	f
s:DoUnstageUnpushed	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpushed(record) abort$/;"	f
s:DoUnstageUnstaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnstaged(record) abort$/;"	f
s:DotRelative	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DotRelative(path, ...) abort$/;"	f
s:Enum	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Enum = 13$/;"	v
s:EnumMember	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:EnumMember = 20$/;"	v
s:Error	plugged/vim-go/autoload/go/import.vim	/^function! s:Error(s) abort$/;"	f
s:Event	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Event = 23$/;"	v
s:ExecPath	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExecPath() abort$/;"	f
s:Expand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Expand(rev, ...) abort$/;"	f
s:ExpandSnippet	plugged/vim-go/autoload/go/auto.vim	/^function! s:ExpandSnippet() abort$/;"	f
s:ExpandVar	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpandVar(other, var, flags, esc, ...) abort$/;"	f
s:ExpandVarLegacy	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpandVarLegacy(str) abort$/;"	f
s:ExpireStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpireStatus(bufnr) abort$/;"	f
s:FetchSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FetchSubcommand(...) abort$/;"	f
s:Field	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Field = 5$/;"	v
s:File	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:File = 17$/;"	v
s:FileIgnoreCase	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FileIgnoreCase(for_completion) abort$/;"	f
s:FilterEscape	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FilterEscape(items, ...) abort$/;"	f
s:Folder	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Folder = 19$/;"	v
s:Format	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Format(val) abort$/;"	f
s:FormatFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatFile(dict) abort$/;"	f
s:FormatLog	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatLog(dict) abort$/;"	f
s:FormatRebase	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatRebase(dict) abort$/;"	f
s:Function	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Function = 3$/;"	v
s:GF	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GF(mode) abort$/;"	f
s:Generate	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Generate(object, ...) abort$/;"	f
s:GitCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GitCmd() abort$/;"	f
s:GitDir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GitDir(...) abort$/;"	f
s:GitShellCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GitShellCmd() abort$/;"	f
s:GlobComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GlobComplete(lead, pattern, ...) abort$/;"	f
s:GoInstallBinaries	plugged/vim-go/plugin/go.vim	/^function! s:GoInstallBinaries(updateBinaries, ...)$/;"	f
s:GoMinisnip	plugged/vim-go/ftplugin/go/snippets.vim	/^function! s:GoMinisnip() abort$/;"	f
s:GoNeosnippet	plugged/vim-go/ftplugin/go/snippets.vim	/^function! s:GoNeosnippet() abort$/;"	f
s:GoUltiSnips	plugged/vim-go/ftplugin/go/snippets.vim	/^function! s:GoUltiSnips() abort$/;"	f
s:GodocView	plugged/vim-go/autoload/go/doc.vim	/^function! s:GodocView(newposition, position, content) abort$/;"	f
s:GrepCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepCfile(result) abort$/;"	f
s:GrepOptions	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepOptions(args, dir) abort$/;"	f
s:GrepParseLine	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepParseLine(options, quiet, dir, line) abort$/;"	f
s:GrepSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:HasOpt	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:HasOpt(args, ...) abort$/;"	f
s:HasPath	plugged/vim-go/autoload/go/path.vim	/^function! s:HasPath(path) abort$/;"	f
s:IAError	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:IAError = [s:nord0_gui, s:nord11_gui, s:nord1_term, s:nord11_term]$/;"	v
s:IAMain	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:IAMain = [s:nord5_gui, s:nord3_gui, s:nord5_term, s:nord3_term]$/;"	v
s:IAMiddle	plugged/nord-vim/autoload/airline/themes/nord.vim	/^  let s:IAMiddle = [s:nord5_gui, s:nord1_gui, s:nord5_term, s:nord1_term]$/;"	v
s:IAMiddle	plugged/nord-vim/autoload/airline/themes/nord.vim	/^  let s:IAMiddle = [s:nord5_gui, s:nord3_gui, s:nord5_term, s:nord3_term]$/;"	v
s:IARight	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:IARight = [s:nord5_gui, s:nord3_gui, s:nord5_term, s:nord3_term]$/;"	v
s:IAWarn	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:IAWarn = [s:nord1_gui, s:nord13_gui, s:nord3_term, s:nord13_term]$/;"	v
s:IError	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:IError = [s:nord0_gui, s:nord11_gui, s:nord1_term, s:nord11_term]$/;"	v
s:IMain	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:IMain = [s:nord1_gui, s:nord14_gui, s:nord1_term, s:nord6_term]$/;"	v
s:IMiddle	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:IMiddle = [s:nord5_gui, s:nord3_gui, s:nord5_term, s:nord3_term]$/;"	v
s:IRight	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:IRight = [s:nord1_gui, s:nord9_gui, s:nord1_term, s:nord9_term]$/;"	v
s:IWarn	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:IWarn = [s:nord1_gui, s:nord13_gui, s:nord3_term, s:nord13_term]$/;"	v
s:Interface	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Interface = 8$/;"	v
s:IsConflicted	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:IsConflicted() abort$/;"	f
s:JobExecute	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JobExecute(argv, jopts, stdin, callback, ...) abort$/;"	f
s:JobNvimCallback	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JobNvimCallback(lines, job, data, type) abort$/;"	f
s:JobNvimExit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JobNvimExit(dict, callback, job, data, type) dict abort$/;"	f
s:JobOpts	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JobOpts(cmd, env) abort$/;"	f
s:JobVimExit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JobVimExit(dict, callback, temp, job, status) abort$/;"	f
s:JoinChomp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JoinChomp(list) abort$/;"	f
s:Keyword	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Keyword = 14$/;"	v
s:Keywordprg	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Keywordprg() abort$/;"	f
s:LinesError	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LinesError(...) abort$/;"	f
s:LogFlushQueue	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LogFlushQueue(state, dir) abort$/;"	f
s:LogParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LogParse(state, dir, prefix, line) abort$/;"	f
s:Map	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Map(mode, lhs, rhs, ...) abort$/;"	f
s:Map	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Map(mode, lhs, rhs, flags) abort$/;"	f
s:MapMotion	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MapMotion(lhs, rhs) abort$/;"	f
s:MergeHead	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergeHead(dir) abort$/;"	f
s:MergeSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergeSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:MergetoolSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergetoolSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:Method	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Method = 2$/;"	v
s:Mods	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Mods(mods, ...) abort$/;"	f
s:Module	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Module = 9$/;"	v
s:Move	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Move(force, rename, destination) abort$/;"	f
s:NError	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:NError = [s:nord0_gui, s:nord11_gui, s:nord1_term, s:nord11_term]$/;"	v
s:NMain	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:NMain = [s:nord1_gui, s:nord8_gui, s:nord1_term, s:nord8_term]$/;"	v
s:NMiddle	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:NMiddle = [s:nord5_gui, s:nord3_gui, s:nord5_term, s:nord3_term]$/;"	v
s:NRight	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:NRight = [s:nord1_gui, s:nord9_gui, s:nord1_term, s:nord9_term]$/;"	v
s:NWarn	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:NWarn = [s:nord1_gui, s:nord13_gui, s:nord3_term, s:nord13_term]$/;"	v
s:NavigateUp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NavigateUp(count) abort$/;"	f
s:NextExpandedHunk	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextExpandedHunk(count) abort$/;"	f
s:NextFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextFile(count) abort$/;"	f
s:NextHunk	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextHunk(count) abort$/;"	f
s:NextItem	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextItem(count) abort$/;"	f
s:NextSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextSection(count) abort$/;"	f
s:NextSectionEnd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextSectionEnd(count) abort$/;"	f
s:NullError	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NullError(cmd) abort$/;"	f
s:OpenParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:OpenParse(string, wants_cmd) abort$/;"	f
s:Operator	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Operator = 24$/;"	v
s:Owner	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Owner(path, ...) abort$/;"	f
s:PatchSearchExpr	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PatchSearchExpr(reverse) abort$/;"	f
s:PathInfo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PathInfo(url) abort$/;"	f
s:PrepareEnv	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PrepareEnv(env, dir) abort$/;"	f
s:PrepareJob	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PrepareJob(opts) abort$/;"	f
s:PreparePathArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreparePathArgs(cmd, dir, literal, explicit) abort$/;"	f
s:PreviousFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousFile(count) abort$/;"	f
s:PreviousHunk	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousHunk(count) abort$/;"	f
s:PreviousItem	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousItem(count) abort$/;"	f
s:PreviousSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousSection(count) abort$/;"	f
s:PreviousSectionEnd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousSectionEnd(count) abort$/;"	f
s:ProjectionistDetect	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:ProjectionistDetect() abort$/;"	f
s:Property	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Property = 10$/;"	v
s:PushSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PushSubcommand(...) abort$/;"	f
s:QueryLog	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QueryLog(refspec, limit) abort$/;"	f
s:QuickfixCreate	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixCreate(nr, opts) abort$/;"	f
s:QuickfixGet	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixGet(nr, ...) abort$/;"	f
s:QuickfixOpen	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixOpen(nr, mods) abort$/;"	f
s:QuickfixSet	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixSet(nr, ...) abort$/;"	f
s:QuickfixStream	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixStream(nr, event, title, cmd, first, mods, callback, ...) abort$/;"	f
s:RError	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:RError = [s:nord0_gui, s:nord11_gui, s:nord1_term, s:nord11_term]$/;"	v
s:RMain	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:RMain = [s:nord1_gui, s:nord14_gui, s:nord1_term, s:nord14_term]$/;"	v
s:RMiddle	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:RMiddle = [s:nord5_gui, s:nord3_gui, s:nord5_term, s:nord3_term]$/;"	v
s:RRight	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:RRight = [s:nord1_gui, s:nord9_gui, s:nord1_term, s:nord9_term]$/;"	v
s:RWarn	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:RWarn = [s:nord1_gui, s:nord13_gui, s:nord3_term, s:nord13_term]$/;"	v
s:ReadPrepare	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReadPrepare(line1, count, range, mods) abort$/;"	f
s:RebaseArgument	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseArgument() abort$/;"	f
s:RebaseSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:Reference	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Reference = 18$/;"	v
s:Relative	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Relative(...) abort$/;"	f
s:ReloadStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadStatus(...) abort$/;"	f
s:ReloadStatusBuffer	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadStatusBuffer(...) abort$/;"	f
s:ReloadTabStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadTabStatus(...) abort$/;"	f
s:ReloadWinStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadWinStatus(...) abort$/;"	f
s:Remote	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Remote(dir, remote, flags, cb) abort$/;"	f
s:RemoteCallback	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RemoteCallback(config, into, flags, cb) abort$/;"	f
s:RemoteDefault	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RemoteDefault(dir) abort$/;"	f
s:RemoteParseArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RemoteParseArgs(args) abort$/;"	f
s:RemoteResolve	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RemoteResolve(url, flags) abort$/;"	f
s:RemoteUrlCallback	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RemoteUrlCallback(remote, callback) abort$/;"	f
s:Remove	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Remove(after, force) abort$/;"	f
s:ReplaceCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReplaceCmd(cmd) abort$/;"	f
s:Resolve	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Resolve(path) abort$/;"	f
s:RevertSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RevertSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:RunBufDelete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunBufDelete(bufnr) abort$/;"	f
s:RunClose	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunClose(state, tmp, job, ...) abort$/;"	f
s:RunCloseIn	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunCloseIn(job) abort$/;"	f
s:RunEcho	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunEcho(tmp) abort$/;"	f
s:RunEdit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunEdit(state, tmp, job) abort$/;"	f
s:RunExit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunExit(state, tmp, job, exit_status) abort$/;"	f
s:RunFinished	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunFinished(state, ...) abort$/;"	f
s:RunReceive	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunReceive(state, tmp, type, job, data, ...) abort$/;"	f
s:RunSave	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunSave(state) abort$/;"	f
s:RunSend	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunSend(job, str) abort$/;"	f
s:RunTick	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunTick(job) abort$/;"	f
s:RunWait	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunWait(state, tmp, job, ...) abort$/;"	f
s:Selection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Selection(arg1, ...) abort$/;"	f
s:SetTagbar	plugged/vim-go/ftplugin/go/tagbar.vim	/^function! s:SetTagbar()$/;"	f
s:Slash	plugged/vim-fugitive/autoload/fugitive.vim	/^  function! s:Slash(path) abort$/;"	f
s:Slash	plugged/vim-fugitive/plugin/fugitive.vim	/^  function! s:Slash(path) abort$/;"	f
s:Snippet	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Snippet = 15$/;"	v
s:SplitExpandChain	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SplitExpandChain(string, ...) abort$/;"	f
s:SquashArgument	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SquashArgument(...) abort$/;"	f
s:SshParseConfig	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SshParseConfig(into, root, file, ...) abort$/;"	f
s:SshParseHost	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SshParseHost(value) abort$/;"	f
s:SshParseInclude	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SshParseInclude(into, root, host, value) abort$/;"	f
s:StageApply	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageApply(info, reverse, extra) abort$/;"	f
s:StageArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageArgs(visual) abort$/;"	f
s:StageDelete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDelete(lnum1, lnum2, count) abort$/;"	f
s:StageDiff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDiff(diff) abort$/;"	f
s:StageDiffEdit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDiffEdit() abort$/;"	f
s:StageIgnore	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageIgnore(lnum1, lnum2, count) abort$/;"	f
s:StageInfo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageInfo(...) abort$/;"	f
s:StageInline	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageInline(mode, ...) abort$/;"	f
s:StageJump	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageJump(offset, section, ...) abort$/;"	f
s:StagePatch	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StagePatch(lnum1,lnum2) abort$/;"	f
s:StageReveal	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageReveal() abort$/;"	f
s:StageSeek	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageSeek(info, fallback) abort$/;"	f
s:StatusCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusCfile(...) abort$/;"	f
s:StatusCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusCommand(line1, line2, range, count, bang, mods, reg, arg, args, ...) abort$/;"	f
s:StdoutToFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StdoutToFile(out, cmd, ...) abort$/;"	f
s:Struct	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Struct = 22$/;"	v
s:SystemError	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SystemError(cmd, ...) abort$/;"	f
s:SystemList	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SystemList(cmd) abort$/;"	f
s:TYPE	autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:TYPE	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:TYPE = {'dict': type({}), 'funcref': type(function('call')), 'string': type(''), 'list': t/;"	v
s:TempDelete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempDelete(file) abort$/;"	f
s:TempDotMap	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempDotMap() abort$/;"	f
s:TempReadPost	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempReadPost(file) abort$/;"	f
s:TempReadPre	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempReadPre(file) abort$/;"	f
s:TempScript	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempScript(...) abort$/;"	f
s:TempState	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempState(...) abort$/;"	f
s:Text	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Text = 1$/;"	v
s:ToolItems	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolItems(state, from, to, offsets, text, ...) abort$/;"	f
s:ToolParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolParse(state, line) abort$/;"	f
s:ToolStream	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolStream(line1, line2, range, bang, mods, options, args, state) abort$/;"	f
s:ToolToFrom	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolToFrom(str) abort$/;"	f
s:Tree	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Tree(...) abort$/;"	f
s:Tree	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Tree(path) abort$/;"	f
s:TreeChomp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TreeChomp(...) abort$/;"	f
s:TreeInfo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TreeInfo(dir, commit) abort$/;"	f
s:TypeParameter	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:TypeParameter = 25$/;"	v
s:Uniq	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Uniq(list) abort$/;"	f
s:Unit	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Unit = 11$/;"	v
s:UpdateIndex	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UpdateIndex(dir, info) abort$/;"	f
s:UrlParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UrlParse(url) abort$/;"	f
s:UsableWin	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UsableWin(nr) abort$/;"	f
s:UserCommandCwd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UserCommandCwd(dir) abort$/;"	f
s:UserCommandList	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UserCommandList(...) abort$/;"	f
s:VError	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:VError = [s:nord0_gui, s:nord11_gui, s:nord1_term, s:nord11_term]$/;"	v
s:VMain	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:VMain = [s:nord1_gui, s:nord7_gui, s:nord1_term, s:nord7_term]$/;"	v
s:VMiddle	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:VMiddle = [s:nord5_gui, s:nord3_gui, s:nord5_term, s:nord3_term]$/;"	v
s:VRight	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:VRight = [s:nord1_gui, s:nord9_gui, s:nord1_term, s:nord9_term]$/;"	v
s:VWarn	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:VWarn = [s:nord1_gui, s:nord13_gui, s:nord3_term, s:nord13_term]$/;"	v
s:Value	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Value = 12$/;"	v
s:Variable	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Variable = 6$/;"	v
s:VersionCheck	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:VersionCheck() abort$/;"	f
s:WinShellEsc	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:WinShellEsc(arg) abort$/;"	f
s:_handleOldOptions	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:_handleOldOptions() abort$/;"	f
s:abs_path	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:abs_path(bufnr, shellesc)$/;"	f
s:action_for	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:action_for(key, ...)$/;"	f
s:add_db	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:add_db(db_file) abort$/;"	f
s:add_methods	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
s:added_db_files	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:added_db_files = {}$/;"	v
s:added_dbs	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:added_dbs = []$/;"	v
s:addr_other	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_other = has('patch-8.1.560') || has('nvim-0.5.0') ? '-addr=other' : ''$/;"	v
s:addr_tabs	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_tabs  = has('patch-7.4.542') ? '-addr=tabs' : ''$/;"	v
s:addr_wins	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_wins  = has('patch-7.4.542') ? '-addr=windows' : ''$/;"	v
s:adjust_header	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:adjust_header(bufnr, hunk_diff)$/;"	f
s:adjust_hunk_summary	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:adjust_hunk_summary(hunk_diff) abort$/;"	f
s:ag_handler	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_handler(lines, has_column)$/;"	f
s:ag_to_qf	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_to_qf(line, has_column)$/;"	f
s:align_lists	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_lists(lists)$/;"	f
s:align_pairs	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_pairs(list)$/;"	f
s:ansi	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ansi(str, group, default, ...)$/;"	f
s:ansi	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:ansi = {'black': 30, 'red': 31, 'green': 32, 'yellow': 33, 'blue': 34, 'magenta': 35, 'cya/;"	v
s:append_ul	autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
s:applyDocumentChanges	plugged/vim-go/autoload/go/lsp.vim	/^function s:applyDocumentChanges(changes)$/;"	f
s:applyTextEdits	plugged/vim-go/autoload/go/lsp.vim	/^function s:applyTextEdits(bufnr, msg) abort$/;"	f
s:ask	autoload/plug.vim	/^function! s:ask(message)$/;"	f
s:assert_list_of_dicts	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:assert_list_of_dicts(expected, actual)$/;"	f
s:assert_signs	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:assert_signs(expected, filename)$/;"	f
s:assign_name	autoload/plug.vim	/^function! s:assign_name()$/;"	f
s:assoc	autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
s:async_guru	plugged/vim-go/autoload/go/guru.vim	/^function! s:async_guru(args) abort$/;"	f
s:available	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^let s:available = has('nvim') || ($/;"	v
s:await	plugged/vim-go/autoload/go/promise.vim	/^function! s:await(timeout, default) dict$/;"	f
s:bad_git_dir	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:bad_git_dir = '\/$\\|^fugitive:'$/;"	v
s:balloon	plugged/vim-go/autoload/go/tool.vim	/^function! s:balloon(msg)$/;"	f
s:bang	autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
s:bang_edits	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:bang_edits = {'split': 'Git', 'vsplit': 'vertical Git', 'tabedit': 'tab Git', 'pedit': 'Gi/;"	v
s:bar	autoload/plug.vim	/^function! s:bar()$/;"	f
s:base_dir	plugged/fzf/plugin/fzf.vim	/^  let s:base_dir = expand('<sfile>:h:h')$/;"	v
s:base_spec	autoload/plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:bg	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:bg = '#282c34'$/;"	v
s:bin	plugged/fzf.vim/autoload/fzf/vim.vim	/^    let s:bin.preview = fnamemodify(s:bin.preview, ':8')$/;"	v
s:bin	plugged/fzf.vim/autoload/fzf/vim.vim	/^    let s:bin.preview = split(system('for %A in ("'.s:bin.preview.'") do @echo %~sA'), "\\n")[0]$/;"	v
s:bin	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:bin = {$/;"	v
s:bin_dir	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:bin_dir = expand('<sfile>:p:h:h:h').'\/bin\/'$/;"	v
s:blobdirs	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:blobdirs = {}$/;"	v
s:bold	plugged/nord-vim/colors/nord.vim	/^  let s:bold = ""$/;"	v
s:bold	plugged/nord-vim/colors/nord.vim	/^let s:bold = "bold,"$/;"	v
s:border_opt	plugged/fzf/plugin/fzf.vim	/^function! s:border_opt(window)$/;"	f
s:btags_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_sink(lines)$/;"	f
s:btags_source	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_source(tag_cmds)$/;"	f
s:buf_nr	plugged/vim-go/autoload/go/doc.vim	/^let s:buf_nr = -1$/;"	v
s:buf_nr	plugged/vim-go/autoload/go/ui.vim	/^let s:buf_nr = -1$/;"	v
s:buffer_line_handler	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_line_handler(lines)$/;"	f
s:buffer_lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_lines(query)$/;"	f
s:buffer_prototype	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:buffer_prototype = {}$/;"	v
s:buffer_repo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:buffer_repo() dict abort$/;"	f
s:buffer_type	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:buffer_type(...) dict abort$/;"	f
s:buflisted	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buflisted()$/;"	f
s:bufnameprefix	plugged/vim-go/autoload/go/term.vim	/^let s:bufnameprefix = 'goterm:\/\/'$/;"	v
s:bufnr	plugged/vim-gitgutter/test/test_gitgutter.vim	/^let s:bufnr       = bufnr('')$/;"	v
s:bufopen	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:bufopen(lines)$/;"	f
s:build_command	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:build_command(cmd)$/;"	f
s:c_flag	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:c_flag = s:git_supports_command_line_config_override()$/;"	v
s:cache_project_root	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:cache_project_root(path) abort$/;"	f
s:calc_size	plugged/fzf/plugin/fzf.vim	/^function! s:calc_size(max, val, dict)$/;"	f
s:callResult	plugged/vim-go/autoload/go/debug.vim	/^function! s:callResult(res) abort$/;"	f
s:call_jsonrpc	plugged/vim-go/autoload/go/debug.vim	/^function! s:call_jsonrpc(handle_result, method, ...) abort$/;"	f
s:callback	plugged/fzf/plugin/fzf.vim	/^function! s:callback(dict, lines) abort$/;"	f
s:callback	plugged/vim-go/autoload/go/job.vim	/^function! s:callback(chan, msg) dict$/;"	f
s:callback2on_stderr	plugged/vim-go/autoload/go/job.vim	/^function! s:callback2on_stderr(mode, ch, data, event) dict$/;"	f
s:callback2on_stdout	plugged/vim-go/autoload/go/job.vim	/^function! s:callback2on_stdout(mode, ch, data, event) dict$/;"	f
s:can_diffoff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:can_diffoff(buf) abort$/;"	f
s:cfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:cfile() abort$/;"	f
s:channel_log	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:channel_log = s:plugin_dir.'channel.log'$/;"	v
s:character	plugged/vim-go/autoload/go/lsp/lsp.vim	/^function! s:character(line, col) abort$/;"	f
s:checkVersion	plugged/vim-go/plugin/go.vim	/^function! s:checkVersion() abort$/;"	f
s:check_diagnostics	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:check_diagnostics(actual, expected, when)$/;"	f
s:check_errors	plugged/vim-go/autoload/go/debug.vim	/^function! s:check_errors(resp_json) abort$/;"	f
s:check_requirements	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:check_requirements()$/;"	f
s:check_ruby	autoload/plug.vim	/^function! s:check_ruby()$/;"	f
s:checked	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:checked = 0$/;"	v
s:checked	plugged/fzf/plugin/fzf.vim	/^let s:checked = {}$/;"	v
s:checkout	autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
s:chomp	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:chomp(str)$/;"	f
s:chomp	plugged/vim-go/autoload/go/keyify.vim	/^function! s:chomp(string)$/;"	f
s:chsh	autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
s:clap_matches	plugged/nord-vim/colors/nord.vim	/^let s:clap_matches = [$/;"	v
s:clean	autoload/plug.vim	/^function! s:clean(force)$/;"	f
s:clear	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:clear(bufnr)$/;"	f
s:clear	plugged/vim-go/autoload/go/statusline.vim	/^function! s:clear()$/;"	f
s:clearOptions	plugged/vim-go/scripts/runtest.vim	/^function! s:clearOptions() abort$/;"	f
s:clearState	plugged/vim-go/autoload/go/debug.vim	/^function! s:clearState() abort$/;"	f
s:clear_group_from_matches	plugged/vim-go/autoload/go/util.vim	/^function! s:clear_group_from_matches(group) abort$/;"	f
s:close_cb	plugged/vim-go/autoload/go/def.vim	/^  function! s:close_cb(next, ch) dict$/;"	f
s:close_cb	plugged/vim-go/autoload/go/job.vim	/^function! s:close_cb(ch) dict$/;"	f
s:close_popup_on_escape	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:close_popup_on_escape(winid, key)$/;"	f
s:closeterm	plugged/vim-go/autoload/go/term.vim	/^function! s:closeterm()$/;"	f
s:cmd	plugged/fzf/plugin/fzf.vim	/^function! s:cmd(bang, ...) abort$/;"	f
s:cmd_history_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:cmd_history_sink(lines)$/;"	f
s:cmd_job	plugged/vim-go/autoload/go/cmd.vim	/^function! s:cmd_job(args) abort$/;"	f
s:code	plugged/vim-go/autoload/fzf/decls.vim	/^function! s:code(group, attr) abort$/;"	f
s:codeAction	plugged/vim-go/autoload/go/lsp/message.vim	/^function! s:codeAction(name, file) abort$/;"	f
s:collect	plugged/fzf/plugin/fzf.vim	/^function! s:collect(temps) abort$/;"	f
s:color	plugged/vim-go/autoload/fzf/decls.vim	/^function! s:color(str, group) abort$/;"	f
s:command_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:command_sink(lines)$/;"	f
s:commits	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits(range, buffer_local, args)$/;"	f
s:commits_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits_sink(lines)$/;"	f
s:common_prefix	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:common_prefix(a, b)$/;"	f
s:common_sink	plugged/fzf/plugin/fzf.vim	/^function! s:common_sink(action, lines) abort$/;"	f
s:common_suffix	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:common_suffix(a, b, start)$/;"	f
s:commondirs	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:commondirs = {}$/;"	v
s:compareLocations	plugged/vim-go/autoload/go/lsp.vim	/^function! s:compareLocations(left, right) abort$/;"	f
s:compare_binary_versions	plugged/fzf/plugin/fzf.vim	/^function! s:compare_binary_versions(a, b)$/;"	f
s:compare_git_uri	autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
s:compare_versions	plugged/fzf/plugin/fzf.vim	/^function! s:compare_versions(a, b)$/;"	f
s:complete	plugged/vim-go/autoload/go/debug.vim	/^function! s:complete(job, exit_status, data) abort$/;"	f
s:complete	plugged/vim-go/autoload/go/guru.vim	/^function! s:complete(job, exit_status, messages) dict abort$/;"	f
s:complete	plugged/vim-go/autoload/go/job_test.vim	/^func! s:complete(job, exit_code, messages)$/;"	f
s:complete	plugged/vim-go/autoload/go/package_test.vim	/^func! s:complete(arglead, expected) abort$/;"	f
s:complete	plugged/vim-go/plugin/go.vim	/^fun! s:complete(lead, cmdline, cursor)$/;"	f
s:complete_insert	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_insert(lines)$/;"	f
s:complete_trigger	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_trigger()$/;"	f
s:completionErrorHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:completionErrorHandler(next, error) abort dict$/;"	f
s:completionHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:completionHandler(next, msg) abort dict$/;"	f
s:config	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:config = {}$/;"	v
s:config_Get	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:config_Get(name, ...) dict abort$/;"	f
s:config_GetAll	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:config_GetAll(name) dict abort$/;"	f
s:config_GetRegexp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:config_GetRegexp(pattern) dict abort$/;"	f
s:config_prototype	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:config_prototype = {}$/;"	v
s:configureMappings	plugged/vim-go/autoload/go/debug.vim	/^function! s:configureMappings(...) abort$/;"	f
s:connect	plugged/vim-go/autoload/go/debug.vim	/^function! s:connect(addr) abort$/;"	f
s:continue	plugged/vim-go/autoload/go/debug.vim	/^function! s:continue()$/;"	f
s:counter	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:counter = 0$/;"	v
s:coverage_browser_callback	plugged/vim-go/autoload/go/coverage.vim	/^function! s:coverage_browser_callback(coverfile, job, exit_status, data)$/;"	f
s:coverage_callback	plugged/vim-go/autoload/go/coverage.vim	/^function! s:coverage_callback(coverfile, job, exit_status, data)$/;"	f
s:coverage_job	plugged/vim-go/autoload/go/coverage.vim	/^function s:coverage_job(args)$/;"	f
s:cpath	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:cpath(path, ...) abort$/;"	f
s:cpo_save	autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/fzf.vim/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/fzf/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/ctrlp/decls.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/fzf/decls.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/alternate.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/asmfmt.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/auto.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/calls.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/calls_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/cmd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/cmd_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/complete.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/complete_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/config.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/config_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/coverage.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/debug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/debug_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/decls.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/def.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/def_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/doc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/fillstruct.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/fillstruct_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/fmt.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/fmt_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/guru.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/guru_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/highlight_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/iferr.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/impl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/impl_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/implements.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/import.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/import_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/indent_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/issue.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/job.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/job_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/keyify.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lint.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lint_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/list.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lsp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lsp/lsp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lsp/lsp_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lsp/message.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lsp_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/mod.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/package.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/package_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/path.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/play.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/promise.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/promise_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/referrers.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/rename.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/statusline.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/tags.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/tags_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/template.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/template_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/term.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/term_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/test_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/textobj.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/tool.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/tool_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/ui.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/uri.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/uri_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/util.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/gotest.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/compiler/go.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/ftdetect/gofiletype.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/ftplugin/asm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/ftplugin/go.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/ftplugin/go/snippets.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/ftplugin/go/tagbar.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/ftplugin/gomod.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/indent/go.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/indent/gohtmltmpl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/plugin/go.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/scripts/runbench.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/scripts/runtest.vim	/^let s:cpo_save = &cpo$/;"	v
s:create_cmd	plugged/vim-go/autoload/go/tags.vim	/^func s:create_cmd(args) abort$/;"	f
s:create_popup	plugged/fzf/plugin/fzf.vim	/^  function s:create_popup(hl, opts) abort$/;"	f
s:create_popup	plugged/fzf/plugin/fzf.vim	/^  function! s:create_popup(hl, opts) abort$/;"	f
s:creategomod	plugged/vim-go/autoload/gotest.vim	/^func! s:creategomod(modname, dir) abort$/;"	f
s:csi	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:csi(color, fg)$/;"	f
s:current_dir	plugged/vim-gitgutter/test/test_gitgutter.vim	/^let s:current_dir = expand('%:p:h')$/;"	v
s:current_file	plugged/vim-go/autoload/go/template.vim	/^let s:current_file = expand("<sfile>")$/;"	v
s:current_fileencodings	plugged/vim-go/plugin/go.vim	/^let s:current_fileencodings = ''$/;"	v
s:current_fileformats	plugged/vim-go/plugin/go.vim	/^let s:current_fileformats = ''$/;"	v
s:current_hunk	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:current_hunk() abort$/;"	f
s:cursor_in_two_hunks	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:cursor_in_two_hunks()$/;"	f
s:debug	plugged/vim-go/autoload/go/debug_test.vim	/^function! s:debug(...) abort$/;"	f
s:debug	plugged/vim-go/autoload/go/lsp.vim	/^function! s:debug(event, data) abort$/;"	f
s:debugasync	plugged/vim-go/autoload/go/lsp.vim	/^function! s:debugasync(timer) abort$/;"	f
s:decodehex	plugged/vim-go/autoload/go/uri.vim	/^function! s:decodehex(value)$/;"	f
s:dedup	plugged/vim-go/autoload/go/lsp.vim	/^function! s:dedup(list)$/;"	f
s:def_job	plugged/vim-go/autoload/go/def.vim	/^function s:def_job(args, state) abort$/;"	f
s:default_action	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:default_action = {$/;"	v
s:default_action	plugged/fzf/plugin/fzf.vim	/^let s:default_action = {$/;"	v
s:default_layout	plugged/fzf/plugin/fzf.vim	/^function! s:default_layout()$/;"	f
s:default_list_type_commands	plugged/vim-go/autoload/go/list.vim	/^let s:default_list_type_commands = {$/;"	v
s:default_metalinter	plugged/vim-go/autoload/go/config.vim	/^let s:default_metalinter = 'staticcheck'$/;"	v
s:defaults	plugged/fzf/plugin/fzf.vim	/^function! s:defaults()$/;"	f
s:define_commands	autoload/plug.vim	/^function! s:define_commands()$/;"	f
s:define_sign_line_highlights	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:define_sign_line_highlights() abort$/;"	f
s:define_sign_linenr_highlights	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:define_sign_linenr_highlights() abort$/;"	f
s:define_sign_text	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:define_sign_text() abort$/;"	f
s:definitionHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:definitionHandler(next, msg) abort dict$/;"	f
s:defs	plugged/fzf.vim/plugin/fzf.vim	/^function! s:defs(commands)$/;"	f
s:delete_expands	plugged/vim-go/autoload/go/debug.vim	/^function! s:delete_expands()$/;"	f
s:deleteline	plugged/vim-go/autoload/go/lsp.vim	/^function! s:deleteline(start, end) abort$/;"	f
s:diagnostic_after_write	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:diagnostic_after_write(contents, changes) abort$/;"	f
s:did_check_exe	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:did_check_exe = 0$/;"	v
s:diff	autoload/plug.vim	/^function! s:diff()$/;"	f
s:diff	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:diff(rline, aline, rlinenr, alinenr, rprefix, aprefix, regions, whole_line)$/;"	f
s:diff_restore	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diff_restore() abort$/;"	f
s:diff_window_count	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diff_window_count() abort$/;"	f
s:diffoff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffoff() abort$/;"	f
s:diffoff_all	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffoff_all(dir) abort$/;"	f
s:diffthis	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffthis() abort$/;"	f
s:dir	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:dir(bufnr) abort$/;"	f
s:dir	plugged/vim-go/scripts/runtest.vim	/^let s:dir = expand('%:p:h')$/;"	v
s:dir_for_worktree	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:dir_for_worktree = {}$/;"	v
s:dirpath	autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
s:disable_colors	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:disable_colors = []$/;"	v
s:do	autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
s:doautocmd	autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
s:dobufread	autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
s:docFromHoverResult	plugged/vim-go/autoload/go/lsp.vim	/^function! s:docFromHoverResult(msg) abort dict$/;"	f
s:docLinkFromHoverResult	plugged/vim-go/autoload/go/lsp.vim	/^function! s:docLinkFromHoverResult(msg) abort dict$/;"	f
s:done	plugged/vim-gitgutter/test/runner.vim	/^  let s:done += 1$/;"	v
s:done	plugged/vim-gitgutter/test/runner.vim	/^let s:done = 0$/;"	v
s:done	plugged/vim-go/scripts/runtest.vim	/^  let s:done += 1$/;"	v
s:done	plugged/vim-go/scripts/runtest.vim	/^let s:done = 0$/;"	v
s:dopopd	plugged/fzf/plugin/fzf.vim	/^function! s:dopopd()$/;"	f
s:dos_shell	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:dos_shell()$/;"	f
s:duo_1	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:duo_1 = '065289'$/;"	v
s:duo_1	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:duo_1 = 'c8ae9d'$/;"	v
s:duo_2	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:duo_2 = '718ecd'$/;"	v
s:duo_2	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:duo_2 = 'e06c75'$/;"	v
s:duo_3	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:duo_3 = 'aeb3b7'$/;"	v
s:duo_3	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:duo_3 = 'dd672c'$/;"	v
s:echo	plugged/vim-go/autoload/go/util.vim	/^function! s:echo(msg, hi)$/;"	f
s:echo_go_info	plugged/vim-go/autoload/go/auto.vim	/^function! s:echo_go_info()$/;"	f
s:edit_jobs	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:edit_jobs = {}$/;"	v
s:efm	plugged/vim-go/autoload/go/test.vim	/^let s:efm = ""$/;"	v
s:elapsed_time	plugged/vim-go/scripts/runtest.vim	/^  let s:elapsed_time = substitute(reltimestr(reltime(s:started)), '^\\s*\\(.\\{-}\\)\\s*$', '\\1/;"	v
s:enable_staging_from_hunk_preview_window	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:enable_staging_from_hunk_preview_window()$/;"	f
s:enable_syntax	plugged/vim-go/autoload/ctrlp/decls.vim	/^function! s:enable_syntax() abort$/;"	f
s:enc_to_cp	plugged/fzf/plugin/fzf.vim	/^  function! s:enc_to_cp(str)$/;"	f
s:encode	plugged/vim-go/autoload/go/uri.vim	/^function! s:encode(value, unreserved)$/;"	f
s:encodechar	plugged/vim-go/autoload/go/uri.vim	/^function! s:encodechar(value)$/;"	f
s:engine	plugged/vim-go/ftplugin/go/snippets.vim	/^let s:engine = go#config#SnippetEngine()$/;"	v
s:ensureWorkspace	plugged/vim-go/autoload/go/lsp.vim	/^function! s:ensureWorkspace(dir)$/;"	f
s:env_cache	plugged/vim-go/autoload/go/util.vim	/^let s:env_cache = {}$/;"	v
s:err	autoload/plug.vim	/^function! s:err(msg)$/;"	f
s:err_cb	plugged/vim-go/autoload/go/debug.vim	/^function! s:err_cb(ch, msg) abort$/;"	f
s:error	plugged/fzf/plugin/fzf.vim	/^function! s:error(msg)$/;"	f
s:errorFromDiagnostic	plugged/vim-go/autoload/go/lsp.vim	/^function! s:errorFromDiagnostic(diagnostic, bufname, fname) abort$/;"	f
s:errored	plugged/vim-gitgutter/test/runner.vim	/^      let s:errored = 0$/;"	v
s:errored	plugged/vim-gitgutter/test/runner.vim	/^let s:errored = 0$/;"	v
s:errorformat	plugged/vim-go/autoload/go/lint.vim	/^function! s:errorformat(metalinter) abort$/;"	f
s:errorformat	plugged/vim-go/autoload/go/test.vim	/^function! s:errorformat() abort$/;"	f
s:errors	plugged/vim-gitgutter/test/runner.vim	/^      let s:errors += 1$/;"	v
s:errors	plugged/vim-gitgutter/test/runner.vim	/^  let s:errors += 1$/;"	v
s:errors	plugged/vim-gitgutter/test/runner.vim	/^let s:errors = 0$/;"	v
s:esc	autoload/plug.vim	/^function! s:esc(path)$/;"	f
s:escape	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:escape(path)$/;"	f
s:escape	plugged/fzf/plugin/fzf.vim	/^function! s:escape(path)$/;"	f
s:escrtp	autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
s:eval	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:eval(dict, key, arg)$/;"	f
s:eval	plugged/vim-go/autoload/go/debug.vim	/^function! s:eval(arg) abort$/;"	f
s:evalResult	plugged/vim-go/autoload/go/debug.vim	/^function! s:evalResult(res) abort$/;"	f
s:eval_tree	plugged/vim-go/autoload/go/debug.vim	/^function! s:eval_tree(var, nest, isMapOrSliceChild) abort$/;"	f
s:evaluate_opts	plugged/fzf/plugin/fzf.vim	/^function! s:evaluate_opts(options)$/;"	f
s:excmds	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:excmds()$/;"	f
s:exec	plugged/vim-go/autoload/go/util.vim	/^function! s:exec(cmd, ...) abort$/;"	f
s:exec_paths	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:exec_paths = {}$/;"	v
s:executable	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:executable(binary) abort$/;"	f
s:executables	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:executables = {}$/;"	v
s:execute	plugged/fzf/plugin/fzf.vim	/^function! s:execute(dict, command, use_height, temps) abort$/;"	f
s:executeCommand	plugged/vim-go/autoload/go/lsp.vim	/^function! s:executeCommand(cmd, args) abort$/;"	f
s:execute_term	plugged/fzf/plugin/fzf.vim	/^function! s:execute_term(dict, command, temps) abort$/;"	f
s:execute_tmux	plugged/fzf/plugin/fzf.vim	/^function! s:execute_tmux(dict, command, temps) abort$/;"	f
s:exists_file	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:exists_file(bufnr) abort$/;"	f
s:exit	plugged/vim-go/autoload/go/lsp.vim	/^function! s:exit(restart) abort$/;"	f
s:exit_cb	plugged/vim-go/autoload/go/def.vim	/^  function! s:exit_cb(next, job, exitval) dict$/;"	f
s:exit_cb	plugged/vim-go/autoload/go/job.vim	/^function! s:exit_cb(job, exitval) dict$/;"	f
s:exit_cb	plugged/vim-go/autoload/go/rename.vim	/^function! s:exit_cb(next, job, exitval) abort$/;"	f
s:exit_cb	plugged/vim-go/autoload/go/term.vim	/^function! s:exit_cb(job_id, exit_status) dict abort$/;"	f
s:exit_handler	plugged/fzf/plugin/fzf.vim	/^function! s:exit_handler(code, command, ...)$/;"	f
s:exited	plugged/vim-go/autoload/go/debug.vim	/^function! s:exited(res) abort$/;"	f
s:expand	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:expand = '\\%(\\(' . s:var . '\\)\\(' . s:flag . '*\\)\\(:S\\)\\=\\)'$/;"	v
s:expandRunArgs	plugged/vim-go/autoload/go/cmd.vim	/^function! s:expandRunArgs(idx, val) abort$/;"	f
s:expand_var	plugged/vim-go/autoload/go/debug.vim	/^function! s:expand_var() abort$/;"	f
s:extend	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:extend(base, extra)$/;"	f
s:extend_opts	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:extend_opts(dict, eopts, prepend)$/;"	f
s:extract_name	autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
s:fail	plugged/vim-gitgutter/test/runner.vim	/^      let s:fail += 1$/;"	v
s:fail	plugged/vim-gitgutter/test/runner.vim	/^let s:fail = 0$/;"	v
s:fail	plugged/vim-go/scripts/runtest.vim	/^    let s:fail += 1$/;"	v
s:fail	plugged/vim-go/scripts/runtest.vim	/^let s:fail = 0$/;"	v
s:fg	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:fg = '#abb2bf'$/;"	v
s:file_commit_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:file_commit_pattern = s:file_pattern . '\\|^\\%(\\l\\{3,\\} \\)\\=[0-9a-f]\\{4,\\} '$/;"	v
s:file_options	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_options(prefix)$/;"	f
s:file_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:file_pattern = '^[A-Z?] .\\|^diff --'$/;"	v
s:file_source	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_source(prefix)$/;"	f
s:file_split_prefix	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_split_prefix(prefix)$/;"	f
s:filename	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:filename(bufnr) abort$/;"	f
s:fill_quickfix	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:fill_quickfix(list, ...)$/;"	f
s:find_current_signs	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:find_current_signs(bufnr) abort$/;"	f
s:find_name	autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
s:find_open_window	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:find_open_window(b)$/;"	f
s:finish	autoload/plug.vim	/^function! s:finish(pull)$/;"	f
s:finish_bindings	autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
s:first_line	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:first_line(lines)$/;"	f
s:first_sign_id	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:first_sign_id = 3000$/;"	v
s:fix_file_references	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:fix_file_references(filepath, hunk_diff)$/;"	f
s:flag	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:flag = '\\%(:[p8~.htre]\\|:g\\=s\\(.\\).\\{-\\}\\1.\\{-\\}\\1\\)'$/;"	v
s:fmt_cmd	plugged/vim-go/autoload/go/fmt.vim	/^function! s:fmt_cmd(bin_name, source, target)$/;"	f
s:fmt_excmd	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:fmt_excmd = '   '.s:blue('%-38s', 'Statement').'%s'$/;"	v
s:fname_prefix	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:fname_prefix(str)$/;"	f
s:fnameescape	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:fnameescape(file) abort$/;"	f
s:fnameescape	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:fnameescape = " \\t\\n*?[{`$\\\\%#'\\"|!<"$/;"	v
s:focus_was_lost	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let s:focus_was_lost = 0$/;"	v
s:folded	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:folded()$/;"	f
s:format_cmd	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_cmd(line)$/;"	f
s:format_excmd	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_excmd(ex)$/;"	f
s:format_for_log	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:format_for_log(data) abort$/;"	f
s:format_git_log	autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
s:format_mark	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_mark(line)$/;"	f
s:format_message	autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
s:format_win	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_win(tab, win, buf)$/;"	f
s:function	plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! s:function(name)$/;"	f
s:function	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^  function! s:function(name)$/;"	f
s:function	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:function(name) abort$/;"	f
s:fzf	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:fzf(name, opts, extra)$/;"	f
s:fzf_call	plugged/fzf/plugin/fzf.vim	/^  function! s:fzf_call(fn, ...)$/;"	f
s:fzf_expand	plugged/fzf/plugin/fzf.vim	/^function! s:fzf_expand(fmt)$/;"	f
s:fzf_fnamemodify	plugged/fzf/plugin/fzf.vim	/^function! s:fzf_fnamemodify(fname, mods)$/;"	f
s:fzf_getcwd	plugged/fzf/plugin/fzf.vim	/^function! s:fzf_getcwd()$/;"	f
s:fzf_go	plugged/fzf/plugin/fzf.vim	/^let s:fzf_go = s:base_dir.'\/bin\/fzf'$/;"	v
s:fzf_restore_colors	plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_restore_colors()$/;"	f
s:fzf_tempname	plugged/fzf/plugin/fzf.vim	/^function! s:fzf_tempname()$/;"	f
s:fzf_tmux	plugged/fzf/plugin/fzf.vim	/^function! s:fzf_tmux(dict)$/;"	f
s:fzf_tmux	plugged/fzf/plugin/fzf.vim	/^let s:fzf_tmux = s:base_dir.'\/bin\/fzf-tmux'$/;"	v
s:fzf_vim_term	plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_vim_term()$/;"	f
s:gap_between_regions	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^let s:gap_between_regions = 5$/;"	v
s:generate_wildignore_options	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:generate_wildignore_options() abort$/;"	f
s:getReceiver	plugged/vim-go/autoload/go/impl.vim	/^function! s:getReceiver()$/;"	f
s:get_background_colors	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_background_colors(group) abort$/;"	f
s:get_color	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_color(attr, ...)$/;"	f
s:get_color	plugged/fzf/plugin/fzf.vim	/^function! s:get_color(attr, ...)$/;"	f
s:get_ctags_executable	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:get_ctags_executable(proj_dir) abort$/;"	f
s:get_foreground_colors	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_foreground_colors(group) abort$/;"	f
s:get_foreground_fallback_colors	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_foreground_fallback_colors(type)$/;"	f
s:get_git_root	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_git_root()$/;"	f
s:get_hl	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_hl(group, what, mode) abort$/;"	f
s:get_version	plugged/fzf/plugin/fzf.vim	/^function s:get_version(bin)$/;"	f
s:get_visual_content	plugged/vim-go/autoload/go/play.vim	/^function! s:get_visual_content() abort$/;"	f
s:get_visual_selection	plugged/vim-go/autoload/go/play.vim	/^function! s:get_visual_selection() abort$/;"	f
s:getinfo	plugged/vim-go/autoload/go/complete_test.vim	/^func! s:getinfo()$/;"	f
s:getinfo	plugged/vim-go/autoload/go/lsp_test.vim	/^function! s:getinfo(str, name)$/;"	f
s:getpos	plugged/fzf/plugin/fzf.vim	/^function! s:getpos()$/;"	f
s:git_diff	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:git_diff(...)$/;"	f
s:git_diff_staged	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:git_diff_staged(...)$/;"	f
s:git_supports_command_line_config_override	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:git_supports_command_line_config_override() abort$/;"	f
s:git_validate	autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
s:git_version	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:git_version()$/;"	f
s:git_version_requirement	autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
s:git_versions	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:git_versions = {}$/;"	v
s:given_range	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:given_range(line1, line2)$/;"	f
s:glob	autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
s:glob_dir	autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
s:globsubs	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:globsubs = {$/;"	v
s:go_decls_var	plugged/vim-go/autoload/ctrlp/decls.vim	/^let s:go_decls_var = {$/;"	v
s:go_major_version	plugged/vim-go/autoload/go/mod.vim	/^let s:go_major_version = ""$/;"	v
s:go_packages	plugged/vim-go/autoload/go/impl.vim	/^function! s:go_packages(dirs, arglead) abort$/;"	f
s:go_stack	plugged/vim-go/autoload/go/def.vim	/^let s:go_stack = []$/;"	v
s:go_stack_level	plugged/vim-go/autoload/go/def.vim	/^let s:go_stack_level = 0$/;"	v
s:go_test_show_name	plugged/vim-go/autoload/go/test.vim	/^let s:go_test_show_name = 0$/;"	v
s:goarch	plugged/vim-go/autoload/go/package.vim	/^    let s:goarch = '*'$/;"	v
s:goarch	plugged/vim-go/autoload/go/package.vim	/^    let s:goarch = g:golang_goarch$/;"	v
s:goarch	plugged/vim-go/autoload/go/package.vim	/^let s:goarch = $GOARCH$/;"	v
s:godocWord	plugged/vim-go/autoload/go/doc.vim	/^function! s:godocWord(args) abort$/;"	f
s:gofiletype_post	plugged/vim-go/plugin/go.vim	/^function! s:gofiletype_post()$/;"	f
s:gofiletype_pre	plugged/vim-go/plugin/go.vim	/^function! s:gofiletype_pre()$/;"	f
s:golangcilintcmd	plugged/vim-go/autoload/go/lint.vim	/^function! s:golangcilintcmd(bin_path, haslinter)$/;"	f
s:gometa	plugged/vim-go/autoload/go/lint_test.vim	/^func! s:gometa(metalinter) abort$/;"	f
s:gometa_importabs	plugged/vim-go/autoload/go/lint_test.vim	/^func! s:gometa_importabs(metalinter) abort$/;"	f
s:gometa_multiple	plugged/vim-go/autoload/go/lint_test.vim	/^func! s:gometa_multiple(metalinter) abort$/;"	f
s:gometaautosave	plugged/vim-go/autoload/go/lint_test.vim	/^func! s:gometaautosave(metalinter, withList) abort$/;"	f
s:gometaautosave_multiple	plugged/vim-go/autoload/go/lint_test.vim	/^func! s:gometaautosave_multiple(metalinter) abort$/;"	f
s:gomod	plugged/vim-go/ftdetect/gofiletype.vim	/^fun! s:gomod()$/;"	f
s:goos	plugged/vim-go/autoload/go/package.vim	/^    let s:goos = '*'$/;"	v
s:goos	plugged/vim-go/autoload/go/package.vim	/^    let s:goos = 'darwin'$/;"	v
s:goos	plugged/vim-go/autoload/go/package.vim	/^    let s:goos = 'windows'$/;"	v
s:goos	plugged/vim-go/autoload/go/package.vim	/^    let s:goos = g:golang_goos$/;"	v
s:goos	plugged/vim-go/autoload/go/package.vim	/^let s:goos = $GOOS$/;"	v
s:gopath	plugged/vim-go/scripts/runtest.vim	/^let s:gopath = $GOPATH$/;"	v
s:goroutineID	plugged/vim-go/autoload/go/debug.vim	/^function! s:goroutineID() abort$/;"	f
s:got_fmt_error	plugged/vim-go/autoload/go/asmfmt.vim	/^let s:got_fmt_error = 0$/;"	v
s:goto_file	plugged/vim-go/autoload/go/debug.vim	/^function! s:goto_file() abort$/;"	f
s:goto_original_window	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:goto_original_window()$/;"	f
s:gray1	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:gray1 = '#3e4452'$/;"	v
s:gray2	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:gray2 = '#2c323c'$/;"	v
s:gray3	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:gray3 = '#55606d'$/;"	v
s:green	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:green = '#43d08a'$/;"	v
s:grep_combine_flags	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:grep_combine_flags = '[aiIrhHEGPFnlLzocpWq]\\{-\\}'$/;"	v
s:grep_version	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:grep_version()$/;"	f
s:gsub	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
s:guru_cmd	plugged/vim-go/autoload/go/guru.vim	/^function! s:guru_cmd(args) range abort$/;"	f
s:handleCodeAction	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleCodeAction(kind, cmd, msg) abort dict$/;"	f
s:handleCodeActionError	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleCodeActionError(filename, msg) abort dict$/;"	f
s:handleFormat	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleFormat(msg) abort dict$/;"	f
s:handleFormatError	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleFormatError(filename, msg) abort dict$/;"	f
s:handleImplements	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleImplements(next, msg) abort dict$/;"	f
s:handleImplementsError	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleImplementsError(next, error) abort dict$/;"	f
s:handleLocations	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleLocations(next, msg) abort$/;"	f
s:handleNextInProgress	plugged/vim-go/autoload/go/debug.vim	/^function! s:handleNextInProgress(res)$/;"	f
s:handleRPCResult	plugged/vim-go/autoload/go/debug.vim	/^function! s:handleRPCResult(resp) abort$/;"	f
s:handleReferences	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleReferences(next, msg) abort dict$/;"	f
s:handleRename	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleRename(msg) abort dict$/;"	f
s:handleRenameError	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleRenameError(msg) abort dict$/;"	f
s:handle_double_hunk	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:handle_double_hunk(modified_lines)$/;"	f
s:handle_exit	plugged/vim-go/autoload/go/term.vim	/^func s:handle_exit(job_id, exit_status, state) abort$/;"	f
s:handle_list_function_args	plugged/vim-go/autoload/go/debug.vim	/^function! s:handle_list_function_args(check_errors, res) abort$/;"	f
s:handle_list_local_vars	plugged/vim-go/autoload/go/debug.vim	/^function! s:handle_list_local_vars(check_errors, res) abort$/;"	f
s:handle_list_registers	plugged/vim-go/autoload/go/debug.vim	/^function! s:handle_list_registers(check_errors, res) abort$/;"	f
s:handle_set	plugged/vim-go/autoload/go/debug.vim	/^function! s:handle_set(check_errors, res) abort$/;"	f
s:handle_stack_response	plugged/vim-go/autoload/go/debug.vim	/^function! s:handle_stack_response(command, check_errors, res) abort$/;"	f
s:handle_staleness_check_response	plugged/vim-go/autoload/go/debug.vim	/^function! s:handle_staleness_check_response(filename, check_errors, res) abort$/;"	f
s:handler	plugged/vim-go/autoload/go/auto.vim	/^function! s:handler(timer_id)$/;"	f
s:handler	plugged/vim-go/autoload/go/complete.vim	/^  function! s:handler(state, start, matches) abort dict$/;"	f
s:has_any	plugged/fzf/plugin/fzf.vim	/^function! s:has_any(dict, keys)$/;"	f
s:has_fresh_changes	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:has_fresh_changes(bufnr) abort$/;"	f
s:hash_colors	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:hash_colors = {}$/;"	v
s:hash_match	autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
s:head_cache	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:head_cache = {}$/;"	v
s:helptag_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:helptag_sink(line)$/;"	f
s:hi	plugged/nord-vim/colors/nord.vim	/^function! s:hi(group, guifg, guibg, ctermfg, ctermbg, attr, guisp)$/;"	f
s:hi	plugged/vim-go/syntax/go.vim	/^function! s:hi()$/;"	f
s:highlightMatches	plugged/vim-go/autoload/go/lsp.vim	/^function! s:highlightMatches(errorMatches, warningMatches) abort$/;"	f
s:highlight_keys	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:highlight_keys(str)$/;"	f
s:highlight_name_for_change	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:highlight_name_for_change(text) abort$/;"	f
s:history	plugged/fzf.vim/plugin/fzf.vim	/^function! s:history(arg, extra, bang)$/;"	f
s:history_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_sink(type, lines)$/;"	f
s:history_source	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_source(type)$/;"	f
s:hoverHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:hoverHandler(next, msg) abort dict$/;"	f
s:hunk_op	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:hunk_op(op, ...)$/;"	f
s:hunk_re	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:hunk_re = '^@@ -\\(\\d\\+\\),\\?\\(\\d*\\) +\\(\\d\\+\\),\\?\\(\\d*\\) @@'$/;"	v
s:id	plugged/vim-go/autoload/ctrlp/decls.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:import_paths	plugged/vim-go/autoload/go/package.vim	/^let s:import_paths = {}$/;"	v
s:in_gopath	plugged/vim-go/autoload/go/package.vim	/^let s:in_gopath = {}$/;"	v
s:in_hunk_preview_window	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:in_hunk_preview_window()$/;"	f
s:incomingCallsHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:incomingCallsHandler(next, msg) abort dict$/;"	f
s:indent	plugged/vim-gitgutter/test/runner.vim	/^let s:indent = ''$/;"	v
s:indent	plugged/vim-gitgutter/test/runner.vim	/^let s:indent = max(map(copy(s:tests), {_, val -> len(FriendlyName(val))}))$/;"	v
s:indexes	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:indexes = {}$/;"	v
s:infer_properties	autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
s:info	plugged/vim-go/autoload/go/guru.vim	/^function! s:info(exit_val, output, mode)$/;"	f
s:info	plugged/vim-go/autoload/go/lsp.vim	/^function! s:info(show, msg) abort dict$/;"	f
s:infoDefinitionHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:infoDefinitionHandler(next, showstatus, msg) abort dict$/;"	f
s:infoFromHoverContent	plugged/vim-go/autoload/go/lsp.vim	/^function! s:infoFromHoverContent(content) abort$/;"	f
s:initial_go_path	plugged/vim-go/autoload/go/path.vim	/^let s:initial_go_path = ""$/;"	v
s:inject_snippet	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:inject_snippet(line)$/;"	f
s:install	autoload/plug.vim	/^function! s:install(force, names)$/;"	f
s:interface_list	plugged/vim-go/autoload/go/impl.vim	/^function! s:interface_list(pkg) abort$/;"	f
s:isReady	plugged/vim-go/autoload/go/debug.vim	/^function! s:isReady()$/;"	f
s:is_added	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_added(from_count, to_count) abort$/;"	f
s:is_file_buffer	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:is_file_buffer(bufnr) abort$/;"	f
s:is_local_plug	autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
s:is_managed	autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
s:is_modified	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_modified(from_count, to_count) abort$/;"	f
s:is_modified_and_added	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_modified_and_added(from_count, to_count) abort$/;"	f
s:is_modified_and_removed	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_modified_and_removed(from_count, to_count) abort$/;"	f
s:is_preview_window_open	autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
s:is_removed	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_removed(from_count, to_count) abort$/;"	f
s:is_updated	autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
s:is_win	autoload/plug.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	plugged/fzf.vim/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	plugged/fzf/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:issuebody	plugged/vim-go/autoload/go/issue.vim	/^function! s:issuebody() abort$/;"	f
s:italic	plugged/nord-vim/colors/nord.vim	/^  let s:italic = ""$/;"	v
s:italic	plugged/nord-vim/colors/nord.vim	/^let s:italic = "italic,"$/;"	v
s:italicize_comments	plugged/nord-vim/colors/nord.vim	/^    let s:italicize_comments = s:italic$/;"	v
s:italicize_comments	plugged/nord-vim/colors/nord.vim	/^let s:italicize_comments = ""$/;"	v
s:item_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:item_pattern = s:file_commit_pattern . '\\|^@@'$/;"	v
s:job_abort	autoload/plug.vim	/^function! s:job_abort()$/;"	f
s:job_handler	autoload/plug.vim	/^function! s:job_handler(job_id, data, event) abort$/;"	f
s:job_id	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:job_id(job)$/;"	f
s:jobs	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^let s:jobs = {}$/;"	v
s:jump	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump(t, w)$/;"	f
s:jump_to_declaration_cb	plugged/vim-go/autoload/go/def.vim	/^function! s:jump_to_declaration_cb(mode, bin_name, job, exit_status, data) abort dict$/;"	f
s:key_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:key_sink(line)$/;"	f
s:known_files	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_files = []$/;"	v
s:known_projects	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_projects = {}$/;"	v
s:last_status	plugged/vim-go/autoload/go/statusline.vim	/^let s:last_status = ""$/;"	v
s:last_time	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:last_time = reltime()$/;"	v
s:last_times	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:last_times = {}$/;"	v
s:last_wildignores	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:last_wildignores = ''$/;"	v
s:lastline	autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
s:launcher	plugged/fzf/plugin/fzf.vim	/^  let s:launcher = '%s'$/;"	v
s:launcher	plugged/fzf/plugin/fzf.vim	/^  let s:launcher = function('s:xterm_launcher')$/;"	v
s:layout_keys	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:layout_keys = ['window', 'up', 'down', 'left', 'right']$/;"	v
s:layout_keys	plugged/fzf/plugin/fzf.vim	/^let s:layout_keys = ['window', 'tmux', 'up', 'down', 'left', 'right']$/;"	v
s:lcs	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:lcs(s1, s2)$/;"	f
s:line_adjustment_for_current_hunk	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:line_adjustment_for_current_hunk() abort$/;"	f
s:line_handler	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:line_handler(lines)$/;"	f
s:linechars	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:linechars(pattern) abort$/;"	f
s:lineinfile	plugged/vim-go/autoload/go/lsp.vim	/^function! s:lineinfile(fname, line) abort$/;"	f
s:lines	autoload/plug.vim	/^function! s:lines(msg)$/;"	f
s:lint_job	plugged/vim-go/autoload/go/lint.vim	/^function! s:lint_job(metalinter, args, bang, autosave)$/;"	f
s:list_breakpoints	plugged/vim-go/autoload/go/debug.vim	/^function! s:list_breakpoints()$/;"	f
s:list_goroutines_handler	plugged/vim-go/autoload/go/debug.vim	/^function s:list_goroutines_handler(currentGoroutineID, check_errors, res) abort$/;"	f
s:listtype	plugged/vim-go/autoload/go/list.vim	/^function! s:listtype(listtype) abort$/;"	f
s:loaded	autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded_names	autoload/plug.vim	/^function! s:loaded_names()$/;"	f
s:lod	autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
s:lod_cmd	autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
s:lod_ft	autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
s:lod_map	autoload/plug.vim	/^function! s:lod_map(map, names, prefix)$/;"	f
s:log	autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
s:log	plugged/vim-go/autoload/go/lsp.vim	/^let s:log = []$/;"	v
s:log4	autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
s:logWarning	plugged/nord-vim/colors/nord.vim	/^function! s:logWarning(msg)$/;"	f
s:log_diff_context	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:log_diff_context = '{"filename": fugitive#Find(v:val . from, a:dir), "lnum": get(offsets, /;"	v
s:log_file	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:log_file    = s:plugin_dir.'gitgutter.log'$/;"	v
s:logger	plugged/vim-go/autoload/go/debug.vim	/^function! s:logger(prefix, ch, msg) abort$/;"	f
s:logmessages	plugged/vim-go/scripts/runtest.vim	/^function! s:logmessages() abort$/;"	f
s:logpos	autoload/plug.vim	/^function! s:logpos(name)$/;"	f
s:logs	plugged/vim-go/scripts/runtest.vim	/^let s:logs = []$/;"	v
s:lpad	autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
s:lspfactory	plugged/vim-go/autoload/go/lsp.vim	/^let s:lspfactory = {}$/;"	v
s:lspfactory.get	plugged/vim-go/autoload/go/lsp.vim	/^function! s:lspfactory.get() dict abort$/;"	f
s:lspfactory.reset	plugged/vim-go/autoload/go/lsp.vim	/^function! s:lspfactory.reset() dict abort$/;"	f
s:mac_gui	autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:manual_update_tags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:manual_update_tags(bang) abort$/;"	f
s:mapargs	plugged/vim-go/autoload/go/debug.vim	/^  let s:mapargs = {}$/;"	v
s:mark_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:mark_sink(lines)$/;"	f
s:matchaddpos	plugged/vim-go/autoload/go/util.vim	/^function! s:matchaddpos(group, pos) abort$/;"	f
s:me	autoload/plug.vim	/^let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:merge_heads	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:merge_heads = ['MERGE_HEAD', 'REBASE_HEAD', 'CHERRY_PICK_HEAD', 'REVERT_HEAD']$/;"	v
s:merge_opts	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:merge_opts(dict, eopts)$/;"	f
s:message	plugged/vim-go/autoload/go/debug.vim	/^function! s:message(buf, data) abort$/;"	f
s:messages	plugged/vim-gitgutter/test/runner.vim	/^let s:messages = []$/;"	v
s:metalinterautosavecomplete	plugged/vim-go/autoload/go/lint.vim	/^function! s:metalinterautosavecomplete(metalinter, filepath, job, exit_code, messages)$/;"	f
s:metalintercmd	plugged/vim-go/autoload/go/lint.vim	/^function! s:metalintercmd(metalinter, haslinter)$/;"	f
s:min_version	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:min_version = '0.23.0'$/;"	v
s:module	plugged/vim-go/autoload/go/package.vim	/^function! s:module() abort$/;"	f
s:names	autoload/plug.vim	/^function! s:names(...)$/;"	f
s:nbs	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:nbs = nr2char(0x2007)$/;"	v
s:neocb	plugged/vim-go/autoload/go/job.vim	/^function! s:neocb(mode, ch, buf, data, callback)$/;"	f
s:neooptions	plugged/vim-go/autoload/go/job.vim	/^function! s:neooptions(options)$/;"	f
s:newHandlerState	plugged/vim-go/autoload/go/lsp.vim	/^function! s:newHandlerState(statustype) abort$/;"	f
s:new_log_session	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:new_log_session = 1$/;"	v
s:new_window	autoload/plug.vim	/^function! s:new_window()$/;"	f
s:newlsp	plugged/vim-go/autoload/go/lsp.vim	/^function! s:newlsp() abort$/;"	f
s:next_sign_id	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:next_sign_id() abort$/;"	f
s:next_sign_id	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:next_sign_id  = s:first_sign_id$/;"	v
s:nomodeline	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' :/;"	v
s:nomodeline	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' :/;"	v
s:nomodeline	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' :/;"	v
s:noop	plugged/vim-go/autoload/go/debug.vim	/^function s:noop(...) abort$/;"	f
s:noop	plugged/vim-go/autoload/go/lsp.vim	/^function! s:noop(...) abort$/;"	f
s:noop	plugged/vim-go/autoload/go/util.vim	/^function! s:noop(...) abort dict$/;"	f
s:noop	plugged/vim-go/plugin/go.vim	/^function! s:noop(...) abort$/;"	f
s:nord0	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord0 = ["#2E3440", "NONE"]$/;"	v
s:nord0_gui	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord0_gui = "#2E3440"$/;"	v
s:nord0_gui	plugged/nord-vim/colors/nord.vim	/^let s:nord0_gui = "#2E3440"$/;"	v
s:nord0_term	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord0_term = "NONE"$/;"	v
s:nord1	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord1 = ["#3B4252", 0]$/;"	v
s:nord10	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord10 = ["#5E81AC", 12]$/;"	v
s:nord10_gui	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord10_gui = "#5E81AC"$/;"	v
s:nord10_gui	plugged/nord-vim/colors/nord.vim	/^let s:nord10_gui = "#5E81AC"$/;"	v
s:nord10_term	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord10_term = "12"$/;"	v
s:nord10_term	plugged/nord-vim/colors/nord.vim	/^let s:nord10_term = "12"$/;"	v
s:nord11	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord11 = ["#BF616A", 1]$/;"	v
s:nord11_gui	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord11_gui = "#BF616A"$/;"	v
s:nord11_gui	plugged/nord-vim/colors/nord.vim	/^let s:nord11_gui = "#BF616A"$/;"	v
s:nord11_term	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord11_term = "1"$/;"	v
s:nord11_term	plugged/nord-vim/colors/nord.vim	/^let s:nord11_term = "1"$/;"	v
s:nord12	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord12 = ["#D08770", 11]$/;"	v
s:nord12_gui	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord12_gui = "#D08770"$/;"	v
s:nord12_gui	plugged/nord-vim/colors/nord.vim	/^let s:nord12_gui = "#D08770"$/;"	v
s:nord12_term	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord12_term = "11"$/;"	v
s:nord12_term	plugged/nord-vim/colors/nord.vim	/^let s:nord12_term = "11"$/;"	v
s:nord13	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord13 = ["#EBCB8B", 3]$/;"	v
s:nord13_gui	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord13_gui = "#EBCB8B"$/;"	v
s:nord13_gui	plugged/nord-vim/colors/nord.vim	/^let s:nord13_gui = "#EBCB8B"$/;"	v
s:nord13_term	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord13_term = "3"$/;"	v
s:nord13_term	plugged/nord-vim/colors/nord.vim	/^let s:nord13_term = "3"$/;"	v
s:nord14	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord14 = ["#A3BE8C", 2]$/;"	v
s:nord14_gui	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord14_gui = "#A3BE8C"$/;"	v
s:nord14_gui	plugged/nord-vim/colors/nord.vim	/^let s:nord14_gui = "#A3BE8C"$/;"	v
s:nord14_term	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord14_term = "2"$/;"	v
s:nord14_term	plugged/nord-vim/colors/nord.vim	/^let s:nord14_term = "2"$/;"	v
s:nord15	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord15 = ["#B48EAD", 5]$/;"	v
s:nord15_gui	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord15_gui = "#B48EAD"$/;"	v
s:nord15_gui	plugged/nord-vim/colors/nord.vim	/^let s:nord15_gui = "#B48EAD"$/;"	v
s:nord15_term	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord15_term = "5"$/;"	v
s:nord15_term	plugged/nord-vim/colors/nord.vim	/^let s:nord15_term = "5"$/;"	v
s:nord1_gui	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord1_gui = "#3B4252"$/;"	v
s:nord1_gui	plugged/nord-vim/colors/nord.vim	/^let s:nord1_gui = "#3B4252"$/;"	v
s:nord1_term	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord1_term = "0"$/;"	v
s:nord1_term	plugged/nord-vim/colors/nord.vim	/^let s:nord1_term = "0"$/;"	v
s:nord2	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord2 = ["#434C5E", "NONE"]$/;"	v
s:nord2_gui	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord2_gui = "#434C5E"$/;"	v
s:nord2_gui	plugged/nord-vim/colors/nord.vim	/^let s:nord2_gui = "#434C5E"$/;"	v
s:nord2_term	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord2_term = "NONE"$/;"	v
s:nord3	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord3 = ["#4C566A", 8]$/;"	v
s:nord3_gui	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord3_gui = "#4C566A"$/;"	v
s:nord3_gui	plugged/nord-vim/colors/nord.vim	/^let s:nord3_gui = "#4C566A"$/;"	v
s:nord3_gui_bright	plugged/nord-vim/colors/nord.vim	/^let s:nord3_gui_bright = "#616E88"$/;"	v
s:nord3_gui_brightened	plugged/nord-vim/colors/nord.vim	/^let s:nord3_gui_brightened = [$/;"	v
s:nord3_term	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord3_term = "8"$/;"	v
s:nord3_term	plugged/nord-vim/colors/nord.vim	/^let s:nord3_term = "8"$/;"	v
s:nord4	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord4 = ["#D8DEE9", "NONE"]$/;"	v
s:nord4_gui	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord4_gui = "#D8DEE9"$/;"	v
s:nord4_gui	plugged/nord-vim/colors/nord.vim	/^let s:nord4_gui = "#D8DEE9"$/;"	v
s:nord4_term	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord4_term = "NONE"$/;"	v
s:nord5	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord5 = ["#E5E9F0", 7]$/;"	v
s:nord5_gui	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord5_gui = "#E5E9F0"$/;"	v
s:nord5_gui	plugged/nord-vim/colors/nord.vim	/^let s:nord5_gui = "#E5E9F0"$/;"	v
s:nord5_term	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord5_term = "7"$/;"	v
s:nord5_term	plugged/nord-vim/colors/nord.vim	/^let s:nord5_term = "7"$/;"	v
s:nord6	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord6 = ["#ECEFF4", 15]$/;"	v
s:nord6_gui	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord6_gui = "#ECEFF4"$/;"	v
s:nord6_gui	plugged/nord-vim/colors/nord.vim	/^let s:nord6_gui = "#ECEFF4"$/;"	v
s:nord6_term	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord6_term = "15"$/;"	v
s:nord6_term	plugged/nord-vim/colors/nord.vim	/^let s:nord6_term = "15"$/;"	v
s:nord7	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord7 = ["#8FBCBB", 14]$/;"	v
s:nord7_gui	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord7_gui = "#8FBCBB"$/;"	v
s:nord7_gui	plugged/nord-vim/colors/nord.vim	/^let s:nord7_gui = "#8FBCBB"$/;"	v
s:nord7_term	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord7_term = "14"$/;"	v
s:nord7_term	plugged/nord-vim/colors/nord.vim	/^let s:nord7_term = "14"$/;"	v
s:nord8	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord8 = ["#88C0D0", 6]$/;"	v
s:nord8_gui	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord8_gui = "#88C0D0"$/;"	v
s:nord8_gui	plugged/nord-vim/colors/nord.vim	/^let s:nord8_gui = "#88C0D0"$/;"	v
s:nord8_term	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord8_term = "6"$/;"	v
s:nord8_term	plugged/nord-vim/colors/nord.vim	/^let s:nord8_term = "6"$/;"	v
s:nord9	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord9 = ["#81A1C1", 4]$/;"	v
s:nord9_gui	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord9_gui = "#81A1C1"$/;"	v
s:nord9_gui	plugged/nord-vim/colors/nord.vim	/^let s:nord9_gui = "#81A1C1"$/;"	v
s:nord9_term	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord9_term = "4"$/;"	v
s:nord9_term	plugged/nord-vim/colors/nord.vim	/^let s:nord9_term = "4"$/;"	v
s:nord_vim_version	plugged/nord-vim/autoload/airline/themes/nord.vim	/^let s:nord_vim_version="0.18.0"$/;"	v
s:nord_vim_version	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord_vim_version="0.18.0"$/;"	v
s:nord_vim_version	plugged/nord-vim/colors/nord.vim	/^let s:nord_vim_version="0.18.0"$/;"	v
s:normalize_durations	plugged/vim-go/autoload/go/test_test.vim	/^func! s:normalize_durations(str) abort$/;"	f
s:not_git_dir	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:not_git_dir(bufnr) abort$/;"	f
s:nowait	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:nowait = v:version >= 704 ? '<nowait>' : ''$/;"	v
s:nowait	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:nowait = v:version >= 704 ? '<nowait>' : ''$/;"	v
s:numericHighlightGroupInAssignment	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:numericHighlightGroupInAssignment(testname, value)$/;"	f
s:numericHighlightGroupInMultidimensionalSliceElement	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:numericHighlightGroupInMultidimensionalSliceElement(testname, value)$/;"	f
s:numericHighlightGroupInMultidimensionalSliceIndex	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:numericHighlightGroupInMultidimensionalSliceIndex(testname, first, second)$/;"	f
s:numericHighlightGroupInSliceElement	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:numericHighlightGroupInSliceElement(testname, value)$/;"	f
s:numericHighlightGroupInSliceIndex	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:numericHighlightGroupInSliceIndex(testname, value)$/;"	f
s:numericHighlightGroupInSliceSlicing	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:numericHighlightGroupInSliceSlicing(testname, from, to)$/;"	f
s:nvim	autoload/plug.vim	/^let s:nvim = has('nvim') && exists('*jobwait') && !s:is_win$/;"	v
s:nvim_job_exit_wrapper	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_exit_wrapper(real_cb, job, exit_code, event_type) abort$/;"	f
s:nvim_job_out_wrapper	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_out_wrapper(real_cb, job, lines, event_type) abort$/;"	f
s:obsolete	plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! s:obsolete(var)$/;"	f
s:obsolete_gitgutter_signs_to_remove	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:obsolete_gitgutter_signs_to_remove(bufnr, new_gitgutter_signs_line_numbers) abort$/;"	f
s:on_bufenter	plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! s:on_bufenter()$/;"	f
s:on_data	plugged/vim-go/autoload/go/debug.vim	/^function! s:on_data(ch, data, ...) dict abort$/;"	f
s:on_exit	plugged/vim-go/autoload/go/job.vim	/^function! s:on_exit(jobid, exitval, event) dict$/;"	f
s:on_exit	plugged/vim-go/autoload/go/term.vim	/^function! s:on_exit(job_id, exit_status, event) dict abort$/;"	f
s:on_exit_nvim	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_exit_nvim(_job_id, exit_code, _event) dict abort$/;"	f
s:on_exit_vim	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_exit_vim(channel) dict abort$/;"	f
s:on_stderr	plugged/vim-go/autoload/go/job.vim	/^function! s:on_stderr(mode, ch, data, event) dict$/;"	f
s:on_stderr_nvim	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stderr_nvim(_job_id, data, _event) dict abort$/;"	f
s:on_stderr_vim	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stderr_vim(channel, _data) dict abort$/;"	f
s:on_stdout	plugged/vim-go/autoload/go/job.vim	/^function! s:on_stdout(mode, ch, data, event) dict$/;"	f
s:on_stdout	plugged/vim-go/autoload/go/term.vim	/^function! s:on_stdout(job_id, data, event) dict abort$/;"	f
s:on_stdout_nvim	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stdout_nvim(_job_id, data, _event) dict abort$/;"	f
s:on_stdout_vim	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stdout_vim(_channel, data) dict abort$/;"	f
s:open	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:open(cmd, target)$/;"	f
s:open	plugged/fzf/plugin/fzf.vim	/^function! s:open(cmd, target)$/;"	f
s:open_hunk_preview_window	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:open_hunk_preview_window()$/;"	f
s:option	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:option(name)$/;"	f
s:orange	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:orange = '#c8ae9d'$/;"	v
s:out_cb	plugged/vim-go/autoload/go/debug.vim	/^function! s:out_cb(ch, msg) abort$/;"	f
s:out_cb	plugged/vim-go/autoload/go/term.vim	/^func! s:out_cb(channel, msg) dict abort$/;"	f
s:output	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:output(text)$/;"	f
s:p	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.inactive.left =  [ [ s:nord1, s:nord8 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.inactive.middle = g:nord_uniform_status_lines == 0 ? [ [ s:nord5, s:nord1 ] ] : [ [ s:no/;"	v
s:p	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.inactive.right = [ [ s:nord5, s:nord1 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.insert.left = [ [ s:nord1, s:nord6 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.error = [ [ s:nord1, s:nord11 ] ]$/;"	v
s:p	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.left = [ [ s:nord1, s:nord8 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.middle = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.right = [ [ s:nord5, s:nord1 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.warning = [ [ s:nord1, s:nord13 ] ]$/;"	v
s:p	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.replace.left = [ [ s:nord1, s:nord13 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.left = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.middle = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.right = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.tabsel = [ [ s:nord1, s:nord8 ] ]$/;"	v
s:p	plugged/nord-vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.visual.left = [ [ s:nord1, s:nord7 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p = {'normal':{}, 'inactive':{}, 'insert':{}, 'replace':{}, 'visual':{}, 'tabline':{}}$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.inactive.left =  [ [ s:gray3, s:gray2 ], [ s:gray3, s:gray2 ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.inactive.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.inactive.right = [ [ s:gray3, s:gray2 ], [ s:gray3, s:gray2 ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.insert.left = [ [ s:bg, s:fg, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.insert.middle = [ [ s:fg, s:gray2 ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.insert.right = [ [ s:bg, s:fg ], [ s:fg, s:gray1 ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.normal.error = [ [ s:bg, s:red ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.normal.left = [ [ s:bg, s:green, 'bold' ], [ s:fg, s:gray1 ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.normal.middle = [ [ s:fg, s:gray2 ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.normal.right = [ [s:bg, s:green ], [ s:fg, s:gray1 ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.normal.warning = [ [ s:bg, s:orange ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.replace.left = [ [ s:bg, s:red, 'bold' ], [ s:fg, s:gray1 ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.replace.middle = [ [ s:fg, s:gray2 ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.replace.right = [ [ s:bg, s:red ], [ s:fg, s:gray1 ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.tabline.left = [ [ s:fg, s:gray1 ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.tabline.middle = [ [ s:bg, s:bg ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.tabline.right = [ [ s:bg, s:red ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.tabline.tabsel = [ [ s:bg, s:green ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.visual.left = [ [ s:bg, s:orange, 'bold' ], [ s:red2, s:gray1 ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.visual.middle = [ [ s:fg, s:gray2 ] ]$/;"	v
s:p	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:p.visual.right = [ [ s:bg, s:orange ], [ s:red2, s:gray1 ] ]$/;"	v
s:package	plugged/vim-go/autoload/go/debug.vim	/^function! s:package(args)$/;"	f
s:packages	plugged/vim-go/plugin/go.vim	/^let s:packages = {$/;"	v
s:parse_errors	plugged/vim-go/autoload/go/mod.vim	/^function! s:parse_errors(filename, content) abort$/;"	f
s:parse_errors	plugged/vim-go/autoload/go/rename.vim	/^function s:parse_errors(exit_val, bang, out)$/;"	f
s:parse_guru_output	plugged/vim-go/autoload/go/guru.vim	/^function! s:parse_guru_output(exit_val, output, title) abort$/;"	f
s:parse_options	autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
s:parse_output	plugged/vim-go/autoload/go/calls.vim	/^function! s:parse_output(mode, output) abort$/;"	f
s:parse_output	plugged/vim-go/autoload/go/implements.vim	/^function! s:parse_output(exit_val, output, title) abort$/;"	f
s:parse_output	plugged/vim-go/autoload/go/referrers.vim	/^function! s:parse_output(exit_val, output, title) abort$/;"	f
s:part_of_diff	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:part_of_diff(hunk_diff, first, last)$/;"	f
s:path	autoload/plug.vim	/^  function! s:path(path)$/;"	f
s:path_subcommands	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:path_subcommands = {}$/;"	v
s:paths	plugged/vim-go/autoload/go/package.vim	/^function! s:paths() abort$/;"	f
s:pluck	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:pluck(dict, key, default)$/;"	f
s:plug_buf	autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plug_window_exists	autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
s:plugin_dir	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:plugin_dir  = expand('<sfile>:p:h:h:h').'\/'$/;"	v
s:populate_hunk_preview_window	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:populate_hunk_preview_window(header, body)$/;"	f
s:popup	plugged/fzf/plugin/fzf.vim	/^function! s:popup(opts) abort$/;"	f
s:popup_support	plugged/fzf/plugin/fzf.vim	/^function! s:popup_support()$/;"	f
s:position	plugged/vim-go/autoload/go/lsp/message.vim	/^function! s:position(line, col) abort$/;"	f
s:prepare	autoload/plug.vim	/^function! s:prepare(...)$/;"	f
s:prepareCallHierarchyHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:prepareCallHierarchyHandler(next, msg) abort dict$/;"	f
s:prepare_env	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:prepare_env = {$/;"	v
s:prepend_opts	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:prepend_opts(dict, eopts)$/;"	f
s:present	plugged/fzf/plugin/fzf.vim	/^function! s:present(dict, ...)$/;"	f
s:preserveerrors	plugged/vim-go/autoload/go/lint.vim	/^function! s:preserveerrors(autosave, listtype) abort$/;"	f
s:preview	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:preview(hunk_diff)$/;"	f
s:preview_bufnr	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^let s:preview_bufnr = 0$/;"	v
s:preview_commit	autoload/plug.vim	/^function! s:preview_commit()$/;"	f
s:process_added	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_added(modifications, from_count, to_count, to_line) abort$/;"	f
s:process_hunk	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_hunk(bufnr, hunk) abort$/;"	f
s:process_modified	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_modified(modifications, from_count, to_count, to_line) abort$/;"	f
s:process_modified_and_added	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_modified_and_added(modifications, from_count, to_count, to_line) abort$/;"	f
s:process_modified_and_removed	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_modified_and_removed(modifications, from_count, to_count, to_line) abort$/;"	f
s:process_options_file	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:process_options_file(proj_dir, path) abort$/;"	f
s:process_removed	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_removed(modifications, from_count, to_count, to_line) abort$/;"	f
s:progress_bar	autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
s:progress_opt	autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
s:projectdir	plugged/vim-go/autoload/gotest.vim	/^func! s:projectdir(path) abort$/;"	f
s:pushd	plugged/fzf/plugin/fzf.vim	/^function! s:pushd(dict)$/;"	f
s:reap	autoload/plug.vim	/^function! s:reap(name)$/;"	f
s:rebase_abbrevs	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:rebase_abbrevs = {$/;"	v
s:receiverHighlightGroup	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:receiverHighlightGroup(testname, value)$/;"	f
s:red	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:red = '#e05252'$/;"	v
s:red2	plugged/vim-two-firewatch/autoload/lightline/colorscheme/twofirewatch.vim	/^  let s:red2 = '#e06c75'$/;"	v
s:reduce_line	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:reduce_line(lines)$/;"	f
s:ref_header	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:ref_header = '\\%(Merge\\|Rebase\\|Upstream\\|Pull\\|Push\\)'$/;"	v
s:reflect_kind	plugged/vim-go/autoload/go/debug.vim	/^function! s:reflect_kind(k)$/;"	f
s:register	plugged/vim-go/plugin/go.vim	/^function! s:register()$/;"	f
s:regress_bar	autoload/plug.vim	/^function! s:regress_bar()$/;"	f
s:reload	autoload/plug.vim	/^function! s:reload()$/;"	f
s:reload_changed	plugged/vim-go/autoload/go/rename.vim	/^function! s:reload_changed() abort$/;"	f
s:remote_headers	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:remote_headers = {}$/;"	v
s:remove_layout	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:remove_layout(opts)$/;"	f
s:remove_rtp	autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
s:remove_signs	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:remove_signs(bufnr, sign_ids, all_signs) abort$/;"	f
s:remove_triggers	autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
s:rename	plugged/vim-go/autoload/go/lsp.vim	/^function! s:rename(fname, line, col, newName, msg) abort dict$/;"	f
s:renameEvalReturnValue	plugged/vim-go/autoload/go/debug.vim	/^function! s:renameEvalReturnValue(key, val) abort$/;"	f
s:rename_job	plugged/vim-go/autoload/go/rename.vim	/^function s:rename_job(args)$/;"	f
s:reorg_rtp	autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
s:replace_filename	plugged/vim-go/autoload/go/fmt.vim	/^function! s:replace_filename(filename, content) abort$/;"	f
s:repo_bare	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_bare() dict abort$/;"	f
s:repo_config	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_config(name) dict abort$/;"	f
s:repo_dir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_dir(...) dict abort$/;"	f
s:repo_find	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_find(object) dict abort$/;"	f
s:repo_git_chomp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp(...) dict abort$/;"	f
s:repo_git_chomp_in_tree	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp_in_tree(...) dict abort$/;"	f
s:repo_git_command	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_command(...) dict abort$/;"	f
s:repo_head	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_head(...) dict abort$/;"	f
s:repo_prototype	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:repo_prototype = {}$/;"	v
s:repo_rev_parse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_rev_parse(rev) dict abort$/;"	f
s:repo_superglob	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_superglob(base) dict abort$/;"	f
s:repo_translate	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_translate(rev) dict abort$/;"	f
s:repo_tree	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_tree(...) dict abort$/;"	f
s:repo_user	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_user() dict abort$/;"	f
s:report	plugged/vim-go/scripts/runbench.vim	/^let s:report = execute('syntime report')$/;"	v
s:repos	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:repos = {}$/;"	v
s:requestComplete	plugged/vim-go/autoload/go/lsp.vim	/^function! s:requestComplete(ok) abort dict$/;"	f
s:reset_summary	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:reset_summary(bufnr) abort$/;"	f
s:reset_tick	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:reset_tick(bufnr) abort$/;"	f
s:restoreMappings	plugged/vim-go/autoload/go/debug.vim	/^function! s:restoreMappings() abort$/;"	f
s:restore_fold_state	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:restore_fold_state()$/;"	f
s:restore_mapping	plugged/vim-go/autoload/go/debug.vim	/^function! s:restore_mapping(maparg)$/;"	f
s:restore_shell	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:restore_shell() abort$/;"	f
s:restoremappingfor	plugged/vim-go/autoload/go/debug.vim	/^function! s:restoremappingfor(bufname) abort$/;"	f
s:resume_queue	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:resume_queue = []$/;"	v
s:retry	autoload/plug.vim	/^function! s:retry()$/;"	f
s:reverse_list	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:reverse_list(opts)$/;"	f
s:revert	autoload/plug.vim	/^function! s:revert()$/;"	f
s:rm_rf	autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
s:root_dirs	plugged/vim-go/autoload/go/impl.vim	/^function! s:root_dirs() abort$/;"	f
s:rpc_response	plugged/vim-go/autoload/go/debug.vim	/^function! s:rpc_response(check_errors, res) abort$/;"	f
s:rtp	autoload/plug.vim	/^  function! s:rtp(spec)$/;"	f
s:run_guru	plugged/vim-go/autoload/go/guru.vim	/^function! s:run_guru(args) abort$/;"	f
s:run_jobs	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:run_jobs = (exists('*job_start') || exists('*jobstart')) && exists('*bufwinid')$/;"	v
s:runerrorformat	plugged/vim-go/autoload/go/cmd.vim	/^function! s:runerrorformat()$/;"	f
s:runner_exe	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:runner_exe = '"' . gutentags#get_plat_file('update_tags') . '"'$/;"	v
s:sameIDsHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:sameIDsHandler(next, msg) abort dict$/;"	f
s:same_ids_highlight	plugged/vim-go/autoload/go/guru.vim	/^function! s:same_ids_highlight(exit_val, output, mode) abort$/;"	f
s:save_cpo	plugged/vim-go/autoload/unite/sources/decls.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	plugged/vim-go/compiler/go.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_fold_state	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:save_fold_state()$/;"	f
s:save_last_seen_change	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:save_last_seen_change(bufnr) abort$/;"	f
s:save_maparg_for	plugged/vim-go/autoload/go/debug.vim	/^function! s:save_maparg_for(bufname, lhs) abort$/;"	f
s:search_history_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:search_history_sink(lines)$/;"	f
s:section	autoload/plug.vim	/^function! s:section(flags)$/;"	f
s:section_commit_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:section_commit_pattern = s:section_pattern . '\\|^commit '$/;"	v
s:section_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:section_pattern = '^[A-Z][a-z][^:]*$'$/;"	v
s:separator	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:separator()$/;"	f
s:setDiagnostics	plugged/vim-go/autoload/go/lsp.vim	/^function! s:setDiagnostics(...) abort$/;"	f
s:set_fold_levels	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:set_fold_levels()$/;"	f
s:set_path_handler	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^let s:set_path_handler = {}$/;"	v
s:set_path_handler.err	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:set_path_handler.err(buffer) abort$/;"	f
s:set_path_handler.out	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:set_path_handler.out(buffer, path) abort$/;"	f
s:setretval	plugged/vim-go/autoload/go/promise.vim	/^function! s:setretval(val, timer) dict$/;"	f
s:setup_path	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:setup_path(bufnr, continuation)$/;"	f
s:setupproject	plugged/vim-go/autoload/gotest.vim	/^func! s:setupproject(dir, path) abort$/;"	f
s:shellesc	autoload/plug.vim	/^function! s:shellesc(arg)$/;"	f
s:shellesc	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:shellesc(arg) abort$/;"	f
s:shellesc_cmd	plugged/fzf/plugin/fzf.vim	/^function! s:shellesc_cmd(arg)$/;"	f
s:shortpath	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:shortpath()$/;"	f
s:shortpath	plugged/fzf/plugin/fzf.vim	/^function! s:shortpath()$/;"	f
s:show_errors	plugged/vim-go/autoload/go/mod.vim	/^function! s:show_errors(errors) abort$/;"	f
s:show_goroutines	plugged/vim-go/autoload/go/debug.vim	/^function! s:show_goroutines(currentGoroutineID, res) abort$/;"	f
s:show_stacktrace	plugged/vim-go/autoload/go/debug.vim	/^function! s:show_stacktrace(check_errors, res) abort$/;"	f
s:show_variables	plugged/vim-go/autoload/go/debug.vim	/^function! s:show_variables() abort$/;"	f
s:sign_getplaced	plugged/vim-go/autoload/go/debug.vim	/^function! s:sign_getplaced() abort$/;"	f
s:sign_place	plugged/vim-go/autoload/go/debug.vim	/^function! s:sign_place(id, expr, lnum) abort$/;"	f
s:sign_unplace	plugged/vim-go/autoload/go/debug.vim	/^function! s:sign_unplace(id, file) abort$/;"	f
s:sink	plugged/vim-go/autoload/fzf/decls.vim	/^function! s:sink(str) abort$/;"	f
s:snapshot	autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
s:sort_buffers	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:sort_buffers(...)$/;"	f
s:source	autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
s:source	plugged/vim-go/autoload/fzf/decls.vim	/^function! s:source(mode,...) abort$/;"	f
s:source	plugged/vim-go/autoload/unite/sources/decls.vim	/^let s:source = {$/;"	v
s:source.gather_candidates	plugged/vim-go/autoload/unite/sources/decls.vim	/^function! s:source.gather_candidates(args, context) abort$/;"	f
s:source.hooks.on_syntax	plugged/vim-go/autoload/unite/sources/decls.vim	/^function! s:source.hooks.on_syntax(args, context) abort$/;"	f
s:spawn	autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
s:split	plugged/fzf/plugin/fzf.vim	/^function! s:split(dict)$/;"	f
s:split	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:split(str, delimiter)$/;"	f
s:split_rtp	autoload/plug.vim	/^function! s:split_rtp()$/;"	f
s:splittable	plugged/fzf/plugin/fzf.vim	/^function! s:splittable(dict)$/;"	f
s:stack_cb	plugged/vim-go/autoload/go/debug.vim	/^function! s:stack_cb(res) abort$/;"	f
s:stage	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:stage(hunk_diff)$/;"	f
s:start	plugged/vim-go/autoload/go/job.vim	/^function! s:start(args) dict$/;"	f
s:start	plugged/vim-go/autoload/go/lsp.vim	/^function! s:start() abort dict$/;"	f
s:start_args	plugged/vim-go/autoload/go/debug.vim	/^  let s:start_args = []$/;"	v
s:start_cb	plugged/vim-go/autoload/go/debug.vim	/^function! s:start_cb() abort$/;"	f
s:started	plugged/vim-go/scripts/runtest.vim	/^  let s:started = reltime()$/;"	v
s:state	plugged/vim-go/autoload/go/debug.vim	/^  let s:state = {$/;"	v
s:status	autoload/plug.vim	/^function! s:status()$/;"	f
s:status_load	autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
s:status_update	autoload/plug.vim	/^function! s:status_update() range$/;"	f
s:statuses	plugged/vim-go/autoload/go/statusline.vim	/^let s:statuses = {}$/;"	v
s:stop	plugged/vim-go/autoload/go/debug.vim	/^function! s:stop() abort$/;"	f
s:strip	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:strip(str)$/;"	f
s:strip_trailing_new_line	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:strip_trailing_new_line(line) abort$/;"	f
s:strlen	plugged/vim-go/autoload/go/lsp/lsp.vim	/^function! s:strlen(str) abort$/;"	f
s:sub	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
s:subcommands_before_2_5	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:subcommands_before_2_5 = [$/;"	v
s:substituteLocalPath	plugged/vim-go/autoload/go/debug.vim	/^function! s:substituteLocalPath(path) abort$/;"	f
s:substitutePath	plugged/vim-go/autoload/go/debug.vim	/^function! s:substitutePath(path, substitutions) abort$/;"	f
s:substituteRemotePath	plugged/vim-go/autoload/go/debug.vim	/^function! s:substituteRemotePath(path) abort$/;"	f
s:supports_star	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:supports_star = v:version > 703 || (v:version == 703 && has("patch596"))$/;"	v
s:switch_in	autoload/plug.vim	/^function! s:switch_in()$/;"	f
s:switch_out	autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
s:sync_guru	plugged/vim-go/autoload/go/guru.vim	/^function! s:sync_guru(args) abort$/;"	f
s:syntax	autoload/plug.vim	/^function! s:syntax()$/;"	f
s:syntax_accent	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:syntax_accent           = '447EBB'$/;"	v
s:syntax_accent	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:syntax_accent           = '56b6c2'$/;"	v
s:syntax_bg	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:syntax_bg               = '282c34'$/;"	v
s:syntax_bg	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:syntax_bg               = 'FAF8F5'$/;"	v
s:syntax_color_added	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:syntax_color_added    = '43d08a'$/;"	v
s:syntax_color_modified	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:syntax_color_modified = 'e0c285'$/;"	v
s:syntax_color_removed	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:syntax_color_removed  = 'e05252'$/;"	v
s:syntax_color_renamed	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:syntax_color_renamed  = '33a0ff'$/;"	v
s:syntax_cursor_line	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:syntax_cursor_line      = '2c323c'$/;"	v
s:syntax_cursor_line	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:syntax_cursor_line      = 'F3EFE7'$/;"	v
s:syntax_fg	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:syntax_fg               = s:uno_2$/;"	v
s:syntax_fold_bg	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:syntax_fold_bg          = '5c6370'$/;"	v
s:syntax_fold_bg	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:syntax_fold_bg          = 'd1cec7'$/;"	v
s:syntax_gutter	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:syntax_gutter           = '636d83'$/;"	v
s:syntax_gutter	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:syntax_gutter           = 'EAE1D2'$/;"	v
s:syntax_selection	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:syntax_selection        = '3e4452'$/;"	v
s:syntax_selection	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:syntax_selection        = 'E5DDCB'$/;"	v
s:system	autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
s:system	plugged/vim-go/autoload/go/util.vim	/^function! s:system(cmd, ...) abort$/;"	f
s:system_chomp	autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
s:tags_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:tags_sink(lines)$/;"	f
s:temp_buffer	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:temp_buffer = tempname()$/;"	v
s:temp_files	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:temp_files = {}$/;"	v
s:temp_from	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:temp_from = tempname()$/;"	v
s:temp_scripts	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:temp_scripts = {}$/;"	v
s:templatepath	plugged/vim-go/autoload/go/issue.vim	/^let s:templatepath = go#util#Join(expand('<sfile>:p:h:h:h'), '.github', 'ISSUE_TEMPLATE.md')$/;"	v
s:term_marker	plugged/fzf/plugin/fzf.vim	/^  let s:term_marker = ";#FZF"$/;"	v
s:term_marker	plugged/fzf/plugin/fzf.vim	/^  let s:term_marker = '&::FZF'$/;"	v
s:test	plugged/vim-go/autoload/go/test_test.vim	/^func! s:test(file, expected, ...) abort$/;"	f
s:test_job	plugged/vim-go/autoload/go/test.vim	/^function! s:test_job(cmd, args) abort$/;"	f
s:test_repo	plugged/vim-gitgutter/test/test_gitgutter.vim	/^let s:test_repo   = s:current_dir.'\/test-repo'$/;"	v
s:testfile	plugged/vim-go/scripts/runtest.vim	/^let s:testfile = expand('%:t')$/;"	v
s:tests	plugged/vim-gitgutter/test/runner.vim	/^  let s:tests = filter(s:tests, 'v:val =~ argv(1)')$/;"	v
s:tests	plugged/vim-gitgutter/test/runner.vim	/^let s:tests = split(substitute(@q, 'function \\(\\k*()\\)', '\\1', 'g'))$/;"	v
s:tests	plugged/vim-go/scripts/runtest.vim	/^let s:tests = split(substitute(@q, 'function \\(\\k\\+()\\)', '\\1', 'g'))$/;"	v
s:textDocumentPositionParams	plugged/vim-go/autoload/go/lsp/message.vim	/^function! s:textDocumentPositionParams(fname, line, col) abort$/;"	f
s:textEditLess	plugged/vim-go/autoload/go/lsp.vim	/^function! s:textEditLess(left, right) abort$/;"	f
s:throw	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:throw(string) abort$/;"	f
s:tick	autoload/plug.vim	/^function! s:tick()$/;"	f
s:timer_id	plugged/vim-go/autoload/go/auto.vim	/^let s:timer_id = 0$/;"	v
s:timer_id	plugged/vim-go/autoload/go/statusline.vim	/^let s:timer_id = 0$/;"	v
s:timer_restart	plugged/vim-go/autoload/go/auto.vim	/^function! s:timer_restart()$/;"	f
s:timer_start	plugged/vim-go/autoload/go/auto.vim	/^function! s:timer_start()$/;"	f
s:timer_stop	plugged/vim-go/autoload/go/auto.vim	/^function! s:timer_stop()$/;"	f
s:tmux_enabled	plugged/fzf/plugin/fzf.vim	/^function! s:tmux_enabled()$/;"	f
s:to_a	autoload/plug.vim	/^function! s:to_a(v)$/;"	f
s:to_s	autoload/plug.vim	/^function! s:to_s(v)$/;"	f
s:toggle	plugged/vim-go/autoload/go/coverage.vim	/^let s:toggle = 0$/;"	v
s:total_elapsed_time	plugged/vim-go/scripts/runtest.vim	/^let s:total_elapsed_time = substitute(reltimestr(reltime(s:total_started)), '^\\s*\\(.\\{-}\\)\\/;"	v
s:total_started	plugged/vim-go/scripts/runtest.vim	/^let s:total_started = reltime()$/;"	v
s:trees	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:trees = {}$/;"	v
s:trigger_gitgutter	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:trigger_gitgutter()$/;"	f
s:triggers	autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:trim	autoload/plug.vim	/^function! s:trim(str)$/;"	f
s:typeDefinitionHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:typeDefinitionHandler(next, msg) abort dict$/;"	f
s:unc_path	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:unc_path(bufnr)$/;"	f
s:underline	plugged/nord-vim/colors/nord.vim	/^  let s:underline = "NONE,"$/;"	v
s:underline	plugged/nord-vim/colors/nord.vim	/^let s:underline = "underline,"$/;"	v
s:undo	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:undo(hunk_diff)$/;"	f
s:uniq	plugged/vim-go/autoload/go/impl.vim	/^  function! s:uniq(list)$/;"	f
s:unix_redir	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:uno_1	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:uno_1 = '2d2006'$/;"	v
s:uno_1	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:uno_1 = 'd6e9ff'$/;"	v
s:uno_2	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:uno_2 = '896724'$/;"	v
s:uno_2	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:uno_2 = 'abb2bf'$/;"	v
s:uno_3	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:uno_3 = '6e88a6'$/;"	v
s:uno_3	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:uno_3 = 'B29762'$/;"	v
s:uno_4	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:uno_4 = '55606d'$/;"	v
s:uno_4	plugged/vim-two-firewatch/colors/two-firewatch.vim	/^    let s:uno_4 = 'B6ad9a'$/;"	v
s:unset	plugged/vim-go/autoload/go/util.vim	/^function! s:unset(name) abort$/;"	f
s:update	autoload/plug.vim	/^function! s:update(force, names)$/;"	f
s:update_breakpoint	plugged/vim-go/autoload/go/debug.vim	/^function! s:update_breakpoint(res) abort$/;"	f
s:update_finish	autoload/plug.vim	/^function! s:update_finish()$/;"	f
s:update_goroutines	plugged/vim-go/autoload/go/debug.vim	/^function! s:update_goroutines() abort$/;"	f
s:update_goroutines_state_handler	plugged/vim-go/autoload/go/debug.vim	/^function! s:update_goroutines_state_handler(check_errors, res) abort$/;"	f
s:update_impl	autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
s:update_in_progress	plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_in_progress[module] = []$/;"	v
s:update_in_progress	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_in_progress = {}$/;"	v
s:update_python	autoload/plug.vim	/^function! s:update_python()$/;"	f
s:update_queue	plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_queue[module] = []$/;"	v
s:update_queue	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_queue = {}$/;"	v
s:update_ruby	autoload/plug.vim	/^function! s:update_ruby()$/;"	f
s:update_stacktrace	plugged/vim-go/autoload/go/debug.vim	/^function! s:update_stacktrace() abort$/;"	f
s:update_tags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:update_tags(bufno, module, write_mode, queue_mode) abort$/;"	f
s:update_variables	plugged/vim-go/autoload/go/debug.vim	/^function! s:update_variables() abort$/;"	f
s:update_vim	autoload/plug.vim	/^function! s:update_vim()$/;"	f
s:upgrade	autoload/plug.vim	/^function! s:upgrade()$/;"	f
s:upgrade_specs	autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
s:upsert_new_gitgutter_signs	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:upsert_new_gitgutter_signs(bufnr, modified_lines) abort$/;"	f
s:use_known_shell	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:use_known_shell() abort$/;"	f
s:use_sh	plugged/fzf/plugin/fzf.vim	/^function! s:use_sh()$/;"	f
s:useful_diff_colours	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:useful_diff_colours()$/;"	f
s:validate_layout	plugged/fzf/plugin/fzf.vim	/^function! s:validate_layout(layout)$/;"	f
s:var	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:var = '\\%(<\\%(cword\\|cWORD\\|cexpr\\|cfile\\|sfile\\|slnum\\|afile\\|abuf\\|amatch' . (/;"	v
s:vendordirs	plugged/vim-go/autoload/go/package.vim	/^function! s:vendordirs() abort$/;"	f
s:version_requirement	autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
s:versions	plugged/fzf/plugin/fzf.vim	/^let s:versions = {}$/;"	v
s:vim_version	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:vim_version()$/;"	f
s:vimdir	plugged/vim-go/autoload/go/lint_test.vim	/^func! s:vimdir()$/;"	f
s:vimwiki_hcolor_ctermfg	plugged/nord-vim/colors/nord.vim	/^  let s:vimwiki_hcolor_ctermfg = [s:nord7_term, s:nord8_term, s:nord9_term, s:nord10_term, s:nor/;"	v
s:vimwiki_hcolor_guifg	plugged/nord-vim/colors/nord.vim	/^  let s:vimwiki_hcolor_guifg = [s:nord7_gui, s:nord8_gui, s:nord9_gui, s:nord10_gui, s:nord14_gu/;"	v
s:warn	autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
s:warn	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:warn(message)$/;"	f
s:warn	plugged/fzf/plugin/fzf.vim	/^function! s:warn(msg)$/;"	f
s:warn_stale	plugged/vim-go/autoload/go/debug.vim	/^function! s:warn_stale(filename) abort$/;"	f
s:warn_when_stale	plugged/vim-go/autoload/go/debug.vim	/^function! s:warn_when_stale(filename) abort$/;"	f
s:warned	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:warned = 0$/;"	v
s:wide	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:wide = 120$/;"	v
s:wildignores_options_path	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:wildignores_options_path = ''$/;"	v
s:windows_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:windows_sink(line)$/;"	f
s:winid	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^let s:winid = 0$/;"	v
s:winjobarg	plugged/vim-go/autoload/go/job.vim	/^function! s:winjobarg(idx, val) abort$/;"	f
s:winshell	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:winshell() abort$/;"	f
s:winshell	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:winshell()$/;"	f
s:with_cd	autoload/plug.vim	/^function! s:with_cd(cmd, dir)$/;"	f
s:work	plugged/vim-go/autoload/go/promise_test.vim	/^func! s:work(val, timer)$/;"	f
s:workspaceFolder	plugged/vim-go/autoload/go/lsp/message.vim	/^function! s:workspaceFolder(key, val) abort$/;"	f
s:worktree_error	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:worktree_error = "core.worktree is required when using an external Git dir"$/;"	v
s:worktree_for_dir	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:worktree_for_dir = {}$/;"	v
s:wrap	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:wrap(name, opts, bang)$/;"	f
s:wrap_cmds	plugged/fzf/plugin/fzf.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
s:wrapper	plugged/vim-go/autoload/go/promise.vim	/^function! s:wrapper(fn, default, ...) dict$/;"	f
s:write_buffer	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:write_buffer(bufnr, file)$/;"	f
s:write_out	plugged/vim-go/autoload/go/tags.vim	/^func s:write_out(out) abort$/;"	f
s:write_triggered_update_tags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:write_triggered_update_tags(bufno) abort$/;"	f
s:xterm_launcher	plugged/fzf/plugin/fzf.vim	/^function! s:xterm_launcher()$/;"	f
s:yank_to_register	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:yank_to_register(data)$/;"	f
scan	plugged/fzf/src/matcher.go	/^func (m *Matcher) scan(request MatchRequest) (*Merger, bool) {$/;"	f	struct:fzf.Matcher	typeref:typename:(*Merger, bool)
scope	plugged/vim-go/test/parse.go	/^type scope int$/;"	t	package:html	typeref:typename:int
scoreGapExtension	plugged/fzf/src/algo/algo.go	/^	scoreGapExtension = -1$/;"	c	package:algo
scoreGapStart	plugged/fzf/src/algo/algo.go	/^	scoreGapStart     = -3$/;"	c	package:algo
scoreMatch	plugged/fzf/src/algo/algo.go	/^	scoreMatch        = 16$/;"	c	package:algo
scripting	plugged/vim-go/test/parse.go	/^	scripting, framesetOK bool$/;"	m	struct:html.parser	typeref:typename:bool
scroll	plugged/fzf/src/options.go	/^	scroll      string$/;"	m	struct:fzf.previewOpts	typeref:typename:string
scrollOff	plugged/fzf/src/terminal.go	/^	scrollOff    int$/;"	m	struct:fzf.Terminal	typeref:typename:int
scrollable	plugged/fzf/src/terminal.go	/^	scrollable bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
searchRequest	plugged/fzf/src/terminal.go	/^type searchRequest struct {$/;"	s	package:fzf
selectItem	plugged/fzf/src/terminal.go	/^func (t *Terminal) selectItem(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
selectItemChanged	plugged/fzf/src/terminal.go	/^func (t *Terminal) selectItemChanged(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
selectScope	plugged/vim-go/test/parse.go	/^	selectScope$/;"	c	package:html
select_count	plugged/fzf/test/test_go.rb	/^          def select_count$/;"	f	method:Tmux.until
selected	plugged/fzf/src/terminal.go	/^	selected     map[int32]selectedItem$/;"	m	struct:fzf.Terminal	typeref:typename:map[int32]selectedItem
selected	plugged/fzf/src/terminal.go	/^	selected bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
selectedItem	plugged/fzf/src/terminal.go	/^type selectedItem struct {$/;"	s	package:fzf
send_keys	plugged/fzf/test/test_go.rb	/^  def send_keys(*args)$/;"	f	class:Tmux
setBg	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) setBg() {$/;"	f	struct:tui.LightWindow
setOriginalIM	plugged/vim-go/test/parse.go	/^func (p *parser) setOriginalIM() {$/;"	f	struct:html.parser
set_var	plugged/fzf/test/test_go.rb	/^  def set_var(name, val)$/;"	f	class:TestFish
set_var	plugged/fzf/test/test_go.rb	/^  def set_var(name, val)$/;"	f	module:TestShell
setup	plugged/fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestGoFZF
setup	plugged/fzf/test/test_go.rb	/^  def setup$/;"	f	module:TestShell
setupTerminal	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) setupTerminal() {$/;"	f	unknown:tui.LightRenderer
setupTerminal	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) setupTerminal() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
shape	plugged/fzf/src/tui/tui.go	/^	shape       BorderShape$/;"	m	struct:tui.BorderStyle	typeref:typename:BorderShape
shell	plugged/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestBash
shell	plugged/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestFish
shell	plugged/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestZsh
shellPath	plugged/fzf/src/util/util_windows.go	/^var shellPath atomic.Value$/;"	v	package:util	typeref:typename:atomic.Value
shouldFosterParent	plugged/vim-go/test/parse.go	/^func (p *parser) shouldFosterParent() bool {$/;"	f	struct:html.parser	typeref:typename:bool
sigstop	plugged/fzf/src/terminal.go	/^	sigstop      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
size	plugged/fzf/src/options.go	/^	size        sizeSpec$/;"	m	struct:fzf.previewOpts	typeref:typename:sizeSpec
size	plugged/fzf/src/options.go	/^	size    float64$/;"	m	struct:fzf.sizeSpec	typeref:typename:float64
sizeSpec	plugged/fzf/src/options.go	/^type sizeSpec struct {$/;"	s	package:fzf
slab	plugged/fzf/src/matcher.go	/^	slab           []*util.Slab$/;"	m	struct:fzf.Matcher	typeref:typename:[]*util.Slab
slab	plugged/fzf/src/pattern_test.go	/^var slab *util.Slab$/;"	v	package:fzf	typeref:typename:*util.Slab
slab	plugged/fzf/src/terminal.go	/^	slab         *util.Slab$/;"	m	struct:fzf.Terminal	typeref:typename:*util.Slab
slab16Size	plugged/fzf/src/constants.go	/^	slab16Size int = 100 * 1024 \/\/ 200KB * 32 = 12.8MB$/;"	c	package:fzf	typeref:typename:int
slab32Size	plugged/fzf/src/constants.go	/^	slab32Size int = 2048       \/\/ 8KB * 32 = 256KB$/;"	c	package:fzf	typeref:typename:int
slice	plugged/fzf/src/util/chars.go	/^	slice           []byte \/\/ or []rune$/;"	m	struct:util.Chars	typeref:typename:[]byte
sliceChunks	plugged/fzf/src/matcher.go	/^func (m *Matcher) sliceChunks(chunks []*Chunk) [][]*Chunk {$/;"	f	struct:fzf.Matcher	typeref:typename:[][]*Chunk
smcup	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) smcup() {$/;"	f	struct:tui.LightRenderer
sodipodi	plugged/vim-go/assets/vim-go.svg	/^   inkscape:export-ydpi="46.84">$/;"	n	uri:http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd
sort	plugged/fzf/src/matcher.go	/^	sort           bool$/;"	m	struct:fzf.Matcher	typeref:typename:bool
sort	plugged/fzf/src/matcher.go	/^	sort       bool$/;"	m	struct:fzf.MatchRequest	typeref:typename:bool
sort	plugged/fzf/src/terminal.go	/^	sort         bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
sort	plugged/fzf/src/terminal.go	/^	sort    bool$/;"	m	struct:fzf.searchRequest	typeref:typename:bool
sortCriteria	plugged/fzf/src/result.go	/^var sortCriteria []criterion$/;"	v	package:fzf	typeref:typename:[]criterion
sortSelected	plugged/fzf/src/terminal.go	/^func (t *Terminal) sortSelected() []selectedItem {$/;"	f	struct:fzf.Terminal	typeref:typename:[]selectedItem
sortable	plugged/fzf/src/pattern.go	/^	sortable      bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
sorted	plugged/fzf/src/merger.go	/^	sorted  bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
spinner	plugged/fzf/src/terminal.go	/^	spinner      []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
spinner	plugged/fzf/src/terminal.go	/^	spinner    string$/;"	m	struct:fzf.previewer	typeref:typename:string
spinner	plugged/fzf/src/terminal.go	/^	spinner string$/;"	m	struct:fzf.previewResult	typeref:typename:string
spinnerDuration	plugged/fzf/src/constants.go	/^	spinnerDuration   = 100 * time.Millisecond$/;"	c	package:fzf
splitNth	plugged/fzf/src/options.go	/^func splitNth(str string) []Range {$/;"	f	package:fzf	typeref:typename:[]Range
startChan	plugged/fzf/src/terminal.go	/^	startChan    chan bool$/;"	m	struct:fzf.Terminal	typeref:typename:chan bool
startEventPoller	plugged/fzf/src/reader.go	/^func (r *Reader) startEventPoller() {$/;"	f	struct:fzf.Reader
state	plugged/fzf/src/util/atomicbool.go	/^	state int32 \/\/ "1" is true, "0" is false$/;"	m	struct:util.AtomicBool	typeref:typename:int32
state.complete	plugged/vim-go/autoload/go/job.vim	/^  function state.complete(job, exit_status, data)$/;"	f
state.show_errors	plugged/vim-go/autoload/go/job.vim	/^  function state.show_errors(job, exit_status, data)$/;"	f
state.show_status	plugged/vim-go/autoload/go/job.vim	/^  function state.show_status(job, exit_status) dict$/;"	f
stderr	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) stderr(str string) {$/;"	f	unknown:tui.LightRenderer
stderrInternal	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) stderrInternal(str string, allowNLCR bool) {$/;"	f	unknown:tui.LightRenderer
stderrInternal	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) stderrInternal(str string, allowNLCR bool) {$/;"	f	struct:tui.LightWindow
stop4166	plugged/vim-go/assets/vim-go.svg	/^         id="stop4166" \/>$/;"	i
stop4178	plugged/vim-go/assets/vim-go.svg	/^         id="stop4178" \/>$/;"	i
stop4184	plugged/vim-go/assets/vim-go.svg	/^         id="stop4184" \/>$/;"	i
stop4194	plugged/vim-go/assets/vim-go.svg	/^         id="stop4194" \/>$/;"	i
stop4263	plugged/vim-go/assets/vim-go.svg	/^         id="stop4263" \/>$/;"	i
stop4269	plugged/vim-go/assets/vim-go.svg	/^         id="stop4269" \/>$/;"	i
stop4287	plugged/vim-go/assets/vim-go.svg	/^         id="stop4287" \/>$/;"	i
stop4293	plugged/vim-go/assets/vim-go.svg	/^         id="stop4293" \/>$/;"	i
stop4299	plugged/vim-go/assets/vim-go.svg	/^         id="stop4299" \/>$/;"	i
stop4305	plugged/vim-go/assets/vim-go.svg	/^         id="stop4305" \/>$/;"	i
stop4311	plugged/vim-go/assets/vim-go.svg	/^         id="stop4311" \/>$/;"	i
stop4317	plugged/vim-go/assets/vim-go.svg	/^         id="stop4317" \/>$/;"	i
stop4334	plugged/vim-go/assets/vim-go.svg	/^         id="stop4334" \/>$/;"	i
str	plugged/fzf/src/tokenizer.go	/^	str   *string$/;"	m	struct:fzf.Delimiter	typeref:typename:*string
strLines	plugged/fzf/src/options.go	/^func strLines(str string) []string {$/;"	f	package:fzf	typeref:typename:[]string
strong	plugged/fzf/src/terminal.go	/^	strong       tui.Attr$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Attr
style	plugged/fzf/src/tui/tcell.go	/^func (p ColorPair) style() tcell.Style {$/;"	f	unknown:tui.ColorPair	typeref:typename:tcell.Style
summary	plugged/vim-gitgutter/test/runner.vim	/^let summary = [$/;"	v
suppress	plugged/fzf/src/terminal.go	/^	suppress     bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
svg	plugged/vim-go/assets/vim-go.svg	/^   inkscape:export-ydpi="46.84">$/;"	n	uri:http://www.w3.org/2000/svg
svg2	plugged/vim-go/assets/vim-go.svg	/^   inkscape:export-ydpi="46.84">$/;"	i
t	plugged/fzf/src/terminal.go	/^	t actionType$/;"	m	struct:fzf.action	typeref:typename:actionType
tableBodyScope	plugged/vim-go/test/parse.go	/^	tableBodyScope$/;"	c	package:html
tableRowScope	plugged/vim-go/test/parse.go	/^	tableRowScope$/;"	c	package:html
tableScope	plugged/vim-go/test/parse.go	/^	tableScope$/;"	c	package:html
tabstop	plugged/fzf/src/terminal.go	/^	tabstop      int$/;"	m	struct:fzf.Terminal	typeref:typename:int
tabstop	plugged/fzf/src/tui/light.go	/^	tabstop       int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
tabstop	plugged/fzf/src/tui/light.go	/^	tabstop  int$/;"	m	struct:tui.LightWindow	typeref:typename:int
tac	plugged/fzf/src/matcher.go	/^	tac            bool$/;"	m	struct:fzf.Matcher	typeref:typename:bool
tac	plugged/fzf/src/merger.go	/^	tac     bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
target/$(BINARY32)	plugged/fzf/Makefile	/^target\/$(BINARY32): $(SOURCES)$/;"	t
target/$(BINARY64)	plugged/fzf/Makefile	/^target\/$(BINARY64): $(SOURCES)$/;"	t
target/$(BINARYARM5)	plugged/fzf/Makefile	/^target\/$(BINARYARM5): $(SOURCES)$/;"	t
target/$(BINARYARM6)	plugged/fzf/Makefile	/^target\/$(BINARYARM6): $(SOURCES)$/;"	t
target/$(BINARYARM7)	plugged/fzf/Makefile	/^target\/$(BINARYARM7): $(SOURCES)$/;"	t
target/$(BINARYARM8)	plugged/fzf/Makefile	/^target\/$(BINARYARM8): $(SOURCES)$/;"	t
target/$(BINARYPPC64LE)	plugged/fzf/Makefile	/^target\/$(BINARYPPC64LE): $(SOURCES)$/;"	t
target/$(BINARYRISCV64)	plugged/fzf/Makefile	/^target\/$(BINARYRISCV64): $(SOURCES)$/;"	t
teardown	plugged/fzf/test/test_go.rb	/^  def teardown$/;"	f	class:TestGoFZF
teardown	plugged/fzf/test/test_go.rb	/^  def teardown$/;"	f	module:TestShell
template	plugged/fzf/src/terminal.go	/^	template string$/;"	m	struct:fzf.previewRequest	typeref:typename:string
template	plugged/fzf/src/terminal_test.go	/^	template string$/;"	m	struct:fzf.give	typeref:typename:string
templateToString	plugged/fzf/src/terminal_test.go	/^func templateToString(format string, data interface{}) string {$/;"	f	package:fzf	typeref:typename:string
tempname	plugged/fzf/test/test_go.rb	/^  def tempname$/;"	f	class:TestBase
term	plugged/fzf/src/pattern.go	/^type term struct {$/;"	s	package:fzf
termEqual	plugged/fzf/src/pattern.go	/^	termEqual$/;"	c	package:fzf
termExact	plugged/fzf/src/pattern.go	/^	termExact$/;"	c	package:fzf
termFuzzy	plugged/fzf/src/pattern.go	/^	termFuzzy termType = iota$/;"	c	package:fzf	typeref:type:termType
termPrefix	plugged/fzf/src/pattern.go	/^	termPrefix$/;"	c	package:fzf
termSet	plugged/fzf/src/pattern.go	/^type termSet []term$/;"	t	package:fzf	typeref:typename:[]term
termSets	plugged/fzf/src/pattern.go	/^	termSets      []termSet$/;"	m	struct:fzf.Pattern	typeref:typename:[]termSet
termSuffix	plugged/fzf/src/pattern.go	/^	termSuffix$/;"	c	package:fzf
termType	plugged/fzf/src/pattern.go	/^type termType int$/;"	t	package:fzf	typeref:typename:int
terminate	plugged/fzf/src/reader.go	/^func (r *Reader) terminate() {$/;"	f	struct:fzf.Reader
test	plugged/fzf/Makefile	/^test: $(SOURCES)$/;"	t
test	plugged/vim-go/Makefile	/^test:$/;"	t
testCase	plugged/fzf/src/terminal_test.go	/^type testCase struct {$/;"	s	package:fzf
testCommands	plugged/fzf/src/terminal_test.go	/^func testCommands(t *testing.T, tests []testCase) {$/;"	f	package:fzf
testParserReference	plugged/fzf/src/ansi_test.go	/^func testParserReference(t testing.TB, str string) {$/;"	f	package:fzf
test_accept_non_empty	plugged/fzf/test/test_go.rb	/^  def test_accept_non_empty$/;"	f	class:TestGoFZF
test_accept_non_empty_with_empty_list	plugged/fzf/test/test_go.rb	/^  def test_accept_non_empty_with_empty_list$/;"	f	class:TestGoFZF
test_accept_non_empty_with_multi_selection	plugged/fzf/test/test_go.rb	/^  def test_accept_non_empty_with_multi_selection$/;"	f	class:TestGoFZF
test_alt_c	plugged/fzf/test/test_go.rb	/^  def test_alt_c$/;"	f	module:TestShell
test_alt_c_command	plugged/fzf/test/test_go.rb	/^  def test_alt_c_command$/;"	f	module:TestShell
test_backward_delete_char_eof	plugged/fzf/test/test_go.rb	/^  def test_backward_delete_char_eof$/;"	f	class:TestGoFZF
test_backward_eof	plugged/fzf/test/test_go.rb	/^  def test_backward_eof$/;"	f	class:TestGoFZF
test_bind	plugged/fzf/test/test_go.rb	/^  def test_bind$/;"	f	class:TestGoFZF
test_bind_print_query	plugged/fzf/test/test_go.rb	/^  def test_bind_print_query$/;"	f	class:TestGoFZF
test_bind_replace_query	plugged/fzf/test/test_go.rb	/^  def test_bind_replace_query$/;"	f	class:TestGoFZF
test_cancel	plugged/fzf/test/test_go.rb	/^  def test_cancel$/;"	f	class:TestGoFZF
test_change_first_last	plugged/fzf/test/test_go.rb	/^  def test_change_first_last$/;"	f	class:TestGoFZF
test_change_prompt	plugged/fzf/test/test_go.rb	/^  def test_change_prompt$/;"	f	class:TestGoFZF
test_clear_list_when_header_lines_changed_due_to_reload	plugged/fzf/test/test_go.rb	/^  def test_clear_list_when_header_lines_changed_due_to_reload$/;"	f	class:TestGoFZF
test_clear_query	plugged/fzf/test/test_go.rb	/^  def test_clear_query$/;"	f	class:TestGoFZF
test_clear_selection	plugged/fzf/test/test_go.rb	/^  def test_clear_selection$/;"	f	class:TestGoFZF
test_close	plugged/fzf/test/test_go.rb	/^  def test_close$/;"	f	class:TestGoFZF
test_complete_quoted_command	plugged/fzf/test/test_go.rb	/^  def test_complete_quoted_command$/;"	f	class:TestZsh
test_ctrl_r	plugged/fzf/test/test_go.rb	/^  def test_ctrl_r$/;"	f	module:TestShell
test_ctrl_r_abort	plugged/fzf/test/test_go.rb	/^  def test_ctrl_r_abort$/;"	f	module:TestShell
test_ctrl_r_multiline	plugged/fzf/test/test_go.rb	/^  def test_ctrl_r_multiline$/;"	f	module:TestShell
test_ctrl_t	plugged/fzf/test/test_go.rb	/^  def test_ctrl_t$/;"	f	module:TestShell
test_ctrl_t_unicode	plugged/fzf/test/test_go.rb	/^  def test_ctrl_t_unicode$/;"	f	module:TestShell
test_custom_completion	plugged/fzf/test/test_go.rb	/^  def test_custom_completion$/;"	f	module:CompletionTest
test_custom_completion_api	plugged/fzf/test/test_go.rb	/^  def test_custom_completion_api$/;"	f	module:CompletionTest
test_cycle	plugged/fzf/test/test_go.rb	/^  def test_cycle$/;"	f	class:TestGoFZF
test_default_extended	plugged/fzf/test/test_go.rb	/^  def test_default_extended$/;"	f	class:TestGoFZF
test_dir_completion	plugged/fzf/test/test_go.rb	/^  def test_dir_completion$/;"	f	module:CompletionTest
test_disabled	plugged/fzf/test/test_go.rb	/^  def test_disabled$/;"	f	class:TestGoFZF
test_dynamic_completion_loader	plugged/fzf/test/test_go.rb	/^  def test_dynamic_completion_loader$/;"	f	class:TestBash
test_escaped_meta_characters	plugged/fzf/test/test_go.rb	/^  def test_escaped_meta_characters$/;"	f	class:TestGoFZF
test_exact	plugged/fzf/test/test_go.rb	/^  def test_exact$/;"	f	class:TestGoFZF
test_execute	plugged/fzf/test/test_go.rb	/^  def test_execute$/;"	f	class:TestGoFZF
test_execute_multi	plugged/fzf/test/test_go.rb	/^  def test_execute_multi$/;"	f	class:TestGoFZF
test_execute_plus_flag	plugged/fzf/test/test_go.rb	/^  def test_execute_plus_flag$/;"	f	class:TestGoFZF
test_execute_shell	plugged/fzf/test/test_go.rb	/^  def test_execute_shell$/;"	f	class:TestGoFZF
test_exit_0	plugged/fzf/test/test_go.rb	/^  def test_exit_0$/;"	f	class:TestGoFZF
test_exit_0_exit_code	plugged/fzf/test/test_go.rb	/^  def test_exit_0_exit_code$/;"	f	class:TestGoFZF
test_exitstatus_empty	plugged/fzf/test/test_go.rb	/^  def test_exitstatus_empty$/;"	f	class:TestGoFZF
test_expect	plugged/fzf/test/test_go.rb	/^  def test_expect$/;"	f	class:TestGoFZF
test_expect_print_query	plugged/fzf/test/test_go.rb	/^  def test_expect_print_query$/;"	f	class:TestGoFZF
test_expect_print_query_select_1	plugged/fzf/test/test_go.rb	/^  def test_expect_print_query_select_1$/;"	f	class:TestGoFZF
test_expect_printable_character_print_query	plugged/fzf/test/test_go.rb	/^  def test_expect_printable_character_print_query$/;"	f	class:TestGoFZF
test_file_completion	plugged/fzf/test/test_go.rb	/^  def test_file_completion$/;"	f	module:CompletionTest
test_file_completion_root	plugged/fzf/test/test_go.rb	/^  def test_file_completion_root$/;"	f	module:CompletionTest
test_file_completion_unicode	plugged/fzf/test/test_go.rb	/^  def test_file_completion_unicode$/;"	f	module:CompletionTest
test_file_word	plugged/fzf/test/test_go.rb	/^  def test_file_word$/;"	f	class:TestGoFZF
test_filter_exitstatus	plugged/fzf/test/test_go.rb	/^  def test_filter_exitstatus$/;"	f	class:TestGoFZF
test_fzf_default_command	plugged/fzf/test/test_go.rb	/^  def test_fzf_default_command$/;"	f	class:TestGoFZF
test_fzf_default_command_failure	plugged/fzf/test/test_go.rb	/^  def test_fzf_default_command_failure$/;"	f	class:TestGoFZF
test_header	plugged/fzf/test/test_go.rb	/^  def test_header$/;"	f	class:TestGoFZF
test_header_and_header_lines	plugged/fzf/test/test_go.rb	/^  def test_header_and_header_lines$/;"	f	class:TestGoFZF
test_header_and_header_lines_reverse	plugged/fzf/test/test_go.rb	/^  def test_header_and_header_lines_reverse$/;"	f	class:TestGoFZF
test_header_and_header_lines_reverse_list	plugged/fzf/test/test_go.rb	/^  def test_header_and_header_lines_reverse_list$/;"	f	class:TestGoFZF
test_header_first	plugged/fzf/test/test_go.rb	/^  def test_header_first$/;"	f	class:TestGoFZF
test_header_first_reverse	plugged/fzf/test/test_go.rb	/^  def test_header_first_reverse$/;"	f	class:TestGoFZF
test_header_lines	plugged/fzf/test/test_go.rb	/^  def test_header_lines$/;"	f	class:TestGoFZF
test_header_lines_overflow	plugged/fzf/test/test_go.rb	/^  def test_header_lines_overflow$/;"	f	class:TestGoFZF
test_header_lines_reverse	plugged/fzf/test/test_go.rb	/^  def test_header_lines_reverse$/;"	f	class:TestGoFZF
test_header_lines_reverse_list	plugged/fzf/test/test_go.rb	/^  def test_header_lines_reverse_list$/;"	f	class:TestGoFZF
test_header_lines_with_nth	plugged/fzf/test/test_go.rb	/^  def test_header_lines_with_nth$/;"	f	class:TestGoFZF
test_header_reverse	plugged/fzf/test/test_go.rb	/^  def test_header_reverse$/;"	f	class:TestGoFZF
test_header_reverse_list	plugged/fzf/test/test_go.rb	/^  def test_header_reverse_list$/;"	f	class:TestGoFZF
test_history	plugged/fzf/test/test_go.rb	/^  def test_history$/;"	f	class:TestGoFZF
test_hscroll_off	plugged/fzf/test/test_go.rb	/^  def test_hscroll_off$/;"	f	class:TestGoFZF
test_info_hidden	plugged/fzf/test/test_go.rb	/^  def test_info_hidden$/;"	f	class:TestGoFZF
test_interrupt_execute	plugged/fzf/test/test_go.rb	/^  def test_interrupt_execute$/;"	f	class:TestGoFZF
test_invalid_cache	plugged/fzf/test/test_go.rb	/^  def test_invalid_cache$/;"	f	class:TestGoFZF
test_invalid_cache_query_type	plugged/fzf/test/test_go.rb	/^  def test_invalid_cache_query_type$/;"	f	class:TestGoFZF
test_invalid_option	plugged/fzf/test/test_go.rb	/^  def test_invalid_option$/;"	f	class:TestGoFZF
test_inverse_only_search_should_not_sort_the_result	plugged/fzf/test/test_go.rb	/^  def test_inverse_only_search_should_not_sort_the_result$/;"	f	class:TestGoFZF
test_item_index_reset_on_reload	plugged/fzf/test/test_go.rb	/^  def test_item_index_reset_on_reload$/;"	f	class:TestGoFZF
test_jump	plugged/fzf/test/test_go.rb	/^  def test_jump$/;"	f	class:TestGoFZF
test_jump_accept	plugged/fzf/test/test_go.rb	/^  def test_jump_accept$/;"	f	class:TestGoFZF
test_keep_right	plugged/fzf/test/test_go.rb	/^  def test_keep_right$/;"	f	class:TestGoFZF
test_key_bindings	plugged/fzf/test/test_go.rb	/^  def test_key_bindings$/;"	f	class:TestGoFZF
test_kill_default_command_on_abort	plugged/fzf/test/test_go.rb	/^  def test_kill_default_command_on_abort$/;"	f	class:TestGoFZF
test_kill_default_command_on_accept	plugged/fzf/test/test_go.rb	/^  def test_kill_default_command_on_accept$/;"	f	class:TestGoFZF
test_kill_reload_command_on_abort	plugged/fzf/test/test_go.rb	/^  def test_kill_reload_command_on_abort$/;"	f	class:TestGoFZF
test_kill_reload_command_on_accept	plugged/fzf/test/test_go.rb	/^  def test_kill_reload_command_on_accept$/;"	f	class:TestGoFZF
test_long_line	plugged/fzf/test/test_go.rb	/^  def test_long_line$/;"	f	class:TestGoFZF
test_margin	plugged/fzf/test/test_go.rb	/^  def test_margin$/;"	f	class:TestGoFZF
test_margin_reverse	plugged/fzf/test/test_go.rb	/^  def test_margin_reverse$/;"	f	class:TestGoFZF
test_margin_reverse_list	plugged/fzf/test/test_go.rb	/^  def test_margin_reverse_list$/;"	f	class:TestGoFZF
test_marker	plugged/fzf/test/test_go.rb	/^  def test_marker$/;"	f	class:TestGoFZF
test_multi_max	plugged/fzf/test/test_go.rb	/^  def test_multi_max$/;"	f	class:TestGoFZF
test_multi_order	plugged/fzf/test/test_go.rb	/^  def test_multi_order$/;"	f	class:TestGoFZF
test_no_clear	plugged/fzf/test/test_go.rb	/^  def test_no_clear$/;"	f	class:TestGoFZF
test_normalized_match	plugged/fzf/test/test_go.rb	/^  def test_normalized_match$/;"	f	class:TestGoFZF
test_or_operator	plugged/fzf/test/test_go.rb	/^  def test_or_operator$/;"	f	class:TestGoFZF
test_partial_caching	plugged/fzf/test/test_go.rb	/^  def test_partial_caching$/;"	f	class:TestGoFZF
test_pointer	plugged/fzf/test/test_go.rb	/^  def test_pointer$/;"	f	class:TestGoFZF
test_pointer_with_jump	plugged/fzf/test/test_go.rb	/^  def test_pointer_with_jump$/;"	f	class:TestGoFZF
test_preview	plugged/fzf/test/test_go.rb	/^  def test_preview$/;"	f	class:TestGoFZF
test_preview_bindings_with_default_preview	plugged/fzf/test/test_go.rb	/^  def test_preview_bindings_with_default_preview$/;"	f	class:TestGoFZF
test_preview_bindings_without_default_preview	plugged/fzf/test/test_go.rb	/^  def test_preview_bindings_without_default_preview$/;"	f	class:TestGoFZF
test_preview_clear_screen	plugged/fzf/test/test_go.rb	/^  def test_preview_clear_screen$/;"	f	class:TestGoFZF
test_preview_correct_tab_width_after_ansi_reset_code	plugged/fzf/test/test_go.rb	/^  def test_preview_correct_tab_width_after_ansi_reset_code$/;"	f	class:TestGoFZF
test_preview_file	plugged/fzf/test/test_go.rb	/^  def test_preview_file$/;"	f	class:TestGoFZF
test_preview_flags	plugged/fzf/test/test_go.rb	/^  def test_preview_flags$/;"	f	class:TestGoFZF
test_preview_header	plugged/fzf/test/test_go.rb	/^  def test_preview_header$/;"	f	class:TestGoFZF
test_preview_hidden	plugged/fzf/test/test_go.rb	/^  def test_preview_hidden$/;"	f	class:TestGoFZF
test_preview_q_no_match	plugged/fzf/test/test_go.rb	/^  def test_preview_q_no_match$/;"	f	class:TestGoFZF
test_preview_q_no_match_with_initial_query	plugged/fzf/test/test_go.rb	/^  def test_preview_q_no_match_with_initial_query$/;"	f	class:TestGoFZF
test_preview_scroll_begin_and_offset	plugged/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_and_offset$/;"	f	class:TestGoFZF
test_preview_scroll_begin_constant	plugged/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_constant$/;"	f	class:TestGoFZF
test_preview_scroll_begin_expr	plugged/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_expr$/;"	f	class:TestGoFZF
test_preview_size_0	plugged/fzf/test/test_go.rb	/^  def test_preview_size_0$/;"	f	class:TestGoFZF
test_preview_update_on_select	plugged/fzf/test/test_go.rb	/^  def test_preview_update_on_select$/;"	f	class:TestGoFZF
test_preview_window_follow	plugged/fzf/test/test_go.rb	/^  def test_preview_window_follow$/;"	f	class:TestGoFZF
test_process_completion	plugged/fzf/test/test_go.rb	/^  def test_process_completion$/;"	f	module:CompletionTest
test_query_unicode	plugged/fzf/test/test_go.rb	/^  def test_query_unicode$/;"	f	class:TestGoFZF
test_read0	plugged/fzf/test/test_go.rb	/^  def test_read0$/;"	f	class:TestGoFZF
test_reload	plugged/fzf/test/test_go.rb	/^  def test_reload$/;"	f	class:TestGoFZF
test_reload_even_when_theres_no_match	plugged/fzf/test/test_go.rb	/^  def test_reload_even_when_theres_no_match$/;"	f	class:TestGoFZF
test_reload_should_update_preview	plugged/fzf/test/test_go.rb	/^  def test_reload_should_update_preview$/;"	f	class:TestGoFZF
test_scroll	plugged/fzf/test/test_go.rb	/^  def test_scroll$/;"	f	class:TestGoFZF
test_scroll_off	plugged/fzf/test/test_go.rb	/^  def test_scroll_off$/;"	f	class:TestGoFZF
test_scroll_off_large	plugged/fzf/test/test_go.rb	/^  def test_scroll_off_large$/;"	f	class:TestGoFZF
test_select_1	plugged/fzf/test/test_go.rb	/^  def test_select_1$/;"	f	class:TestGoFZF
test_select_1_exit_0_fail	plugged/fzf/test/test_go.rb	/^  def test_select_1_exit_0_fail$/;"	f	class:TestGoFZF
test_select_all_deselect_all_toggle_all	plugged/fzf/test/test_go.rb	/^  def test_select_all_deselect_all_toggle_all$/;"	f	class:TestGoFZF
test_select_deselect	plugged/fzf/test/test_go.rb	/^  def test_select_deselect$/;"	f	class:TestGoFZF
test_smart_case_for_each_term	plugged/fzf/test/test_go.rb	/^  def test_smart_case_for_each_term$/;"	f	class:TestGoFZF
test_strip_xterm_osc_sequence	plugged/fzf/test/test_go.rb	/^  def test_strip_xterm_osc_sequence$/;"	f	class:TestGoFZF
test_sync	plugged/fzf/test/test_go.rb	/^  def test_sync$/;"	f	class:TestGoFZF
test_tabstop	plugged/fzf/test/test_go.rb	/^  def test_tabstop$/;"	f	class:TestGoFZF
test_tac	plugged/fzf/test/test_go.rb	/^  def test_tac$/;"	f	class:TestGoFZF
test_tac_nosort	plugged/fzf/test/test_go.rb	/^  def test_tac_nosort$/;"	f	class:TestGoFZF
test_tac_sort	plugged/fzf/test/test_go.rb	/^  def test_tac_sort$/;"	f	class:TestGoFZF
test_tiebreak	plugged/fzf/test/test_go.rb	/^  def test_tiebreak$/;"	f	class:TestGoFZF
test_tiebreak_begin_algo_v2	plugged/fzf/test/test_go.rb	/^  def test_tiebreak_begin_algo_v2$/;"	f	class:TestGoFZF
test_tiebreak_end	plugged/fzf/test/test_go.rb	/^  def test_tiebreak_end$/;"	f	class:TestGoFZF
test_tiebreak_index_begin	plugged/fzf/test/test_go.rb	/^  def test_tiebreak_index_begin$/;"	f	class:TestGoFZF
test_tiebreak_length_with_nth	plugged/fzf/test/test_go.rb	/^  def test_tiebreak_length_with_nth$/;"	f	class:TestGoFZF
test_toggle_preview_wrap	plugged/fzf/test/test_go.rb	/^  def test_toggle_preview_wrap$/;"	f	class:TestGoFZF
test_toggle_sort	plugged/fzf/test/test_go.rb	/^  def test_toggle_sort$/;"	f	class:TestGoFZF
test_unbind	plugged/fzf/test/test_go.rb	/^  def test_unbind$/;"	f	class:TestGoFZF
test_unicode_case	plugged/fzf/test/test_go.rb	/^  def test_unicode_case$/;"	f	class:TestGoFZF
test_unset_completion	plugged/fzf/test/test_go.rb	/^  def test_unset_completion$/;"	f	module:CompletionTest
test_vanilla	plugged/fzf/test/test_go.rb	/^  def test_vanilla$/;"	f	class:TestGoFZF
test_with_nth	plugged/fzf/test/test_go.rb	/^  def test_with_nth$/;"	f	class:TestGoFZF
test_with_nth_ansi	plugged/fzf/test/test_go.rb	/^  def test_with_nth_ansi$/;"	f	class:TestGoFZF
test_with_nth_basic	plugged/fzf/test/test_go.rb	/^  def test_with_nth_basic$/;"	f	class:TestGoFZF
test_with_nth_no_ansi	plugged/fzf/test/test_go.rb	/^  def test_with_nth_no_ansi$/;"	f	class:TestGoFZF
text	plugged/fzf/src/item.go	/^	text        util.Chars    \/\/ 32 = 24 + 1 + 1 + 2 + 4$/;"	m	struct:fzf.Item	typeref:typename:util.Chars
text	plugged/fzf/src/pattern.go	/^	text          []rune$/;"	m	struct:fzf.Pattern	typeref:typename:[]rune
text	plugged/fzf/src/pattern.go	/^	text          []rune$/;"	m	struct:fzf.term	typeref:typename:[]rune
text	plugged/fzf/src/tokenizer.go	/^	text         *util.Chars$/;"	m	struct:fzf.Token	typeref:typename:*util.Chars
text	plugged/fzf/src/tui/light.go	/^	text         string$/;"	m	struct:tui.wrappedLine	typeref:typename:string
text4285	plugged/vim-go/assets/vim-go.svg	/^         transform="matrix(1.0880646,0,-0.29154603,1.0880646,-528.83975,-369.0604)">$/;"	i
textIM	plugged/vim-go/test/parse.go	/^func textIM(p *parser) bool {$/;"	f	package:html	typeref:typename:bool
theme	plugged/fzf/src/terminal.go	/^	theme        *tui.ColorTheme$/;"	m	struct:fzf.Terminal	typeref:typename:*tui.ColorTheme
theme	plugged/fzf/src/tui/light.go	/^	theme         *ColorTheme$/;"	m	struct:tui.LightRenderer	typeref:typename:*ColorTheme
theme	plugged/fzf/src/tui/tui.go	/^	theme        *ColorTheme$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:*ColorTheme
timeoutInterval	plugged/fzf/src/tui/light_windows.go	/^	timeoutInterval = 10$/;"	c	package:tui
tmux	plugged/fzf/test/test_go.rb	/^  attr_reader :tmux$/;"	A	class:TestBase
tmux_args=	plugged/fzf/bin/fzf-tmux	/^tmux_args=()$/;"	f
toActions	plugged/fzf/src/terminal.go	/^func toActions(types ...actionType) []action {$/;"	f	package:fzf	typeref:typename:[]action
toAnsiString	plugged/fzf/src/ansi.go	/^func toAnsiString(color tui.Color, offset int) string {$/;"	f	package:fzf	typeref:typename:string
toggleItem	plugged/fzf/src/terminal.go	/^func (t *Terminal) toggleItem(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
toggleSort	plugged/fzf/src/terminal.go	/^	toggleSort   bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
tok	plugged/vim-go/test/parse.go	/^	tok Token$/;"	m	struct:html.parser	typeref:typename:Token
tokenizer	plugged/vim-go/test/parse.go	/^	tokenizer *Tokenizer$/;"	m	struct:html.parser	typeref:typename:*Tokenizer
top	plugged/fzf/src/tui/light.go	/^	top      int$/;"	m	struct:tui.LightWindow	typeref:typename:int
top	plugged/fzf/src/tui/tcell.go	/^	top         int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
top	plugged/vim-go/test/parse.go	/^func (p *parser) top() *Node {$/;"	f	struct:html.parser	typeref:typename:*Node
topLeft	plugged/fzf/src/tui/tui.go	/^	topLeft     rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
topRight	plugged/fzf/src/tui/tui.go	/^	topRight    rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
trans	plugged/fzf/src/chunklist.go	/^	trans  ItemBuilder$/;"	m	struct:fzf.ChunkList	typeref:typename:ItemBuilder
transformInput	plugged/fzf/src/pattern.go	/^func (p *Pattern) transformInput(item *Item) []Token {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Token
transformed	plugged/fzf/src/item.go	/^	transformed *[]Token      \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]Token
trimLeft	plugged/fzf/src/terminal.go	/^func (t *Terminal) trimLeft(runes []rune, width int) ([]rune, int32) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, int32)
trimLength	plugged/fzf/src/util/chars.go	/^	trimLength      uint16$/;"	m	struct:util.Chars	typeref:typename:uint16
trimLengthKnown	plugged/fzf/src/util/chars.go	/^	trimLengthKnown bool$/;"	m	struct:util.Chars	typeref:typename:bool
trimMessage	plugged/fzf/src/terminal.go	/^func (t *Terminal) trimMessage(message string, maxWidth int) string {$/;"	f	struct:fzf.Terminal	typeref:typename:string
trimQuery	plugged/fzf/src/terminal.go	/^func trimQuery(query string) []rune {$/;"	f	package:fzf	typeref:typename:[]rune
trimRight	plugged/fzf/src/terminal.go	/^func (t *Terminal) trimRight(runes []rune, width int) ([]rune, bool) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, bool)
truncateQuery	plugged/fzf/src/terminal.go	/^func (t *Terminal) truncateQuery() {$/;"	f	struct:fzf.Terminal
trySkip	plugged/fzf/src/algo/algo.go	/^func trySkip(input *util.Chars, caseSensitive bool, b byte, from int) int {$/;"	f	package:algo	typeref:typename:int
try_curl	plugged/fzf/install	/^try_curl() {$/;"	f
try_wget	plugged/fzf/install	/^try_wget() {$/;"	f
ttyin	plugged/fzf/src/tui/light.go	/^	ttyin         *os.File$/;"	m	struct:tui.LightRenderer	typeref:typename:*os.File
ttyinChannel	plugged/fzf/src/tui/light.go	/^	ttyinChannel    chan byte$/;"	m	struct:tui.LightRenderer	typeref:typename:chan byte
ttyname	plugged/fzf/src/tui/ttyname_unix.go	/^func ttyname() string {$/;"	f	package:tui	typeref:typename:string
ttyname	plugged/fzf/src/tui/ttyname_windows.go	/^func ttyname() string {$/;"	f	package:tui	typeref:typename:string
tui	plugged/fzf/src/terminal.go	/^	tui          tui.Renderer$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Renderer
tui	plugged/fzf/src/tui/dummy.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/light.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/light_unix.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/light_windows.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/tcell.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/tcell_test.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/ttyname_unix.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/ttyname_windows.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/tui.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/tui_test.go	/^package tui$/;"	p
typ	plugged/fzf/src/pattern.go	/^	typ           termType$/;"	m	struct:fzf.term	typeref:typename:termType
type	plugged/vim-go/addon-info.json	/^  "repository" : {"type": "git", "url": "https:\/\/github.com\/fatih\/vim-go.git"}$/;"	s	object:repository
unicode	plugged/fzf/src/terminal.go	/^	unicode      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
unite#sources#decls#define	plugged/vim-go/autoload/unite/sources/decls.vim	/^function! unite#sources#decls#define()$/;"	f
unplanned	plugged/vim-go/CHANGELOG.md	/^## unplanned$/;"	s
unset_var	plugged/fzf/test/test_go.rb	/^  def unset_var(name)$/;"	f	module:TestShell
until	plugged/fzf/test/test_go.rb	/^  def until(refresh = false)$/;"	f	class:Tmux
upOneLine	plugged/fzf/src/tui/light.go	/^	upOneLine     bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
update	plugged/fzf/Makefile	/^update:$/;"	t
updatePromptOffset	plugged/fzf/src/terminal.go	/^func (t *Terminal) updatePromptOffset() ([]rune, []rune) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, []rune)
updateTerminalSize	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) updateTerminalSize() {$/;"	f	unknown:tui.LightRenderer
updateTerminalSize	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) updateTerminalSize() {$/;"	f	unknown:tui.LightRenderer
url	plugged/vim-go/addon-info.json	/^  "repository" : {"type": "git", "url": "https:\/\/github.com\/fatih\/vim-go.git"}$/;"	s	object:repository
usage	plugged/fzf/src/options.go	/^const usage = `usage: fzf [options]$/;"	c	package:fzf
use4338	plugged/vim-go/assets/vim-go.svg	/^       height="100%" \/>$/;"	i
use_raw_list	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%FILE_LIST_CMD_IS_ABSOLUTE%"]==["1"] set use_raw_list=1$/;"	v
use_raw_list	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%PROJECT_ROOT%"]==["."] set use_raw_list=1$/;"	v
use_raw_list	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set use_raw_list=0$/;"	v
util	plugged/fzf/src/util/atomicbool.go	/^package util$/;"	p
util	plugged/fzf/src/util/atomicbool_test.go	/^package util$/;"	p
util	plugged/fzf/src/util/chars.go	/^package util$/;"	p
util	plugged/fzf/src/util/chars_test.go	/^package util$/;"	p
util	plugged/fzf/src/util/eventbox.go	/^package util$/;"	p
util	plugged/fzf/src/util/eventbox_test.go	/^package util$/;"	p
util	plugged/fzf/src/util/slab.go	/^package util$/;"	p
util	plugged/fzf/src/util/util.go	/^package util$/;"	p
util	plugged/fzf/src/util/util_test.go	/^package util$/;"	p
util	plugged/fzf/src/util/util_unix.go	/^package util$/;"	p
util	plugged/fzf/src/util/util_windows.go	/^package util$/;"	p
v1.21 - (September 11, 2019)	plugged/vim-go/CHANGELOG.md	/^## v1.21 - (September 11, 2019)$/;"	s
v1.22 - (January 30, 2020)	plugged/vim-go/CHANGELOG.md	/^## v1.22 - (January 30, 2020)$/;"	s
v1.23 - (May 16, 2020)	plugged/vim-go/CHANGELOG.md	/^## v1.23 - (May 16, 2020)$/;"	s
v1.24 - (September 15, 2020)	plugged/vim-go/CHANGELOG.md	/^## v1.24 - (September 15, 2020)$/;"	s
v1.25 - (April 18, 2021)	plugged/vim-go/CHANGELOG.md	/^## v1.25 - (April 18, 2021)$/;"	s
validateSign	plugged/fzf/src/options.go	/^func validateSign(sign string, signOptName string) error {$/;"	f	package:fzf	typeref:typename:error
version	plugged/fzf/install.ps1	/^$version="0.28.0"$/;"	v
version	plugged/fzf/main.go	/^var version string = "0.28"$/;"	v	package:main	typeref:typename:string
version	plugged/fzf/src/terminal.go	/^	version      int64$/;"	m	struct:fzf.Terminal	typeref:typename:int64
version	plugged/fzf/src/terminal.go	/^	version    int64$/;"	m	struct:fzf.previewer	typeref:typename:int64
version	plugged/fzf/src/terminal.go	/^	version  int64$/;"	m	struct:fzf.previewed	typeref:typename:int64
version	plugged/fzf/src/terminal.go	/^	version int64$/;"	m	struct:fzf.previewResult	typeref:typename:int64
vertical	plugged/fzf/src/tui/tui.go	/^	vertical    rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
vim	plugged/vim-go/autoload/go/auto.vim	/^    augroup vim-go-buffer-auto$/;"	a
vim	plugged/vim-go/autoload/go/auto.vim	/^  augroup vim-go-buffer-auto$/;"	a
vim	plugged/vim-go/autoload/go/coverage.vim	/^  augroup vim-go-coverage$/;"	a
vim	plugged/vim-go/autoload/go/debug.vim	/^  augroup vim-go-debug$/;"	a
vim	plugged/vim-go/autoload/go/guru.vim	/^    augroup vim-go-sameids$/;"	a
vim	plugged/vim-go/autoload/go/guru.vim	/^  augroup vim-go-sameids$/;"	a
vim	plugged/vim-go/autoload/go/lsp.vim	/^  augroup vim-go-diagnostics$/;"	a
vim	plugged/vim-go/ftplugin/asm.vim	/^augroup vim-go-asm-buffer$/;"	a
vim	plugged/vim-go/ftplugin/go.vim	/^augroup vim-go-buffer$/;"	a
vim	plugged/vim-go/ftplugin/gomod.vim	/^augroup vim-go-gomod-buffer$/;"	a
vim	plugged/vim-go/plugin/go.vim	/^augroup vim-go$/;"	a
vim	plugged/vim-go/syntax/go.vim	/^augroup vim-go-hi$/;"	a
vim-go [![GitHub Actions Status](https://github.com/fatih/vim-go/workflows/test/badge.svg)](https://github.com/fatih/vim-go/actions)	plugged/vim-go/README.md	/^# vim-go [![GitHub Actions Status](https:\/\/github.com\/fatih\/vim-go\/workflows\/test\/badge.s/;"	c
vim-go version:	plugged/vim-go/.github/ISSUE_TEMPLATE.md	/^#### vim-go version:$/;"	t	subsection:Configuration (**MUST** fill this out):
vmove	plugged/fzf/src/terminal.go	/^func (t *Terminal) vmove(o int, allowCycle bool) {$/;"	f	struct:fzf.Terminal
vset	plugged/fzf/src/terminal.go	/^func (t *Terminal) vset(o int) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
wait	plugged/fzf/src/reader.go	/^	wait     bool$/;"	m	struct:fzf.Reader	typeref:typename:bool
wait	plugged/fzf/test/test_go.rb	/^def wait$/;"	f
want	plugged/fzf/src/terminal_test.go	/^	want$/;"	M	struct:fzf.testCase	typeref:typename:want
want	plugged/fzf/src/terminal_test.go	/^type want struct {$/;"	s	package:fzf
whiteSuffix	plugged/fzf/src/terminal.go	/^var whiteSuffix *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
whitespace	plugged/vim-go/test/parse.go	/^const whitespace = " \\t\\r\\n\\f"$/;"	c	package:html
whitespaceOrNUL	plugged/vim-go/test/parse.go	/^const whitespaceOrNUL = whitespace + "\\x00"$/;"	c	package:html
width	plugged/fzf/src/terminal.go	/^	width    int$/;"	m	struct:fzf.itemLine	typeref:typename:int
width	plugged/fzf/src/tui/light.go	/^	width         int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
width	plugged/fzf/src/tui/light.go	/^	width    int$/;"	m	struct:tui.LightWindow	typeref:typename:int
width	plugged/fzf/src/tui/tcell.go	/^	width       int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
win	plugged/fzf/test/test_go.rb	/^  attr_reader :win$/;"	A	class:Tmux
window	plugged/fzf/src/terminal.go	/^	window       tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
windowPosition	plugged/fzf/src/options.go	/^type windowPosition int$/;"	t	package:fzf	typeref:typename:int
withIndex	plugged/fzf/src/result_test.go	/^func withIndex(i *Item, index int) *Item {$/;"	f	package:fzf	typeref:typename:*Item
withPrefixLengths	plugged/fzf/src/tokenizer.go	/^func withPrefixLengths(tokens []string, begin int) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
wordNext	plugged/fzf/src/terminal.go	/^	wordNext     string$/;"	m	struct:fzf.Terminal	typeref:typename:string
wordRubout	plugged/fzf/src/terminal.go	/^	wordRubout   string$/;"	m	struct:fzf.Terminal	typeref:typename:string
wrap	plugged/fzf/src/options.go	/^	wrap        bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
wrapLine	plugged/fzf/src/tui/light.go	/^func wrapLine(input string, prefixLength int, max int, tabstop int) []wrappedLine {$/;"	f	package:tui	typeref:typename:[]wrappedLine
wrapped.newsink	plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! wrapped.newsink(lines)$/;"	f
wrappedLine	plugged/fzf/src/tui/light.go	/^type wrappedLine struct {$/;"	s	package:tui
writeTemporaryFile	plugged/fzf/src/terminal.go	/^func writeTemporaryFile(data []string, printSep string) string {$/;"	f	package:fzf	typeref:typename:string
writelines	plugged/fzf/test/test_go.rb	/^  def writelines(path, lines)$/;"	f	class:TestBase
x	plugged/fzf/src/tui/light.go	/^	x             int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
xlink	plugged/vim-go/assets/vim-go.svg	/^   inkscape:export-ydpi="46.84">$/;"	n	uri:http://www.w3.org/1999/xlink
xoffset	plugged/fzf/src/terminal.go	/^	xoffset      int$/;"	m	struct:fzf.Terminal	typeref:typename:int
y	plugged/fzf/src/tui/light.go	/^	y             int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
yanked	plugged/fzf/src/terminal.go	/^	yanked       []rune$/;"	m	struct:fzf.Terminal	typeref:typename:[]rune
yoffset	plugged/fzf/src/tui/light.go	/^	yoffset       int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
zsh	plugged/fzf/test/test_go.rb	/^    def zsh$/;"	S	class:Shell
